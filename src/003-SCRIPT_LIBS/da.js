!function webpackUniversalModuleDefinition(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.da=e():t.da=e()}(window,function(){return function(r){var n={};function __webpack_require__(t){if(n[t])return n[t].exports;var e=n[t]={i:t,l:!1,exports:{}};return r[t].call(e.exports,e,e.exports,__webpack_require__),e.l=!0,e.exports}return __webpack_require__.m=r,__webpack_require__.c=n,__webpack_require__.d=function(t,e,r){__webpack_require__.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},__webpack_require__.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},__webpack_require__.t=function(e,t){if(1&t&&(e=__webpack_require__(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(__webpack_require__.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)__webpack_require__.d(r,n,function(t){return e[t]}.bind(null,n));return r},__webpack_require__.n=function(t){var e=t&&t.__esModule?function getDefault(){return t.default}:function getModuleExports(){return t};return __webpack_require__.d(e,"a",e),e},__webpack_require__.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},__webpack_require__.p="/",__webpack_require__(__webpack_require__.s=11)}([function(t,e,r){t.exports=function(r){function n(t){if(o[t])return o[t].exports;var e=o[t]={i:t,l:!1,exports:{}};return r[t].call(e.exports,e,e.exports,n),e.l=!0,e.exports}var o={};return n.m=r,n.c=o,n.i=function(t){return t},n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:r})},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="/",n(n.s=5)}([function(t,r,n){"use strict";function e(t){if(Array.isArray(t)){for(var e=0,r=Array(t.length);e<t.length;e++)r[e]=t[e];return r}return Array.from(t)}function o(t,e){return{x:t,y:e}}function u(t){for(var r=arguments.length,n=Array(1<r?r-1:0),i=1;i<r;i++)n[i-1]=arguments[i];return o(t.apply(void 0,e(n.map(function(t){return t.x}))),t.apply(void 0,e(n.map(function(t){return t.y}))))}function c(t,e){var r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:1;return u(function(t,e){return t+e*r},t,e)}function i(t,e){return u(function(t,e){return e-t},t,e)}function a(t){return Math.sqrt(t.x*t.x+t.y*t.y)}function p(t,e){var r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:f;return c(r,i(r,t),e)}function l(t){var e=a(t);return u(function(t){return t/e},t)}function s(t,e,r){if(!t)return t;var n=o(t.x+e,t.y+r);return t.cp1&&(n.cp1=o(t.cp1.x+e,t.cp1.y+r)),t.cp2&&(n.cp2=o(t.cp2.x+e,t.cp2.y+r)),n}function b(t,e,r,n){var o=i(t,e),a=o.x*n-o.y*r,s=o.x*r+o.y*n;e.x=t.x+a,e.y=t.y+s}Object.defineProperty(r,"__esModule",{value:!0}),r.point=o,r.makePoint=u,r.add=c,r.diff=i,r.norm=a,r.angle=function f(t){return Math.atan2(t.y,t.x)},r.scale=p,r.getUnitVector=l,r.getPerpendicularVector=function y(t){return l(o(-t.y,t.x))},r.extractPoint=function d(t){return o(t.x,t.y)},r.reflect=function v(t){var e=1<arguments.length&&void 0!==arguments[1]?arguments[1]:1/0,r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:0;if(!t)return t;var n=void 0,i=void 0;return e===1/0?(i=n=0,r=t.y):(n=(t.x+(t.y-r)*e)/(1+e*e),i=n*e),o(2*n-t.x,2*i-t.y+2*r)},r.adjust=s,r.adjustPoints=function x(e,r){for(var n=[],t=arguments.length,o=Array(2<t?t-2:0),i=2;i<t;i++)o[i-2]=arguments[i];return o.forEach(function(t){n.push(s(t,e,r))}),n},r.scalePoints=function h(o,i){for(var t=arguments.length,e=Array(2<t?t-2:0),r=2;r<t;r++)e[r-2]=arguments[r];e.forEach(function(t){if(t&&!1!==t.hasOwnProperty("x")){var e=p(t,i,o),r=e.x,n=e.y;t.x=r,t.y=n,t.cp1&&(t.cp1=p(t.cp1,i,o)),t.cp2&&(t.cp2=p(t.cp2,i,o))}})},r.rotatePoints=function P(e,t){for(var r=Math.cos(t),n=Math.sin(t),o=arguments.length,i=Array(2<o?o-2:0),a=2;a<o;a++)i[a-2]=arguments[a];i.forEach(function(t){t&&!1!==t.hasOwnProperty("x")&&(b(e,t,n,r),t.cp1&&b(e,t.cp1,n,r),t.cp2&&b(e,t.cp2,n,r))})};var f=r.origin=Object.freeze(o(0,0));r.breakPoint=Object.freeze({break:!0}),r.endPoint=Object.freeze({end:!0})},function(t,r,n){"use strict";function e(t){if(Array.isArray(t)){for(var e=0,r=Array(t.length);e<t.length;e++)r[e]=t[e];return r}return Array.from(t)}function o(t,e,r){var n=r.linear,o=r.quadratic,i=r.cubic,a=(0,w.extractPoint)(t),s=(0,w.extractPoint)(e);if(e.cp1&&e.cp2)return i(a,e.cp1,e.cp2,s);var c=e.cp1||e.cp2;return c?o(a,c,s):n(a,s)}function u(n,t,e){return o(t,e,{linear:function(){for(var t=arguments.length,e=Array(t),r=0;r<t;r++)e[r]=arguments[r];return c.apply(void 0,[n].concat(e))},quadratic:function(){for(var t=arguments.length,e=Array(t),r=0;r<t;r++)e[r]=arguments[r];return w.makePoint.apply(void 0,[function a(t,e,r,n){return(e+n-2*r)*t*t+2*(r-e)*t+e}.bind(null,n)].concat(e))},cubic:function(){for(var t=arguments.length,e=Array(t),r=0;r<t;r++)e[r]=arguments[r];return w.makePoint.apply(void 0,[function f(t,e,r,n,o){return e*(1-t)*(1-t)*(1-t)+3*r*(1-t)*(1-t)*t+3*n*(1-t)*t*t+o*t*t*t}.bind(null,n)].concat(e))}})}function c(t,e,r){return(0,w.makePoint)(function i(t,e,r){return t*(r-e)+e}.bind(null,t),e,r)}function p(t,e,r,n,o){var i=c(t,e,r),a=c(t,r,n),s=c(t,n,o),l=c(t,i,a),u=c(t,a,s),f=c(t,l,u),p={p1:e,p2:f};p.p2.cp1=i,p.p2.cp2=l;var h={p1:(0,w.extractPoint)(f),p2:o};return h.p2.cp1=u,h.p2.cp2=s,{left:p,right:h}}function l(t,e,r,n){var o=c(t,e,r),i=c(t,r,n),a=c(t,o,i),s={p1:e,p2:a};s.p2.cp1=o;var l={p1:(0,w.extractPoint)(a),p2:n};return l.p2.cp1=i,{left:s,right:l}}function y(t,e,r){var n=c(t,e,r);return{left:{p1:e,p2:n},right:{p1:n,p2:r}}}function v(t,e,r){return e===t?[]:[(r-t)/(e-t)]}function x(t,e,r,n){return function s(t,e,r){var n=e*e-4*t*r;return n<0?[]:[(-e+Math.sqrt(n))/(2*t),(-e-Math.sqrt(n))/(2*t)]}(t-2*e+r,2*(e-t),t-n)}function h(t){return t<0?-Math.pow(-t,1/3):Math.pow(t,1/3)}function b(t,e,r,n,o){var i=3*(e-=o)-(t-=o)-3*(r-=o)+(n-=o);return function P(t,e,r){var n=t/3,o=(3*e-t*t)/3/3,i=(2*t*t*t-9*t*e+27*r)/27/2,a=(0,k.roundToDec)(i*i+o*o*o,8);if(0<a){var s=Math.sqrt(a);return[h(-i+s)-h(i+s)-n]}if(0===a){var c=h(-i);return[2*c-n,-c-n]}var l=Math.sqrt(-o*o*o),u=-i/l;u<-1?u=-1:1<u&&(u=1);var f=Math.acos(u),p=2*h(l);return[p*Math.cos(f/3)-n,p*Math.cos((f+2*Math.PI)/3)-n,p*Math.cos((f+4*Math.PI)/3)-n]}((3*t-6*e+3*r)/i,(-3*t+3*e)/i,t/i).map(function(t){return(0,k.roundToDec)(t,4)})}function m(t,e){var n=[t];for(var r in e)r.startsWith("cp")&&e.hasOwnProperty(r)&&n.push(e[r]);n.push((0,w.extractPoint)(e));for(var o=(0,w.extractPoint)(e),i=1,a=n.length;i<a;++i)!function(t,e){var r=t/e;o["cp"+t]=(0,w.makePoint)(function(t,e){return r*t+(1-r)*e},n[t-1],n[t])}(i,a);return o}function M(e,r){return o(e,r,{linear:function(){var t=m(e,m(e,r));return[t.cp1,t.cp2]},quadratic:function(){var t=m(e,r);return[t.cp1,t.cp2]},cubic:function(){return[r.cp1,r.cp2]}})}Object.defineProperty(r,"__esModule",{value:!0});var C=function(t,e){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return function r(t,e){var n=[],o=!0,i=!1,a=void 0;try{for(var s,c=t[Symbol.iterator]();!(o=(s=c.next()).done)&&(n.push(s.value),!e||n.length!==e);o=!0);}catch(t){i=!0,a=t}finally{try{!o&&c.return&&c.return()}finally{if(i)throw a}}return n}(t,e);throw new TypeError("Invalid attempt to destructure non-iterable instance")};r.applyToCurve=o,r.getPointOnCurve=u,r.getPointOnLine=c,r.splitCurve=function d(t,e,r){return o(e,r,{linear:y.bind(null,t),quadratic:l.bind(null,t),cubic:p.bind(null,t)})},r.interpolateCurve=function g(r,n,i){var a=void 0;if(null===i.x)a="y";else{if(null!==i.y)return[];a="x"}return o(r,n,{linear:function(){for(var t=arguments.length,r=Array(t),n=0;n<t;n++)r[n]=arguments[n];return v.apply(void 0,e(r.map(function(t){return t[a]})).concat([i[a]]))},quadratic:function(){for(var t=arguments.length,r=Array(t),n=0;n<t;n++)r[n]=arguments[n];return x.apply(void 0,e(r.map(function(t){return t[a]})).concat([i[a]]))},cubic:function(){for(var t=arguments.length,r=Array(t),n=0;n<t;n++)r[n]=arguments[n];return b.apply(void 0,e(r.map(function(t){return t[a]})).concat([i[a]]))}}).filter(function(t){return 0<=(t=(0,k.roundToDec)(t,3))&&t<=1}).map(function(t){var e=u(t,r,n);return e.t=t,e})},r.simpleQuadratic=function O(t,e){var r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:.5,n=3<arguments.length&&void 0!==arguments[3]?arguments[3]:0,o=c(r,t,e);return(0,w.add)(o,(0,w.getPerpendicularVector)((0,w.diff)(t,e)),n)},r.elevateDegree=m,r.getCubicControlPoints=M,r.transformCurve=function j(t,e,r,n){if(!r)return n;if(!n)return r;var o=M(e,r),i=C(o,2),a=i[0],s=i[1],l=M(e,n),u=C(l,2),f=u[0],p=u[1],h=c(t,r,n);return h.cp1=c(t,a,f),h.cp2=c(t,s,p),h},r.reverseDrawPoint=function _(t,e){return t&&e?{x:t.x,y:t.y,cp1:(0,i.clone)(e.cp2),cp2:(0,i.clone)(e.cp1)}:t},r.continueCurve=function A(e,r){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:1;return o(e,r,{linear:function(){return(0,w.add)(r,(0,w.diff)(e,r),n)},quadratic:function(){var t=m(e,r);return(0,w.scale)(t.cp2,-n,r)},cubic:function(){return(0,w.scale)(r.cp2,-n,r)}})};var w=n(0),i=n(3),k=n(2)},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.deg=function e(t){return 180*t/Math.PI},e.rad=function o(t){return t*Math.PI/180},e.unwrapRad=function u(t){for(;t>Math.PI;)t-=2*Math.PI;for(;t<-Math.PI;)t+=2*Math.PI;return t},e.clamp=function c(t,e,r){return t<e?e:r<t?r:t},e.roundToDec=function i(t,e){return parseFloat(t.toFixed(e))}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.clone=function e(t){return t?JSON.parse(JSON.stringify(t)):t},e.fillerDefinition=function o(t,e){var r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:{};t.hasOwnProperty(e)||(t[e]=r)}},function(t,r,n){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.none=void 0,r.drawPoints=function e(t){for(var r=arguments.length,n=Array(1<r?r-1:0),o=1;o<r;o++)n[o-1]=arguments[o];if(!(n.length<1)){var i=n[0];i&&(i===b.breakPoint&&(i=n[1]),i&&i.hasOwnProperty("x")&&t.moveTo(i.x,i.y));for(var a=1,s=n.length;a<s;++a){var c=n[a];c&&(c===b.breakPoint?++a<n.length&&(c=n[a],t.moveTo(c.x,c.y)):c.cp2&&c.cp1?t.bezierCurveTo(c.cp1.x,c.cp1.y,c.cp2.x,c.cp2.y,c.x,c.y,c.traceOptions):c.cp1?t.quadraticCurveTo(c.cp1.x,c.cp1.y,c.x,c.y,c.traceOptions):c.cp2?t.quadraticCurveTo(c.cp2.x,c.cp2.y,c.x,c.y,c.traceOptions):c.hasOwnProperty("x")&&t.lineTo(c.x,c.y))}}},r.drawCircle=function o(t,e){var r=.552284749831*e,n={x:t.x,y:t.y+e},i={x:t.x+e,y:t.y},a={x:t.x,y:t.y-e},s={x:t.x-e,y:t.y};return n.cp1={x:s.x,y:s.y+r},n.cp2={x:n.x-r,y:n.y},i.cp1={x:n.x+r,y:n.y},i.cp2={x:i.x,y:i.y+r},a.cp1={x:i.x,y:i.y-r},a.cp2={x:a.x+r,y:a.y},s.cp1={x:a.x-r,y:a.y},s.cp2={x:s.x,y:s.y-r},[n,i,a,s,n]},r.drawSpecificCurl=function u(t,e,r){var n=(0,b.extractPoint)(t),o=(0,b.extractPoint)(e),i=(0,b.extractPoint)(r),a=t.t,s=void 0===a?.5:a,c=t.deflection,l=void 0===c?.5:c;o.cp1=(0,d.simpleQuadratic)(n,o,s,l);var f=r.t,p=void 0===f?.5:f,h=r.deflection,y=void 0===h?.5:h;return i.cp1=(0,d.simpleQuadratic)(n,o,p,y),[n,o,i]},r.tracePoint=function c(t,e){return e?"number"==typeof e&&(e={radius:e}):e={radius:1},t.traceOptions={point:e},t};var b=n(0),d=n(1);r.none="rgba(0,0,0,0)"},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(3);Object.keys(n).forEach(function(t){"default"!==t&&"__esModule"!==t&&Object.defineProperty(e,t,{enumerable:!0,get:function(){return n[t]}})});var o=r(2);Object.keys(o).forEach(function(t){"default"!==t&&"__esModule"!==t&&Object.defineProperty(e,t,{enumerable:!0,get:function(){return o[t]}})});var i=r(0);Object.keys(i).forEach(function(t){"default"!==t&&"__esModule"!==t&&Object.defineProperty(e,t,{enumerable:!0,get:function(){return i[t]}})});var a=r(1);Object.keys(a).forEach(function(t){"default"!==t&&"__esModule"!==t&&Object.defineProperty(e,t,{enumerable:!0,get:function(){return a[t]}})});var s=r(4);Object.keys(s).forEach(function(t){"default"!==t&&"__esModule"!==t&&Object.defineProperty(e,t,{enumerable:!0,get:function(){return s[t]}})})}])},function(t,e,r){"use strict";r.d(e,"a",function(){return c}),r.d(e,"b",function(){return n}),r.d(e,"g",function(){return o}),r.d(e,"d",function(){return getCanvasGroup}),r.d(e,"c",function(){return getCanvas}),r.d(e,"f",function(){return hideCanvasGroup}),r.d(e,"h",function(){return showCanvasGroup}),r.d(e,"e",function(){return getCanvasHandle});var c=Object.freeze({BASE:0,BACK:1,FRONT:2,SHADING_FRONT:3,ARMS:4,SHADING_ARMS:5,GENITALS:6,SHADING_GENITALS:7,BELOW_HAIR:8,SHADING_BELOW_HAIR:9,HAIR:10,SHADING_HAIR:11,ABOVE_HAIR:12,EFFECTS:13,NUM_LAYERS:14}),n=[c.SHADING_FRONT,c.SHADING_ARMS,c.SHADING_GENITALS,c.SHADING_BELOW_HAIR,c.SHADING_HAIR],o=0;function getCanvasGroup(t,e){var r=t;"string"==typeof t?r=document.getElementById(t):t=t.id;var n=Object.assign({width:"500",height:"800",parent:r},e);r.style.width=n.width+"px",r.style.height=n.height+"px",r.style.textAlign="left";for(var o=[],i=0;i<=c.NUM_LAYERS;++i){var a=t+i,s=null;i!==c.NUM_LAYERS&&(s={visibility:"hidden"}),o.push(getCanvas(a,Object.assign({},n,{"z-index":i},s)))}return r}function getCanvas(t,e){if("string"!=typeof t)return t;var r=document.getElementById(t);if(!r){for(var n in!1===e.hasOwnProperty("parent")&&(e.parent=document.createElement("div"),document.body.appendChild(e.parent),e.parent.style.width=e.width+"px",e.parent.style.height=e.height+"px"),(r=document.createElement("canvas")).id=t,r.width=e.width,r.height=e.height,r.style.position="absolute",e)!1!==e.hasOwnProperty(n)&&"width"!==n&&"height"!==n&&e.hasOwnProperty(n)&&(r.style[n]=e[n]);e.parent.insertBefore(r,e.parent.firstChild)}return r}function hideCanvasGroup(t){getCanvasHandle(t).style.display="none"}function showCanvasGroup(t){getCanvasHandle(t).style.display="block"}function getCanvasHandle(t){return"string"==typeof t?document.getElementById(t):t}},function(t,e,r){"use strict";r.d(e,"a",function(){return i}),r.d(e,"b",function(){return a}),r.d(e,"e",function(){return getSideLocation}),r.d(e,"g",function(){return partConflict}),r.d(e,"d",function(){return getChildLocation}),r.d(e,"f",function(){return getSideValue}),r.d(e,"c",function(){return getAttachedLocation});var u=r(8),n=r(0),o=r(1);function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var i=function(){function BodyPart(){!function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,BodyPart);for(var t=arguments.length,e=new Array(t),r=0;r<t;r++)e[r]=arguments[r];Object.assign.apply(Object,[this,{loc:null,parentPart:null,layer:o.a.BASE,reflect:!1,coverConceal:[],uncoverable:!1,aboveParts:[],belowParts:[]}].concat(e))}return function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}(BodyPart,[{key:"stroke",value:function stroke(){return n.none}},{key:"fill",value:function fill(){return"inherit"}},{key:"getLineWidth",value:function getLineWidth(){return.8}},{key:"calcDrawPoints",value:function calcDrawPoints(t,e,r,n){}}]),BodyPart}(),a={RIGHT:0,LEFT:1,create:function create(t){for(var e=arguments.length,r=new Array(1<e?e-1:0),n=1;n<e;n++)r[n-1]=arguments[n];var o=Object.assign.apply(Object,[{}].concat(r)),i=new t(o),a=o&&o.hasOwnProperty("side")?o.side:null;null===a&&(a=Object(u.d)(i.loc)),void 0!==i.forcedSide&&(a=i.forcedSide);var s=getSideLocation(a);if("right"===s||"left"===s){var c=Object(u.b)(i.loc),l=Object(u.c)(i.loc);i.loc=l+s+" "+c,i.parentPart&&(i.parentPart=s+" "+i.parentPart)}return i.side=getSideValue(a),i}};function getSideLocation(t){return"right"===t||"left"===t?t:t===a.LEFT?"left":t===a.RIGHT?"right":null}function partConflict(t,e){return t.side===e.side&&(Object.getPrototypeOf(t)===Object.getPrototypeOf(e)||Object(u.e)(t.loc)===Object(u.e)(e.loc)&&("-"===t.loc.charAt(0)||"-"===e.loc.charAt(0)||"+"!==t.loc.charAt(0)&&"+"!==e.loc.charAt(0)))}function getChildLocation(t,e){var r=Object(u.d)(t),n=e;null!==r&&(n=r+" "+n);var o=getSideValue(r);return Object(u.d)(n)&&(o=getSideValue(Object(u.d)(n))),{childSide:o,childLoc:n}}function getSideValue(t){return"left"===t||t===a.LEFT?a.LEFT:a.RIGHT}function getAttachedLocation(t){var e=new t;return Object(u.e)(e.loc)}},function(t,e,r){"use strict";r.d(e,"b",function(){return c}),r.d(e,"d",function(){return processClothingPartLocation}),r.d(e,"a",function(){return l}),r.d(e,"c",function(){return u});var n=r(0),i=r(8),s=r(2),o=r(1),a=r(6);function _construct(t,e,r){return(_construct=function isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],function(){})),!0}catch(t){return!1}}()?Reflect.construct:function _construct(t,e,r){var n=[null];n.push.apply(n,e);var o=new(Function.bind.apply(t,n));return r&&_setPrototypeOf(o,r.prototype),o}).apply(null,arguments)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}function _toConsumableArray(t){return function _arrayWithoutHoles(t){if(Array.isArray(t)){for(var e=0,r=new Array(t.length);e<t.length;e++)r[e]=t[e];return r}}(t)||function _iterableToArray(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}var c=function(){function Clothing(){for(var i=this,t=arguments.length,a=new Array(t),e=0;e<t;e++)a[e]=arguments[e];_classCallCheck(this,Clothing),Object.assign(this,{clothingLayer:l.Layer.BASE,thickness:1.2,noCover:!1}),this.parts=[],Object.getPrototypeOf(this).partPrototypes.forEach(function(t){var e=t.side,r=t.Part,n={};Object.assign.apply(Object,[n].concat(_toConsumableArray(a.map(function(t){return t[r.name]}))));var o=new r(n);Object.assign(i,o),processClothingPartLocation(e,o),(o._owner=i).parts.push(o)}),Object.assign.apply(Object,[this].concat(a)),this.side=Object(s.f)(this.side),this.parts.forEach(function(t){t._owner=i})}return _createClass(Clothing,[{key:"stroke",value:function stroke(){return n.none}},{key:"fill",value:function fill(){return"#fff"}}]),Clothing}();function processClothingPartLocation(t,e){void 0!==e.forcedSide&&(t=e.forcedSide);var r=Object(s.e)(t);if(!1===e.forcedNoSideString&&("right"===r||"left"===r)){var n=Object(i.e)(e.loc);if(!1===Object(i.g)(n)){var o=Object(i.c)(e.loc);e.loc=o+r+" "+n}}return e.side=Object(s.f)(t),e}var l={Layer:Object.freeze({BASE:0,INNER:1,MID:2,OUTER:3,NUM_LAYERS:4}),create:function create(t){for(var e=arguments.length,r=new Array(1<e?e-1:0),n=1;n<e;n++)r[n-1]=arguments[n];return _construct(t,r)},simpleStrokeFill:function simpleStrokeFill(t,e,r){Object(a.i)(t,{fill:r.fill,stroke:r.stroke},e),t.lineWidth=r.thickness}},u=function(){function ClothingPart(){_classCallCheck(this,ClothingPart);for(var t=arguments.length,e=new Array(t),r=0;r<t;r++)e[r]=arguments[r];Object.assign.apply(Object,[this,{layer:o.a.FRONT,loc:"torso",forcedNoSideString:!1}].concat(e))}return _createClass(ClothingPart,[{key:"renderClothingPoints",value:function renderClothingPoints(){}}]),ClothingPart}()},function(t,e,r){"use strict";r.d(e,"c",function(){return getLimbPoints}),r.d(e,"d",function(){return getLimbPointsAbovePoint}),r.d(e,"f",function(){return getLimbPointsNegative}),r.d(e,"e",function(){return getLimbPointsBellowPoint}),r.d(e,"a",function(){return findBetween}),r.d(e,"i",function(){return straightenCurve}),r.d(e,"g",function(){return lineLineIntersection}),r.d(e,"b",function(){return getLacingPoints}),r.d(e,"h",function(){return perpendicularPoint});var d=r(0);function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function getLimbPoints(){for(var t,e,r,n,o,i=[],a=[],s=arguments[0],c=arguments[1],l=arguments[2],u=s.y-(s.y-c.y)*l,f=3;f<arguments.length;f++)arguments[f]&&i.push(Object(d.clone)(arguments[f]));if(u>i[0].y)a[0]=i[0];else if(u<i[i.length-1].y)a=i;else for(var p=1;p<i.length;p++){if(u==i[p].y){a=i.splice(0,p+1);break}if(u>i[p].y){var h=(t=i[p-1],e=i[p],r=u,void 0,n=t.y-e.y,o=Math.abs((r-t.y)/n),Object(d.splitCurve)(o,t,e).left.p2);(a=i.splice(0,p))[a.length]=h;break}}return a}function getLimbPointsAbovePoint(){function point_between(t,e,r){var n=Object(d.interpolateCurve)(t,e,{x:null,y:i.y}),o=Object(d.splitCurve)(n[0].t,t,e);return{bottom:o.left.p2,second:o.right.p2}}for(var t=[],e=[],i=arguments[0],r=i.y,n=arguments[1],o=2;o<arguments.length;o++)arguments[o]&&t.push(Object(d.clone)(arguments[o]));if(r>t[0].y)e[0]=t[0];else if(r<t[t.length-1].y)e=t;else for(var a=1;a<t.length;a++){if(r==t[a].y){e=t.splice(0,a+1);break}if(r>t[a].y){var s=void 0;if(n){var c=point_between(t[a],t[a-1]);s=c.bottom,t[a-1]=c.second}else{s=point_between(t[a-1],t[a]).bottom}(e=t.splice(0,a)).push(s);break}}return n&&e.reverse(),e}function getLimbPointsNegative(){for(var t,e,r,n,o,i,a=[],s=[],c=arguments[0],l=arguments[1],u=arguments[2],f=c.y-(c.y-l.y)*u,p=3;p<arguments.length;p++)arguments[p]&&a.push(Object(d.clone)(arguments[p]));if(f>a[0].y)s=a;else if(f<a[a.length-1].y)s[0]=a[a.length-1];else for(var h=a.length-2;0<=h;h--)if(f<a[h].y){var y=(t=a[h],e=a[h+1],r=f,void 0,n=t.y-e.y,o=Math.abs((r-t.y)/n),{top:(i=Object(d.splitCurve)(o,t,e)).left.p2,second:i.right.p2}),b=y.top;a[h+1]=y.second,a.splice(0,h+1),(s=a).unshift(b);break}return s}function getLimbPointsBellowPoint(){function point_between(t,e,r){var n=Object(d.interpolateCurve)(t,e,{x:null,y:i.y}),o=Object(d.splitCurve)(n[0].t,t,e);return(n=o.left.p2).cp1=o.left.cp1,n.cp2=o.left.cp2,n}for(var t=[],e=[],i=arguments[0],r=i.y,n=arguments[1],o=2;o<arguments.length;o++)arguments[o]&&t.push(Object(d.clone)(arguments[o]));if(r>t[0].y)e=t;else if(r<t[t.length-1].y)e[0]=t[t.length-1];else for(var a=t.length-2;0<=a;a--)if(r<t[a].y){var s=void 0;s=n?point_between(t[a+1],t[a]):point_between(t[a],t[a+1]),t.splice(0,a+1),(e=t).unshift(s);break}return n&&e.reverse(),e}function findBetween(t,e,r){var n;return"object"==_typeof(t)&&console.log("ERROR! The first variable inputed in findBetween() is not a primitive value (ie is object)! "),"object"==_typeof(e)&&console.log("ERROR! The first variable inputed in findBetween() is not a primitive value (ie is object)! "),isNaN(r)&&(r=.5),t<e&&(n=t,t=e,e=n),n=Math.abs(t-e)*r+e}function straightenCurve(t,e,r){var n={x:findBetween(t.x,e.x,.5),y:findBetween(t.y,e.y,.5)};e.cp1&&(e.cp1.x=findBetween(e.cp1.x,n.x,r),e.cp1.y=findBetween(e.cp1.y,n.y,r)),e.cp2&&(e.cp2.x=findBetween(e.cp2.x,n.x,r),e.cp2.y=findBetween(e.cp2.y,n.y,r))}function lineLineIntersection(t,e,r,n){var o=e.y-t.y,i=t.x-e.x,a=o*t.x+i*t.y,s=n.y-r.y,c=r.x-n.x,l=s*r.x+c*r.y,u=o*c-s*i;return 0==u?void console.log("Err - lineLineIntersection - they are paralel"):{x:(c*a-i*l)/u,y:(o*l-s*a)/u}}function getLacingPoints(t,e,r,n,o){for(var i=5<arguments.length&&void 0!==arguments[5]?arguments[5]:0,a=[],s=[],c=1/++o,l=0;l*c<=1;l++)s[l]=l%2!=0?(a[l]=Object(d.adjust)(Object(d.getPointOnCurve)(c*l,t,e),i,0),Object(d.adjust)(Object(d.getPointOnCurve)(c*l,r,n),-i,0)):(a[l]=Object(d.adjust)(Object(d.getPointOnCurve)(c*l,r,n),-i,0),Object(d.adjust)(Object(d.getPointOnCurve)(c*l,t,e),i,0));return{inner:a,outer:s}}function perpendicularPoint(t,e,r,n){var o=findBetween(t.x,e.x,r),i=findBetween(t.y,e.y,r),a=Math.atan2(e.y-t.y,e.x-t.x),s=Math.sqrt(Math.pow(i-t.y,2)+Math.pow(o-t.x,2)),c=n,l=Math.sqrt(Math.pow(c,2)+Math.pow(s,2)),u=Math.atan(c/s);return{x:t.x+l*Math.cos(u+a),y:t.y+l*Math.sin(u+a)}}},function(t,e,r){"use strict";r.d(e,"c",function(){return i}),r.d(e,"b",function(){return a}),r.d(e,"a",function(){return s});var n=r(0),o=r(1);function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var i="hsla(0,100%,100%,0.2)",a="hsl(0,15%,85%)",s=function(){function ShadingPart(){!function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,ShadingPart);for(var t=arguments.length,e=new Array(t),r=0;r<t;r++)e[r]=arguments[r];Object.assign.apply(Object,[this,{layer:o.a.FRONT}].concat(e))}return function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}(ShadingPart,[{key:"stroke",value:function stroke(){return n.none}},{key:"fill",value:function fill(){return"hsl(0,15%,80%)"}},{key:"getLineWidth",value:function getLineWidth(){return 0}}]),ShadingPart}()},function(t,e,r){"use strict";r.d(e,"e",function(){return incu}),r.d(e,"b",function(){return cmcu}),r.d(e,"d",function(){return cucm}),r.d(e,"c",function(){return convertPointsToCanvasUnits}),r.d(e,"i",function(){return setStrokeAndFill}),r.d(e,"g",function(){return inheritStroke}),r.d(e,"f",function(){return inheritFill}),r.d(e,"h",function(){return requirePart}),r.d(e,"a",function(){return averageQuadratic});var i=r(10),s=r(8),u=r(0);function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function incu(t){return cmcu(2.54*t)}function cmcu(t){return 2*t}function cucm(t){return t/2}function convertPointsToCanvasUnits(t){if(Array.isArray(t))for(var e=0;e<t.length;++e)convertPointsToCanvasUnits(t[e]);else if("object"===_typeof(t))for(var r=Object.getOwnPropertyNames(t),n=0;n<r.length;++n){var o=r[n];"x"===o||"y"===o?t[o]=cmcu(t[o]):convertPointsToCanvasUnits(t[o])}}function setStrokeAndFill(t,e,r){var n=i.d.call(e,e.stroke,t,r);t.strokeStyle="inherit"===n?r.baseStroke:n;var o=i.d.call(e,e.fill,t,r);t.fillStyle="inherit"===o?r.baseFill:o}function inheritStroke(t,e){var r=Object(s.e)(this.loc),n=e.avatar.getClothingInLocation.call(e.avatar,r),o=null;if(n.forEach(function(t){(null===o||t.clothingLayer>o.clothingLayer)&&(o=t)}),o)return"function"==typeof o.stroke?o.stroke(t,e):o.stroke;var i=e.avatar.getPartInLocation.call(e.avatar,r);if(i){if("function"==typeof i.stroke){var a=i.stroke(t,e);if(a!==u.none)return a}if(i.stroke!==u.none)return i.stroke}return e.baseStroke}function inheritFill(t,e){var r=e.avatar.getPartInLocation(this.loc);return r?"function"==typeof r.fill?r.fill(t,e):r.fill:e.baseFill}function requirePart(t,e){if(!1===e.hasOwnProperty(t))throw new Error("Trying to draw ".concat(t," but it hasn't been defined yet"))}function averageQuadratic(t,e,r,n,o,i,a){r||(r=.5),n||(n=0),o||(o=0);var s={x:t.x*r+e.x*(1-r)+n,y:t.y*r+e.y*(1-r)+o};if(i){var c=e;c.cp1=s,s=Object(u.splitCurve)(i,t,c).right.p2.cp1}if(a){var l=e;l.cp1=s,s=Object(u.splitCurve)(a,t,l).left.p2.cp1}return s}},function(t,e,r){"use strict";r.d(e,"b",function(){return o}),r.d(e,"a",function(){return a});var n=r(1),i=r(2);function _construct(t,e,r){return(_construct=function isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],function(){})),!0}catch(t){return!1}}()?Reflect.construct:function _construct(t,e,r){var n=[null];n.push.apply(n,e);var o=new(Function.bind.apply(t,n));return r&&_setPrototypeOf(o,r.prototype),o}).apply(null,arguments)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var o=function(){function HairPart(){!function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,HairPart);for(var t=arguments.length,e=new Array(t),r=0;r<t;r++)e[r]=arguments[r];Object.assign.apply(Object,[this,{layer:n.a.HAIR,reflect:!1,coverConceal:[],uncoverable:!1}].concat(e))}return function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}(HairPart,[{key:"stroke",value:function stroke(t,e){return e.hairStroke}},{key:"fill",value:function fill(t,e){return e.hairFill}},{key:"getLineWidth",value:function getLineWidth(){return 1.5}}]),HairPart}(),a={create:function create(t){for(var e=arguments.length,r=new Array(1<e?e-1:0),n=1;n<e;n++)r[n-1]=arguments[n];var o=_construct(t,r);return!1===o.hasOwnProperty("side")&&(o.side=Object(i.f)(null)),o},hairBack:Object.freeze({loc:"back hair",layer:n.a.BACK,belowParts:["parts groin"]}),hairAboveEars:Object.freeze({loc:"ears hair",layer:n.a.BELOW_HAIR,aboveParts:["ears"]}),hairMedium:Object.freeze({loc:"medium hair",layer:n.a.GENITALS,aboveParts:["chest","neck"]}),hairFront:Object.freeze({loc:"front hair",layer:n.a.HAIR})}},function(t,e,r){"use strict";r.d(e,"d",function(){return extractSideLocation}),r.d(e,"b",function(){return extractBaseLocation}),r.d(e,"e",function(){return extractUnmodifiedLocation}),r.d(e,"c",function(){return extractLocationModifier}),r.d(e,"a",function(){return o}),r.d(e,"g",function(){return locationIsSideless}),r.d(e,"f",function(){return locateRelativeToDrawpoint});var n=r(79),a=r.n(n),s=r(0);function extractSideLocation(t){var e=extractUnmodifiedLocation(t);return e.indexOf(" ")<0?null:e.substr(0,e.indexOf(" "))}function extractBaseLocation(t){var e=extractUnmodifiedLocation(t);return e.indexOf(" ")<0?e:e.substr(e.lastIndexOf(" ")+1)}function extractUnmodifiedLocation(t){for(var e=0;e<t.length;++e)switch(t[e]){case"+":case"-":break;default:return t.substr(e)}}function extractLocationModifier(t){for(var e="",r=0;r<t.length;++r)switch(t[r]){case"+":case"-":e+=t[r]}return e}var o={ARM:"arm",CHEST:"chest",TORSO:"torso",BUTT:"butt",FEET:"feet",GROIN:"groin",HAND:"hand",HEAD:"head",LEG:"leg",NECK:"neck",PENIS:"penis",VAGINA:"vagina",TESTICLES:"testicles",EAR:"ears",EYEBROW:"brow",EYELASH:"eyelash",EYELID:"eyelid",EYES:"eyes",IRIS:"iris",LIPS:"lips",MOUTH:"mouth",NOSE:"nose",PUPIL:"pupil"};function locationIsSideless(t){switch(t){case o.TORSO:case o.HEAD:case o.NECK:case o.PENIS:case o.TESTICLES:case o.VAGINA:case o.LIPS:case o.MOUTH:case o.NOSE:return!0;default:return!1}}function locateRelativeToDrawpoint(t,e){var r=e.drawpoint,n=e.dx,o=e.dy,i=a()(t,r);return Object(s.adjust)(i,n,o)}},function(t,e,r){"use strict";function extractRGB(t){var e=/rgb\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)/.exec(t);return e?{r:parseInt(e[1]),g:parseInt(e[2]),b:parseInt(e[3])}:null}function extractHSL(t){var e=/hsl\(\s*(\d+)\s*,\s*(\d+)%\s*,\s*(\d+)%\s*\)/.exec(t);return e?{h:parseInt(e[1]),s:parseInt(e[2]),l:parseInt(e[3])}:null}function extractHex(t){var e=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(t);return e?{r:parseInt(e[1],16),g:parseInt(e[2],16),b:parseInt(e[3],16)}:null}function RGBToHSL(t){var e,r,n,o=[t.r,t.g,t.b];e=o[0],r=o[1],n=o[2],e/=255,r/=255,n/=255;var i,a,s=Math.max(e,r,n),c=Math.min(e,r,n),l=(s+c)/2;if(s===c)i=a=0;else{var u=s-c;switch(a=.5<l?u/(2-s-c):u/(s+c),s){case e:i=(r-n)/u+(r<n?6:0);break;case r:i=(n-e)/u+2;break;case n:i=(e-r)/u+4}i/=6}return i*=360,a*=100,l*=100,t.hasOwnProperty("a")?{h:i,s:a,l:l,a:t.a}:{h:i,s:a,l:l}}function adjustColor(t,e){var r=null;return"string"==typeof t?null===(r=extractHSL(t))&&(r=(r=r||extractRGB(t))||extractHex(t))&&(r=RGBToHSL(r)):t.hasOwnProperty("h")&&t.hasOwnProperty("s")&&t.hasOwnProperty("l")?r=t:t.hasOwnProperty("r")&&t.hasOwnProperty("g")&&t.hasOwnProperty("b")&&(r=RGBToHSL(t)),null===r?null:(r.h+=e.h||0,r.s+=e.s||0,r.l+=e.l||0,e.hasOwnProperty("a")?"hsla(".concat(r.h.toFixed(1),",").concat(r.s.toFixed(1),"%,").concat(r.l.toFixed(1),"%,").concat(e.a.toFixed(2),")"):"hsl(".concat(r.h.toFixed(1),",").concat(r.s.toFixed(1),"%,").concat(r.l.toFixed(1),"%)"))}function Ziggurat(){var a=123456789,s=Array(128),c=Array(128),l=Array(128);function RNOR(){var t=SHR3(),e=127&t;return Math.abs(t)<l[e]?t*s[e]:function nfix(t,e){var r,n,o=3.442619855899,i=1/o;for(;;){if(r=t*s[e],0==e){for(r=-Math.log(UNI())*i,n=-Math.log(UNI());n+n<r*r;)r=-Math.log(UNI())*i,n=-Math.log(UNI());return 0<t?o+r:-o-r}if(c[e]+UNI()*(c[e-1]-c[e])<Math.exp(-.5*r*r))return r;if(t=SHR3(),e=127&t,Math.abs(t)<l[e])return t*s[e]}}(t,e)}function SHR3(){var t=a;return t^=t<<13,t^=t>>>17,a+(a=t^=t<<5)|0}function UNI(){return.5*(1+SHR3()/-Math.pow(2,31))}this.nextGaussian=function(){return RNOR()},function zigset(){a^=(new Date).getTime();var t=2147483648,e=3.442619855899,r=e,n=.00991256303526217,o=n/Math.exp(-.5*e*e);l[0]=Math.floor(e/o*t),l[1]=0,s[0]=o/t,s[127]=e/t,c[0]=1,c[127]=Math.exp(-.5*e*e);for(var i=126;1<=i;i--)e=Math.sqrt(-2*Math.log(n/e+Math.exp(-.5*e*e))),l[i+1]=Math.floor(e/r*t),r=e,c[i]=Math.exp(-.5*e*e),s[i]=e/t}()}var n;function randNormal(t,e){return n||(n=new Ziggurat),n.nextGaussian()*e+t}function testRandGenerator(t){for(var e={},r=-100;r<101;++r)e[r]=0;for(;0<t--;)++e[Math.round(randNormal(10,20))];var n=[];for(var o in e)n.push(o+"\t"+e[o]);console.log(n.join("\n"))}function averagePoint(t,e){var r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:.5;return{x:t.x*(1-r)+e.x*r,y:t.y*(1-r)+e.y*r}}function topologicalSort(a,s){for(var c=a.length,l=new Array(c),u={},t=c;t--;)u[t]||visit(a[t],t,[]);return l;function visit(e,t,r){if(0<=r.indexOf(e))throw new Error("Cyclic dependency: "+JSON.stringify(e));if(!~a.indexOf(e))throw new Error("Found unknown node. Make sure to provided all involved nodes. Unknown node: "+JSON.stringify(e));if(!u[t]){u[t]=!0;var n=s.filter(function(t){return t[0]===e});if(t=n.length){var o=r.concat(e);do{var i=n[--t][1];visit(i,a.indexOf(i),o)}while(t)}l[--c]=e}}}function simpleTopologicalSort(t){return topologicalSort(function uniqueNodes(t){for(var e=[],r=0,n=t.length;r<n;r++){var o=t[r];e.indexOf(o[0])<0&&e.push(o[0]),e.indexOf(o[1])<0&&e.push(o[1])}return e}(t),t)}r.d(e,"f",function(){return extractRGB}),r.d(e,"d",function(){return extractHSL}),r.d(e,"e",function(){return extractHex}),r.d(e,"a",function(){return RGBToHSL}),r.d(e,"b",function(){return adjustColor}),r.d(e,"g",function(){return randNormal}),r.d(e,"i",function(){return testRandGenerator}),r.d(e,"c",function(){return averagePoint}),r.d(e,"j",function(){return topologicalSort}),r.d(e,"h",function(){return simpleTopologicalSort}),"function"!=typeof Object.assign&&(Object.assign=function(t){if(null==t)throw new TypeError("Cannot convert undefined or null to object");for(var e=Object(t),r=1;r<arguments.length;r++){var n=arguments[r];if(null!=n)for(var o in n)n.hasOwnProperty(o)&&(e[o]=n[o])}return e}),String.prototype.capitalizeFirstLetter=function(){return this.charAt(0).toUpperCase()+this.slice(1)},Array.prototype.last||(Array.prototype.last=function(){return this.length?this[this.length-1]:null}),Array.prototype.extend||(Array.prototype.extend=function(t){this.push.apply(this,t)}),Array.prototype.contains=function(t){var o=t!=t;return-1<(o||"function"!=typeof Array.prototype.indexOf?function indexOf(t){var e=-1,r=-1;for(e=0;e<this.length;e++){var n=this[e];if(o&&n!=n||n===t){r=e;break}}return r}:Array.prototype.indexOf).call(this,t)},String.prototype.startsWith||(String.prototype.startsWith=function(t,e){return e=e||0,this.substr(e,t.length)===t})},function(t,e,r){"use strict";r.d(e,"a",function(){return n}),r.d(e,"k",function(){return a}),r.d(e,"i",function(){return listAvailablePatterns}),r.d(e,"g",function(){return getPatternFullName}),r.d(e,"f",function(){return getPatternBaseName}),r.d(e,"e",function(){return getPattern}),r.d(e,"d",function(){return getLoadedPattern}),r.d(e,"c",function(){return addPattern}),r.d(e,"b",function(){return addDebugPattern}),r.d(e,"j",function(){return loadPattern}),r.d(e,"h",function(){return isPattern});var n=100,o=!1,i=document.createElement("canvas");i.width=n,i.height=n;var s=i.getContext("2d"),c=document.createElement("canvas"),l={},a=[],u={};function listAvailablePatterns(){var t=[];for(var e in u)u.hasOwnProperty(e)&&t.push(e);return t}function getPatternFullName(t,e){return t+"."+e}function getPatternBaseName(t){var e=t.indexOf(".");return e<0?t:t.substr(0,e)}function getPattern(t){var e=1<arguments.length&&void 0!==arguments[1]?arguments[1]:n;console.log("getting pattern "+t);var r=getPatternFullName(t,e);if(l.hasOwnProperty(r))return l[r];if(!1===u.hasOwnProperty(t))throw new Error("Trying to get pattern that hasn't been added yet: "+t);return a.push(loadPattern(t,u[t],e)),["pattern",{patternName:r,patternSize:e}]}function getLoadedPattern(t,e,r){if(isPattern(t)){var n=l[t[1].patternName];return"function"==typeof n?n(e,r):n}return"function"==typeof t?getLoadedPattern.call(this,t.call(this,e,r),e,r):t}function addPattern(t,e){u[t]||(u[t]=e)}function addDebugPattern(t,e,r){var n=e;return o&&(n=r),addPattern(t,n)}function loadPattern(e,r,i){var a=getPatternFullName(e,i);return"function"==typeof r?r.length<=1?new Promise(function(t){l[a]=r(s),t()}):new Promise(function(t){l[a]=r,t()}):new Promise(function(n,t){var o=new Image;o.onload=function(){var t=o.width/i,e=Math.round(o.height/t);c.width=i,c.height=e;var r=c.getContext("2d");r.scale(1,-1),r.drawImage(o,0,0,o.width,o.height,0,0,i,-e),l[a]=r.createPattern(c,"repeat"),n()},o.onerror=function(){alert(Error("failed to load pattern '"+e+"' from "+r)),t()},o.src=r})}function isPattern(t){return Array.isArray(t)&&"pattern"===t[0]}},function(t,e,r){"use strict";r.r(e);var n=r(0);for(var o in n)"default"!==o&&function(t){r.d(e,t,function(){return n[t]})}(o);var i=r(25);r.d(e,"Materials",function(){return i.a});var a=r(31);r.d(e,"loaded",function(){return a.b}),r.d(e,"load",function(){return a.a});var s=r(9);r.d(e,"extractRGB",function(){return s.f}),r.d(e,"extractHSL",function(){return s.d}),r.d(e,"extractHex",function(){return s.e}),r.d(e,"RGBToHSL",function(){return s.a}),r.d(e,"adjustColor",function(){return s.b}),r.d(e,"randNormal",function(){return s.g}),r.d(e,"testRandGenerator",function(){return s.i}),r.d(e,"averagePoint",function(){return s.c}),r.d(e,"topologicalSort",function(){return s.j}),r.d(e,"simpleTopologicalSort",function(){return s.h});var c=r(48);r.d(e,"serialize",function(){return c.c}),r.d(e,"deserialize",function(){return c.a}),r.d(e,"loadSerialization",function(){return c.b});var l=r(8);r.d(e,"extractSideLocation",function(){return l.d}),r.d(e,"extractBaseLocation",function(){return l.b}),r.d(e,"extractUnmodifiedLocation",function(){return l.e}),r.d(e,"extractLocationModifier",function(){return l.c}),r.d(e,"Location",function(){return l.a}),r.d(e,"locationIsSideless",function(){return l.g}),r.d(e,"locateRelativeToDrawpoint",function(){return l.f});var u=r(10);r.d(e,"IMAGE_MAXSIZE",function(){return u.a}),r.d(e,"patternLoadingQueue",function(){return u.k}),r.d(e,"listAvailablePatterns",function(){return u.i}),r.d(e,"getPatternFullName",function(){return u.g}),r.d(e,"getPatternBaseName",function(){return u.f}),r.d(e,"getPattern",function(){return u.e}),r.d(e,"getLoadedPattern",function(){return u.d}),r.d(e,"addPattern",function(){return u.c}),r.d(e,"addDebugPattern",function(){return u.b}),r.d(e,"loadPattern",function(){return u.j}),r.d(e,"isPattern",function(){return u.h});var f=r(6);r.d(e,"incu",function(){return f.e}),r.d(e,"cmcu",function(){return f.b}),r.d(e,"cucm",function(){return f.d}),r.d(e,"convertPointsToCanvasUnits",function(){return f.c}),r.d(e,"setStrokeAndFill",function(){return f.i}),r.d(e,"inheritStroke",function(){return f.g}),r.d(e,"inheritFill",function(){return f.f}),r.d(e,"requirePart",function(){return f.h}),r.d(e,"averageQuadratic",function(){return f.a});var p=r(1);r.d(e,"Layer",function(){return p.a}),r.d(e,"ShadingLayers",function(){return p.b}),r.d(e,"seamWidth",function(){return p.g}),r.d(e,"getCanvasGroup",function(){return p.d}),r.d(e,"getCanvas",function(){return p.c}),r.d(e,"hideCanvasGroup",function(){return p.f}),r.d(e,"showCanvasGroup",function(){return p.h}),r.d(e,"getCanvasHandle",function(){return p.e});var h=r(15);r.d(e,"getDefault",function(){return h.d}),r.d(e,"applyMods",function(){return h.a}),r.d(e,"removeMods",function(){return h.e}),r.d(e,"getBiasMod",function(){return h.c}),r.d(e,"createTransformation",function(){return h.b}),r.d(e,"transformAndShow",function(){return h.f});var y=r(32);r.d(e,"configureBaseColors",function(){return y.a}),r.d(e,"initCanvas",function(){return y.b});var b=r(12);r.d(e,"draw",function(){return b.c}),r.d(e,"renderBase",function(){return b.g}),r.d(e,"renderParts",function(){return b.h}),r.d(e,"drawPart",function(){return b.e}),r.d(e,"drawPartsLayer",function(){return b.f}),r.d(e,"connectEndPoints",function(){return b.a}),r.d(e,"coverNipplesIfHaveNoBreasts",function(){return b.b}),r.d(e,"drawFocusedWindow",function(){return b.d});var d=r(30);r.d(e,"styles",function(){return d.a});var g=r(16);r.d(e,"DecorativePart",function(){return g.a});var P=r(63);r.d(e,"Mustache",function(){return P.a});var v=r(64);r.d(e,"LegFur",function(){return v.a});var _=r(65);r.d(e,"BeautyMark",function(){return _.a});var O=r(20);r.d(e,"BellyButtonOutline",function(){return O.b}),r.d(e,"DeltoidsOutline",function(){return O.d}),r.d(e,"CollarboneOutline",function(){return O.c}),r.d(e,"PectoralOutline",function(){return O.e}),r.d(e,"AbdominalOutline",function(){return O.a}),r.d(e,"QuadricepsOutline",function(){return O.f});var m=r(40);r.d(e,"EarsHuman",function(){return m.b}),r.d(e,"EarsElf",function(){return m.a});var C=r(46);r.d(e,"BrowHuman",function(){return C.a});var w=r(45);r.d(e,"EyelashHuman",function(){return w.a});var k=r(44);r.d(e,"EyelidHuman",function(){return k.a});var j=r(41);r.d(e,"EyesHuman",function(){return j.a});var x=r(13);r.d(e,"FacePart",function(){return x.a});var S=r(43);r.d(e,"IrisHuman",function(){return S.a});var T=r(58);r.d(e,"LipsHuman",function(){return T.a});var A=r(57);r.d(e,"MouthHuman",function(){return A.a});var L=r(59);r.d(e,"NoseHuman",function(){return L.a});var R=r(42);r.d(e,"PupilHuman",function(){return R.a});var H=r(66);r.d(e,"Player",function(){return H.a});var B=r(17);r.d(e,"baseDimDesc",function(){return B.a}),r.d(e,"basedimDiscretePool",function(){return B.b}),r.d(e,"extendDimensionCalc",function(){return B.c}),r.d(e,"loadDimensionDescriptions",function(){return B.d});var E=r(60);r.d(e,"Expression",function(){return E.a});var M=r(21);r.d(e,"modLimits",function(){return M.c}),r.d(e,"modDiscretePool",function(){return M.b}),r.d(e,"loadMods",function(){return M.a});var F=r(14);r.d(e,"statLimits",function(){return F.b}),r.d(e,"statDiscretePool",function(){return F.a});var D=r(2);r.d(e,"BodyPart",function(){return D.a}),r.d(e,"Part",function(){return D.b}),r.d(e,"getSideLocation",function(){return D.e}),r.d(e,"partConflict",function(){return D.g}),r.d(e,"getChildLocation",function(){return D.d}),r.d(e,"getSideValue",function(){return D.f}),r.d(e,"getAttachedLocation",function(){return D.c});var I=r(35);r.d(e,"ArmHuman",function(){return I.a});var N=r(56);r.d(e,"ButtHuman",function(){return N.a});var z=r(38);r.d(e,"ChestHuman",function(){return z.a}),r.d(e,"NipplesHuman",function(){return z.b});var W=r(67);r.d(e,"BimboChest",function(){return W.a}),r.d(e,"BimboNipples",function(){return W.b});var G=r(39);r.d(e,"FeetHuman",function(){return G.a}),r.d(e,"HoofHorse",function(){return G.b});var Q=r(55);r.d(e,"GroinHuman",function(){return Q.a});var U=r(36);r.d(e,"HandHuman",function(){return U.a});var q=r(52);r.d(e,"HeadHuman",function(){return q.a});var J=r(37);r.d(e,"LegHuman",function(){return J.a});var V=r(53);r.d(e,"NeckHuman",function(){return V.a});var Y=r(34);r.d(e,"PenisHuman",function(){return Y.b}),r.d(e,"PenisHeadHuman",function(){return Y.a});var X=r(50);r.d(e,"TesticlesHuman",function(){return X.a});var $=r(54);r.d(e,"TorsoHuman",function(){return $.a});var K=r(51);r.d(e,"VaginaHuman",function(){return K.a});var Z=r(3);r.d(e,"Clothing",function(){return Z.b}),r.d(e,"processClothingPartLocation",function(){return Z.d}),r.d(e,"Clothes",function(){return Z.a}),r.d(e,"ClothingPart",function(){return Z.c});var tt=r(68);r.d(e,"calcDressShirt",function(){return tt.i}),r.d(e,"DressShirtBasePart",function(){return tt.b}),r.d(e,"DressShirtCollarPart",function(){return tt.e}),r.d(e,"DressShirtButtonPart",function(){return tt.d}),r.d(e,"DressShirtBreastPart",function(){return tt.c}),r.d(e,"LongSleeveCuffPart",function(){return tt.f}),r.d(e,"DressShirt",function(){return tt.a}),r.d(e,"WomenDressShirt",function(){return tt.h}),r.d(e,"MenDressShirt",function(){return tt.g});var et=r(69);r.d(e,"HeelPart",function(){return et.e}),r.d(e,"HeelBaseShine",function(){return et.d}),r.d(e,"HeelBasePart",function(){return et.c}),r.d(e,"HeelStrapPart",function(){return et.h}),r.d(e,"calcHeels",function(){return et.k}),r.d(e,"HeelSideBaseClosedPart",function(){return et.f}),r.d(e,"HeelSideSimpleStrapPart",function(){return et.g}),r.d(e,"calcHeelBaseClosed",function(){return et.j}),r.d(e,"Heels",function(){return et.i}),r.d(e,"ClosedToePumps",function(){return et.a}),r.d(e,"ClosedToeStrappedPumps",function(){return et.b});var rt=r(70);r.d(e,"CapBasePart",function(){return rt.c}),r.d(e,"CapBandPart",function(){return rt.b}),r.d(e,"calcCap",function(){return rt.f}),r.d(e,"Hat",function(){return rt.d}),r.d(e,"SimpleCap",function(){return rt.e}),r.d(e,"BandedCap",function(){return rt.a});var nt=r(61);r.d(e,"JacketBaseShading",function(){return nt.c}),r.d(e,"JacketBasePart",function(){return nt.b}),r.d(e,"calcJacket",function(){return nt.f}),r.d(e,"MediumLooseSleevePart",function(){return nt.e}),r.d(e,"Jacket",function(){return nt.a}),r.d(e,"LooseJacket",function(){return nt.d});var ot=r(33);r.d(e,"NecktiePart",function(){return ot.c}),r.d(e,"NeckAccessory",function(){return ot.a}),r.d(e,"NeckTie",function(){return ot.b});var it=r(27);r.d(e,"CoveredButtPart",function(){return it.a}),r.d(e,"LongPantsPart",function(){return it.b}),r.d(e,"MediumPantsPart",function(){return it.d}),r.d(e,"ShortPantsPart",function(){return it.g}),r.d(e,"ShortsPart",function(){return it.i}),r.d(e,"Pants",function(){return it.f}),r.d(e,"LongTightPants",function(){return it.c}),r.d(e,"MediumTightPants",function(){return it.e}),r.d(e,"ShortTightPants",function(){return it.h}),r.d(e,"TightShorts",function(){return it.j});var at=r(26);r.d(e,"LeftBaseShoeShading",function(){return at.b}),r.d(e,"RightBaseShoeShading",function(){return at.c}),r.d(e,"ShoeSidePart",function(){return at.g}),r.d(e,"ShoePart",function(){return at.f}),r.d(e,"ShoeBasePart",function(){return at.e}),r.d(e,"Shoe",function(){return at.d}),r.d(e,"FlatShoes",function(){return at.a});var st=r(23);r.d(e,"SockPart",function(){return st.h}),r.d(e,"ShortSockPart",function(){return st.e}),r.d(e,"MediumSockPart",function(){return st.c}),r.d(e,"LongSockPart",function(){return st.a}),r.d(e,"ThighHighPart",function(){return st.j}),r.d(e,"ThighHighBandPart",function(){return st.i}),r.d(e,"Sock",function(){return st.g}),r.d(e,"ShortSocks",function(){return st.f}),r.d(e,"MediumSocks",function(){return st.d}),r.d(e,"LongSocks",function(){return st.b}),r.d(e,"ThighHighs",function(){return st.k});var ct=r(22);r.d(e,"SweaterBasePart",function(){return ct.g}),r.d(e,"calcSweaterBase",function(){return ct.i}),r.d(e,"CoveredBreastPart",function(){return ct.b}),r.d(e,"LongSleevePart",function(){return ct.c}),r.d(e,"calcLongSleeve",function(){return ct.h}),r.d(e,"ShortSleevePart",function(){return ct.e}),r.d(e,"Sweater",function(){return ct.f}),r.d(e,"LongSleevedSweater",function(){return ct.d}),r.d(e,"AsymmetricSleevedSweater",function(){return ct.a});var lt=r(18);r.d(e,"BraTopStrapPart",function(){return lt.d}),r.d(e,"BraBotStrapPart",function(){return lt.b}),r.d(e,"BraPart",function(){return lt.c}),r.d(e,"calcBra",function(){return lt.j}),r.d(e,"BreastWrapStrapPart",function(){return lt.f}),r.d(e,"PantiesPart",function(){return lt.h}),r.d(e,"Underwear",function(){return lt.i}),r.d(e,"Bra",function(){return lt.a}),r.d(e,"BreastWrap",function(){return lt.e}),r.d(e,"Panties",function(){return lt.g});var ut=r(71);r.d(e,"RingBotPart",function(){return ut.e}),r.d(e,"RingTopPart",function(){return ut.g}),r.d(e,"StudPart",function(){return ut.h}),r.d(e,"ChainPart",function(){return ut.b}),r.d(e,"Jewelry",function(){return ut.c}),r.d(e,"Piercing",function(){return ut.d}),r.d(e,"RingPiercing",function(){return ut.f}),r.d(e,"StudPiercing",function(){return ut.i}),r.d(e,"ChainJewelry",function(){return ut.a});var ft=r(72);r.d(e,"calcSuperBra",function(){return ft.f}),r.d(e,"calcSuperBraStrap",function(){return ft.g}),r.d(e,"SuperBraGenitalPart",function(){return ft.c}),r.d(e,"SuperBraChestPart",function(){return ft.b}),r.d(e,"SuperPantiesPart",function(){return ft.e}),r.d(e,"SuperBra",function(){return ft.a}),r.d(e,"SuperPanties",function(){return ft.d});var pt=r(73);r.d(e,"SuperPantsPart",function(){return pt.d}),r.d(e,"SuperLegginsPart",function(){return pt.b}),r.d(e,"SuperPants",function(){return pt.c}),r.d(e,"SuperLeggins",function(){return pt.a});var ht=r(74);r.d(e,"Garter",function(){return ht.a}),r.d(e,"SuperSockBandPart",function(){return ht.d}),r.d(e,"SuperSockPart",function(){return ht.e}),r.d(e,"SuperSocks",function(){return ht.f}),r.d(e,"Stockings",function(){return ht.b}),r.d(e,"StockingsGarter",function(){return ht.c});var yt=r(24);r.d(e,"DressBreastPart",function(){return yt.d}),r.d(e,"DressBasePart",function(){return yt.c}),r.d(e,"calcDressCleavage",function(){return yt.h}),r.d(e,"DetachedSleevePart",function(){return yt.a}),r.d(e,"SuperSleevePart",function(){return yt.g}),r.d(e,"LacingPart",function(){return yt.e}),r.d(e,"Dress",function(){return yt.b}),r.d(e,"SuperDress",function(){return yt.f});var bt=r(47);r.d(e,"TeePart",function(){return bt.d}),r.d(e,"HalterTopBreastPart",function(){return bt.b}),r.d(e,"TubeTopBreastPart",function(){return bt.h}),r.d(e,"TopChestPart",function(){return bt.f}),r.d(e,"Top",function(){return bt.e}),r.d(e,"Tee",function(){return bt.c}),r.d(e,"HalterTop",function(){return bt.a}),r.d(e,"TubeTop",function(){return bt.g});var dt=r(75);r.d(e,"CorsetBreastPart",function(){return dt.b}),r.d(e,"CorsetPart",function(){return dt.c}),r.d(e,"HalfCorsetPart",function(){return dt.e}),r.d(e,"Corset",function(){return dt.a}),r.d(e,"HalfCorset",function(){return dt.d});var gt=r(76);r.d(e,"GlovePart",function(){return gt.f}),r.d(e,"FingerlessGlovePart",function(){return gt.c}),r.d(e,"BraceletPart",function(){return gt.b}),r.d(e,"Glove",function(){return gt.e}),r.d(e,"LongGloves",function(){return gt.g}),r.d(e,"FingerlessGloves",function(){return gt.d}),r.d(e,"Bracelet",function(){return gt.a});var Pt=r(77);r.d(e,"ChokerPart",function(){return Pt.b}),r.d(e,"NeckCorsetPart",function(){return Pt.f}),r.d(e,"CollarPart",function(){return Pt.d}),r.d(e,"Choker",function(){return Pt.a}),r.d(e,"NeckCorset",function(){return Pt.e}),r.d(e,"Collar",function(){return Pt.c});var vt=r(78);r.d(e,"GlassesPart",function(){return vt.c}),r.d(e,"Accessory",function(){return vt.a}),r.d(e,"Glasses",function(){return vt.b});var _t=r(28);r.d(e,"Item",function(){return _t.a}),r.d(e,"Items",function(){return _t.b});var Ot=r(29);r.d(e,"Tattoo",function(){return Ot.a}),r.d(e,"Tattoos",function(){return Ot.b});var mt=r(49);r.d(e,"loadDefaultParts",function(){return mt.a})},function(t,e,r){"use strict";r.d(e,"c",function(){return draw}),r.d(e,"g",function(){return renderBase}),r.d(e,"h",function(){return renderParts}),r.d(e,"e",function(){return drawPart}),r.d(e,"f",function(){return drawPartsLayer}),r.d(e,"a",function(){return connectEndPoints}),r.d(e,"b",function(){return coverNipplesIfHaveNoBreasts}),r.d(e,"d",function(){return drawFocusedWindow});var n=r(62),u=r.n(n),f=r(10),p=r(31),h=r(19),d=r(2),y=r(8),b=r(6),g=r(32),P=r(9),v=r(1),_=r(3),O=r(0),m=r(15),C=r(28),w=r(26),k=r(29);function _toConsumableArray(t){return function _arrayWithoutHoles(t){if(Array.isArray(t)){for(var e=0,r=new Array(t.length);e<t.length;e++)r[e]=t[e];return r}}(t)||function _iterableToArray(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function draw(t,r,e){if(!p.b)throw new Error("trying to draw without having loaded first! (call da.load() before)");if(f.k.length)return Promise.all(f.k).then(function(){return f.k.length=0,draw(t,r,e)});var n={nameColor:"#000",genderColor:"#000",heightColor:"#000",heightBarColor:"#000",printAdditionalInfo:!0,printHeight:!0,renderShoeSideView:!0,offsetX:0,offsetY:0};if(e&&Object.assign(n,e),r.Mods.shoeHeight=r.heightAdjust(),n.passThrough||r.calcDimensions(),!h.a[r.skeleton])throw new Error("can't find skeleton with name "+r.skeleton);var o={};o.cx=80+n.offsetX,o.cy=200+n.offsetY,o.avatar=r,o[d.b.LEFT]={},o[d.b.RIGHT]={},r.parts.forEach(function(t){calcPart(o,t)}),r.faceParts.forEach(function(t){calcPart(o,t)}),r.decorativeParts.forEach(function(t){var e=t.loc;(r.getPartInLocation(e)||r.getPartInLocation(e,r.faceParts))&&calcPart(o,t)}),r.fillMissingDrawpoints(o[d.b.LEFT]),r.fillMissingDrawpoints(o[d.b.RIGHT]),Object(b.c)(o[d.b.LEFT]),Object(b.c)(o[d.b.RIGHT]),Object(g.a)(o);for(var i=[],a=t.children.length-1;0<=a;--a)i.push(t.children[a]);o.canvasGroup=i;for(var s=[],c=0;c<v.a.NUM_LAYERS;++c){var l=new u.a(i[c].getContext("2d"));Object(g.b)(i[c],l,n,r,o,c,!0),s.push(l)}return o.height=i[v.a.BASE].height,o.width=i[v.a.BASE].width,o.clip={},new Promise(function(t){return renderBase(s,o),renderParts(s,o,n),o.ctxGroup=s,o.ctx=new u.a(i[v.a.NUM_LAYERS].getContext("2d")),Object(g.b)(i[v.a.NUM_LAYERS],o.ctx,n,r,o,v.a.NUM_LAYERS,!1),t(o),o})}function calcPart(t,e){var r=t.avatar;e.hasOwnProperty("Mods")&&(Object(m.a)(r.Mods,e.Mods),r.calcDimensions()),e.calcDrawPoints.call(r.dim,t[e.side],r._clampedMods,!0,e),e.reflect&&e.calcDrawPoints.call(r.dim,t[1-e.side],r._clampedMods,!0,e),e.hasOwnProperty("Mods")&&(Object(m.e)(r.Mods,e.Mods),r.calcDimensions())}function renderBase(t,e){for(var r=v.a.BASE;r<v.a.NUM_LAYERS;++r){e.clip[r]={};var n=t[r];n.save(),n.scale(-1,1),n.beginPath(),e.clip[r][d.b.LEFT]=drawPartsLayer(e,r,d.b.LEFT,n),n.fill(),n.restore(),e.clip[r][d.b.RIGHT]=drawPartsLayer(e,r,d.b.RIGHT,n),n.fill()}}function strokePart(t,e){t.beginPath(),O.drawPoints.apply(null,[t].concat(e)),t.stroke()}function orderParts(a){var n=["parts","faceParts","decorativeParts","hairParts","clothingParts","shadingParts","tattoos"],r=[],s=new Map,o=[],i=0,c=[];n.forEach(function(e){a[e].forEach(function(t){r[i]=t,s.set(t,i),o.push(e),++i})}),n.forEach(function(t){a[t].forEach(function(t){!function findDependencies(o){var i=s.get(o);o.childParts&&o.childParts.forEach(function(t){var e=Object(d.d)(o.loc,t),r=e.childLoc,n=a.getPartInLocation(r,a.parts);null!==n&&c.push([s.get(n),i])});o.aboveParts&&o.aboveParts.forEach(function(e){var r=null;if(-1<e.indexOf(" ")){var t=e.split(" ");r=t[0],e=t[1]}n.forEach(function(t){r&&r!==t||a[t].forEach(function(t){t===o||t.layer>o.layer||e===Object(y.b)(Object(y.e)(t.loc))&&c.push([i,s.get(t)])})})});o.belowParts&&o.belowParts.forEach(function(e){var r=null;if(-1<e.indexOf(" ")){var t=e.split(" ");r=t[0],e=t[1]}n.forEach(function(t){r&&r!==t||a[t].forEach(function(t){t===o||o.layer>t.layer||e===Object(y.b)(Object(y.e)(t.loc))&&c.push([s.get(t),i])})})})}(t)})}),function findClothingLayerDependencies(){for(var r=[],t=0;t<_.a.Layer.NUM_LAYERS;++t)r.push([]);a.clothingParts.forEach(function(t){var e=t._owner.clothingLayer;r[e].push(t)});for(var e=0;e<r.length;++e)for(var n=function _loop(t){r[e].forEach(function(e){r[t].forEach(function(t){e.layer<=t.layer&&c.push([s.get(t),s.get(e)])})})},o=e+1;o<r.length;++o)n(o)}(),function findClothingSameLayerOrdering(){var r={};a.clothingParts.forEach(function(t){var e=t._owner.clothingLayer;r.hasOwnProperty(e)?r[e].push(t):r[e]=[t]});var t=function _loop2(t){if(!1===r.hasOwnProperty(t))return"continue";var e=r[t];e.forEach(function(r){(r.aboveSameLayerParts||r.belowSameLayerParts)&&e.forEach(function(t){if(t!==r&&t.layer===r.layer){var e=Object(y.b)(Object(y.e)(t.loc));mutualSameLayerOrdering(r.aboveSameLayerParts,t.aboveSameLayerParts)||mutualSameLayerOrdering(r.belowSameLayerParts,t.belowSameLayerParts)||(r.aboveSameLayerParts&&-1<r.aboveSameLayerParts.indexOf(e)&&c.push([s.get(r),s.get(t)]),r.belowSameLayerParts&&-1<r.belowSameLayerParts.indexOf(e)&&c.push([s.get(t),s.get(r)]))}})})};for(var e in r)t(e);function mutualSameLayerOrdering(t,e){var r=!1;return t&&e&&t.forEach(function(t){-1<e.indexOf(t)&&(r=!0)}),r}}();for(var t=[],e=0;e<i;++e)t.push(e);for(var l=Object(P.j)(t,c).reverse(),u=[],f=[],p=0;p<l.length;++p){var h=l[p];u.push(r[h]),f.push(o[h])}return{orderedPartTypes:f,orderedParts:u}}function renderParts(c,l,t){for(var u=l.avatar,e=orderParts(u),r=e.orderedPartTypes,f=e.orderedParts,o=[],n={},i=0;i<f.length;++i){var a=f[i];if(a.coverConceal&&a.coverConceal.length)if(u.checkPartCoveredByClothing(a))continue;!1===n.hasOwnProperty(r[i])&&(n[r[i]]={});var s=n[r[i]];switch(s.hasOwnProperty(a.loc)&&(s[a.loc]=null),r[i]){case"parts":case"faceParts":case"decorativeParts":renderPart(a,i,s);break;case"shadingParts":renderShading(a,i,s);break;case"hairParts":renderHairPart(a);break;case"clothingParts":renderClothingPart(a);break;case"tattoos":renderTattoo(a)}}function renderTattoo(t){var e=k.b.getRender(t),r=t.width?t.width/e.width:1,n=c[t.layer],o=t.renderTattooLocation(l[t.side]);(n.save(),t.side===d.b.LEFT&&n.scale(-1,1),t.ignoreClip)||clipPart(n,l.clip[t.layer][t.side]);var i=Object(O.rad)(180+t.rotation);n.translate(o.x,o.y),n.scale(r,r),n.rotate(i),n.drawImage(e,-e.width/2,-e.height/2),n.restore()}function renderShading(t,e,r){var n=c[t.layer+1];n.save(),t.side!==d.b.LEFT&&!0!==t.reflect||n.scale(-1,1),Object(b.i)(n,t,l),n.save(),t.clipFill&&clipPart(n,t.clipFill.call(u.dim,l[t.side])),drawPart(l,f,e,t.layer,t.side,r),fillPart(n,r[t.loc]),strokePart(n,r[t.loc]),n.restore(),!0===t.reflect&&(n.scale(-1,1),t.clipFill&&clipPart(n,t.clipFill.call(u.dim,l[t.side])),fillPart(n,r[t.loc]),strokePart(n,r[t.loc])),n.restore()}function renderPart(t,e,r){if(t.calcDrawPoints){var n=c[t.layer];n.save(),t.side!==d.b.LEFT&&!0!==t.reflect||n.scale(-1,1),Object(b.i)(n,t,l),n.lineWidth=t.getLineWidth(u);var o=t.clipFill?t.clipFill(l[t.side]):l.clip[t.layer][t.side];n.save(),clipPart(n,o),drawPart(l,f,e,t.layer,t.side,r),fillPart(n,r[t.loc]),n.restore();var i=!0;if(i="function"==typeof t.stroke&&0===t.stroke.length?t.stroke()!==O.none:t.stroke!==O.none)if(t.clipStroke){var a=t.clipStroke(l[t.side]);n.save(),clipPart(n,a),strokePart(n,r[t.loc]),n.restore()}else strokePart(n,r[t.loc]);if(!0===t.reflect&&(n.scale(-1,1),n.save(),clipPart(n,o),fillPart(n,r[t.loc]),n.restore(),i))if(t.hasOwnProperty("clipStroke")){var s=t.clipStroke(l[t.side]);n.save(),clipPart(n,s),strokePart(n,r[t.loc]),n.restore()}else strokePart(n,r[t.loc]);n.restore()}}function renderHairPart(t){var e=c[t.layer];e.save(),Object(b.i)(e,t,l),t.renderHairPoints.call(u.dim,e,l[t.side],u._clampedMods,l),t.reflect&&(e.save(),e.scale(-1,1),t.renderHairPoints.call(u.dim,e,l[1-t.side],u._clampedMods,l),e.restore()),e.restore()}function renderClothingPart(t){if(t instanceof w.g)o.push(t);else{var e=c[t.layer],r=t.side;e.save(),t.side===d.b.LEFT&&e.scale(-1,1),t.renderClothingPoints.call(t._owner,l[r],e,u._clampedMods,u),e.restore(),t.reflect&&(e.save(),e.scale(-1,1),t.renderClothingPoints.call(t._owner,l[1-r],e,u._clampedMods,u),e.restore())}}!function renderItems(){var a={x:-l.cx-l.ox+5,y:.15*l.height/2.5};u.items.forEach(function(t){var e=C.b.getItemRender(t),r=e.width,n=e.height;t.width&&(n*=t.width/r,r=t.width);var o=c[t.layer];o.scale(1,-1);var i=t.renderItemLocation(l,r,n);i?o.drawImage(e,i.x,-i.y,r,-n):(o.drawImage(e,a.x,-a.y,r,-n),a.y+=n),o.scale(1,-1)})}(),function synthesizeLayers(){var t=l.canvasGroup[v.a.NUM_LAYERS],e=t.getContext("2d");e.setTransform(1,0,0,1,0,0),e.clearRect(0,0,t.width,t.height);var r=document.createElement("canvas");r.width=l.canvasGroup[0].width,r.height=l.canvasGroup[0].height;for(var n=r.getContext("2d"),o=v.a.BASE;o<v.a.NUM_LAYERS;++o)v.b.indexOf(o)<0?(e.globalCompositeOperation="source-over",e.drawImage(l.canvasGroup[o],0,0)):(n.clearRect(0,0,r.width,r.height),n.drawImage(l.canvasGroup[o],0,0),n.globalCompositeOperation="destination-in",n.drawImage(t,0,0),e.globalCompositeOperation="multiply",e.drawImage(r,0,0),n.globalCompositeOperation="source-over")}(),t.renderShoeSideView&&function renderShoeSideView(){var r=l.canvasGroup[v.a.NUM_LAYERS].getContext("2d");r.save(),r.translate(l.ox,l.height-30);var t=l.scaling;r.scale(t,-t);var e=220/t,n=.2*l.height/t;r.rect(0,0,e,n),r.clip(),o.forEach(function(t){var e=t.side;r.save(),t.renderShoeSidePart.call(t._owner,l[e],r,u._clampedMods),r.restore()}),r.restore()}()}function drawPart(t,e,r,n,o,i){var a=e[r];if("number"==typeof a.layer){if(a.calcDrawPoints&&a.layer===n&&(!1!==a.reflect||a.side===o&&!i[a.loc])){var s=t.avatar;a.hasOwnProperty("Mods")&&(Object(m.a)(s.Mods,a.Mods),s.calcDimensions());var c=a._owner?a._owner:s.dim,l=a.calcDrawPoints.call(c,t[o],s._clampedMods,!1,a,s);a.hasOwnProperty("Mods")&&(Object(m.e)(s.Mods,a.Mods),s.calcDimensions());for(var u=[],f=0;f<l.length;++f)if(l[f]&&l[f].hasOwnProperty("child")){var p=Object(d.d)(a.loc,l[f].child),h=p.childLoc,y=p.childSide;if(!1===i.hasOwnProperty(h))for(var b=0;b<e.length;++b)if(e[b].loc===h&&e[b]instanceof d.a){drawPart(t,e,b,n,y,i);break}u.extend(i[h]),i[h]=[]}else u.push(l[f]);return i[a.loc]=u}}else console.log(a.loc,"in layer",a.layer,"not found typeof",_typeof(v.a[a.layer]))}function drawPartsLayer(t,e,r,n){for(var o=[],i={},a=0;a<t.avatar.parts.length;++a){drawPart(t,t.avatar.parts,a,e,r,i);var s=t.avatar.parts[a];!1===t.avatar.checkPartCoveredByClothing(s)&&o.push(t.avatar.parts[a].loc)}return o=function synthesizeDrawPoints(t,e){for(var r=[],n=0;n<t.length;++n)r.extend(e[t[n]]);return r}(o,i),O.drawPoints.apply(null,[n].concat(o)),o}function clipPart(t,e){e&&(t.beginPath(),O.drawPoints.apply(null,[t].concat(e)),t.closePath(),t.clip())}function fillPart(t,e){t.beginPath();var r=[];e.forEach(function(t){t&&t.hasOwnProperty("fillOnly")?r.push.apply(r,_toConsumableArray(t.fillOnly)):r.push(t)}),O.drawPoints.apply(null,[t].concat(r));var n=null,o=r[r.length-1];if(o!==O.endPoint){for(var i=0;i<r.length;++i)if(r[i]&&r[i].hasOwnProperty("x")){n=r[i];break}for(var a=r.length-1;0<=a;--a)if(r[a]&&r[a].hasOwnProperty("x")){o=r[a];break}if(null!==n){var s=connectEndPoints(o,n);Object(O.drawPoints)(t,null,s),t.fill()}}else t.fill()}function connectEndPoints(t,e){var r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:.25,n=Object(O.extractPoint)(e),o=Object(O.diff)(t,e);return n.cp1=Object(O.simpleQuadratic)(t,e,.5,Object(O.norm)(o)*r),n}function coverNipplesIfHaveNoBreasts(t,e,r){return!1===t.hasOwnProperty("breast")&&(e.save(),e.lineWidth=10,Object(b.i)(e,{fill:O.none,stroke:r.fill},t),e.beginPath(),Object(O.drawPoints)(e,O.breakPoint,t.chest.nipples),e.stroke(),e.restore(),!0)}function drawFocusedWindow(t,e,r){var n=t.getContext("2d");n.clearRect(0,0,t.width,t.height);var o=e.ctx.canvas,i=r.center.x-r.width/2,a=r.center.y+r.height/2,s=e.ctx.tf.last().applyToPoint(i,a),c=r.width*e.scaling,l=r.height*e.scaling,u=Math.min(t.width,t.height/l*c);n.drawImage(o,s.x,s.y,c,l,0,0,u,t.height)}},function(t,e,r){"use strict";r.d(e,"a",function(){return i});var n=r(0),o=r(1);function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var i=function(){function FacePart(){!function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,FacePart);for(var t=arguments.length,e=new Array(t),r=0;r<t;r++)e[r]=arguments[r];Object.assign.apply(Object,[this,{layer:o.a.BELOW_HAIR,reflect:!1,coverConceal:[],uncoverable:!1}].concat(e))}return function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}(FacePart,[{key:"stroke",value:function stroke(){return n.none}},{key:"fill",value:function fill(){return"inherit"}},{key:"getLineWidth",value:function getLineWidth(){return 1.5}}]),FacePart}()},function(t,e,r){"use strict";r.d(e,"b",function(){return n}),r.d(e,"a",function(){return o});var n={age:{low:0,high:1e9,avg:30,stdev:6,bias:0},fem:{low:0,high:11,avg:5,stdev:1,bias:2},sub:{low:0,high:11,avg:4,stdev:1,bias:1}},o={skeleton:["human"]}},function(t,e,r){"use strict";var n={age:0,str:-.5,dex:-.3,con:-.2,wil:0,eyes:5,breast:2,skin:2,fem:2,sub:2,hairc:0,height:-3,genitals:0,face:3,lips:2,hairlength:3,shoulders:1.5,breasts:5,testes:2,penis:2,waist:2,legs:3,skinc:-3,lipw:0,lipt:4,liph:0,lipc:0,lipa:0,legl:0,eyec:0,noseskew:0,penist:-2,browh:0};function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function getDefault(n,o){return function run(){var t={};for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e].avg);if(o)for(var r in o)o.hasOwnProperty(r)&&(t[r]=o[r][0]);return t}}function applyMods(t,e){for(var r in e)e.hasOwnProperty(r)&&(t.hasOwnProperty(r)?t[r]+=e[r]:t[r]=e[r])}function removeMods(t,e){for(var r in e)e.hasOwnProperty(r)&&t.hasOwnProperty(r)&&(t[r]-=e[r])}function getBiasMod(t,e){return t.hasOwnProperty("bias")?t.bias:n.hasOwnProperty(e)?n[e]:1}function createTransformation(r,t,n){var o=0;return{object:r,transform:function transform(t){var e=t;return 1<o+t?(e=1-o,o=1):o+=t,function performTransformation(t,e,r){for(var n in e)if(e.hasOwnProperty(n)&&t.hasOwnProperty(n))switch(_typeof(e[n])){case"object":performTransformation(t[n],e[n],r);break;case"number":t[n]+=e[n]*r;break;default:console.log("unrecognized transformation property type ".concat(_typeof(e[n])," for ").concat(n))}}(r,n,e),o},showTransformation:t}}function transformAndShow(i){var a=1<arguments.length&&void 0!==arguments[1]?arguments[1]:5e3,s=null;return new Promise(function(o){window.requestAnimationFrame(function doTransform(t){var e=null===s?0:t-s;s=t;var r=e/a,n=i.transform(r);i.showTransformation(),n<1?window.requestAnimationFrame(doTransform):o()})})}r.d(e,"d",function(){return getDefault}),r.d(e,"a",function(){return applyMods}),r.d(e,"e",function(){return removeMods}),r.d(e,"c",function(){return getBiasMod}),r.d(e,"b",function(){return createTransformation}),r.d(e,"f",function(){return transformAndShow})},function(t,e,r){"use strict";r.d(e,"a",function(){return o});var n=r(1);function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var o=function(){function DecorativePart(){!function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,DecorativePart);for(var t=arguments.length,e=new Array(t),r=0;r<t;r++)e[r]=arguments[r];Object.assign.apply(Object,[this,{loc:null,layer:n.a.BASE,reflect:!1,coverConceal:[],uncoverable:!1}].concat(e))}return function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}(DecorativePart,[{key:"stroke",value:function stroke(){return"inherit"}},{key:"fill",value:function fill(){return"inherit"}},{key:"getLineWidth",value:function getLineWidth(){return 1.5}}]),DecorativePart}()},function(t,e,r){"use strict";function _slicedToArray(t,e){return function _arrayWithHoles(t){if(Array.isArray(t))return t}(t)||function _iterableToArrayLimit(t,e){var r=[],n=!0,o=!1,i=void 0;try{for(var a,s=t[Symbol.iterator]();!(n=(a=s.next()).done)&&(r.push(a.value),!e||r.length!==e);n=!0);}catch(t){o=!0,i=t}finally{try{n||null==s.return||s.return()}finally{if(o)throw i}}return r}(t,e)||function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}r.d(e,"a",function(){return n}),r.d(e,"b",function(){return o}),r.d(e,"c",function(){return extendDimensionCalc}),r.d(e,"d",function(){return loadDimensionDescriptions});var n={human:{areolaSize:{linkedPart:"chest",units:"mm",low:0,high:50,avg:20,stdev:2,bias:3},armThickness:{linkedPart:"arm",units:"mm",low:45,high:95,avg:65,stdev:3,bias:-7,calc:function calc(){return adjustLengthByHeight(this.getDim("armThickness")-.5*this.get("fem"),this.getDim("height"),.2)}},armLength:{linkedPart:"arm",units:"cm",low:30,high:80,avg:45,stdev:2,bias:0,calc:function calc(){return adjustLengthByHeight(this.getDim("armLength"),this.getDim("height"))}},breastSize:{linkedPart:"chest",units:"cm",low:-10,high:50,avg:-1,stdev:5,bias:20,calc:function calc(){return this.getDim("breastSize")+.1*this.get("fem")}},buttFullness:{linkedPart:"butt",units:"arbitrary",low:0,high:40,avg:10,stdev:2,bias:4,calc:function calc(){return this.getDim("buttFullness")+.2*this.get("fem")}},chinWidth:{linkedPart:"head",units:"mm",low:30,high:140,avg:70,stdev:2,bias:-2},eyelashLength:{linkedPart:"eyelash",units:"mm",low:0,high:15,avg:3,stdev:2,bias:3},eyeSize:{linkedPart:"eyes",units:"mm",low:0,high:40,avg:15,stdev:2,bias:3},faceFem:{linkedPart:"head",units:"arbitrary",low:0,high:40,avg:15,stdev:2,bias:14,calc:function calc(){return this.getDim("faceFem")+.5*this.get("fem")}},faceLength:{linkedPart:"head",units:"mm",low:180,high:270,avg:230,stdev:5,bias:-2},faceWidth:{linkedPart:"head",units:"mm",low:75,high:105,avg:93,stdev:2,bias:-2,calc:function calc(){return this.getDim("faceWidth")-.5*this.get("fem")}},hairLength:{linkedPart:"hair",units:"cm",low:0,high:110,avg:6,stdev:2,bias:10,calc:function calc(){return this.getDim("hairLength")+this.get("fem")}},hairStyle:{linkedPart:"hair",desc:"Index of base hair style to be worn (individual parts can be swapped afterwards)",units:"index",low:0,high:r(30).a.length-1,avg:1,stdev:1,bias:0,calc:function calc(){return Math.round(this.getDim("hairStyle"))}},hairHue:{linkedPart:"hair",units:"degree",low:0,high:360,avg:30,stdev:30,bias:0},hairSaturation:{linkedPart:"hair",units:"%",low:0,high:100,avg:50,stdev:10,bias:0},hairLightness:{linkedPart:"hair",units:"%",low:0,high:100,avg:30,stdev:10,bias:0},handSize:{linkedPart:"hand",units:"mm",low:0,high:200,avg:100,stdev:5,bias:-10,calc:function calc(){return adjustLengthByHeight(this.getDim("handSize")-.3*this.get("fem"),this.getDim("height"),.4)}},height:{units:"cm",low:50,high:270,avg:167,stdev:3,bias:-5},hipWidth:{linkedPart:"torso",units:"mm",low:70,high:200,avg:125,stdev:2.5,bias:3,calc:function calc(){return this.getDim("hipWidth")+2*this.get("fem")}},legFem:{linkedPart:"leg",units:"arbitrary",low:0,high:40,avg:13,stdev:2,bias:9,calc:function calc(){return this.getDim("legFem")+.6*this.get("fem")}},legFullness:{linkedPart:"leg",desc:"Approximately how thick the leg is as a combination of fat and muscle",units:"arbitrary",low:0,high:40,avg:10,stdev:3,bias:2,calc:function calc(){return this.getDim("legFullness")+.5*this.get("fem")}},legLength:{linkedPart:"leg",units:"cm",low:20,high:200,avg:95,stdev:2.5,bias:4,calc:function calc(){return adjustLengthByHeight(this.getDim("legLength"),this.getDim("height"))}},lipSize:{linkedPart:"lips",units:"mm",low:0,high:40,avg:14,stdev:1.5,bias:2,calc:function calc(){return this.getDim("lipSize")+.05*this.get("fem")}},lowerMuscle:{linkedPart:"leg",units:"arbitrary",low:0,high:40,avg:16,stdev:3,bias:-17,calc:function calc(){return this.getDim("lowerMuscle")-this.get("fem")}},neckLength:{linkedPart:"neck",units:"mm",low:0,high:120,avg:72,stdev:5,bias:0},neckWidth:{linkedPart:"neck",units:"mm",low:35,high:75,avg:45,stdev:2,bias:-2},penisSize:{linkedPart:"genitals",units:"mm",low:0,high:200,avg:20,stdev:5,bias:-20,calc:function calc(){return this.getDim("penisSize")-.5*this.get("fem")+.5*this.getMod("arousal")}},shoulderWidth:{linkedPart:"chest",units:"mm",low:0,high:200,avg:73,stdev:2,bias:-7,calc:function calc(){return adjustLengthByHeight(this.getDim("shoulderWidth")-.3*this.get("fem"),this.getDim("height"),.4)}},skin:{units:"arbitrary",low:-20,high:50,avg:7,stdev:5},testicleSize:{linkedPart:"genitals",units:"mm",low:0,high:100,avg:35,stdev:4,bias:-20,calc:function calc(){return this.getDim("testicleSize")-this.get("fem")}},upperMuscle:{linkedPart:"chest",units:"arbitrary",low:0,high:40,avg:14,stdev:3,bias:-15,calc:function calc(){return this.getDim("upperMuscle")-.5*this.get("fem")}},vaginaSize:{linkedPart:"genitals",units:"mm",low:0,high:100,avg:40,stdev:10,bias:5,calc:function calc(){return this.getDim("vaginaSize")+this.Mods.labiaFullness+.2*this.Mods.arousal}},waistWidth:{linkedPart:"torso",units:"mm",low:70,high:150,avg:120,stdev:3,bias:-3,calc:function calc(){return this.getDim("waistWidth")-this.get("fem")+this.getDim("upperMuscle")}}}};function adjustLengthByHeight(t,e){var r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:1;return t*(1-r)+t*r*e/170}var o={eyecolor:["white"]};function extendDimensionCalc(o,i){if("string"==typeof o){var t=_slicedToArray(o.split("."),2),e=t[0],r=t[1];o=n[e][r]}var a=o.calc;o.calc=function(){for(var t,e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return t=a?a.call.apply(a,[this].concat(r)):this.getDim(o.name),i.call.apply(i,[this,t].concat(r))}}function loadDimensionDescriptions(){for(var t in n)if(!1!==n.hasOwnProperty(t)){var e=n[t];for(var r in e)e.hasOwnProperty(r)&&(e[r].name=r)}}},function(t,e,r){"use strict";r.d(e,"d",function(){return n}),r.d(e,"b",function(){return a}),r.d(e,"c",function(){return s}),r.d(e,"j",function(){return calcBra}),r.d(e,"f",function(){return h}),r.d(e,"h",function(){return y}),r.d(e,"i",function(){return b}),r.d(e,"a",function(){return d}),r.d(e,"e",function(){return g}),r.d(e,"g",function(){return P});var l=r(3),u=r(12),o=r(1),f=r(6),i=r(10),p=r(0);function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var n=function(t){function BraTopStrapPart(){var t;_classCallCheck(this,BraTopStrapPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(BraTopStrapPart)).call.apply(t,[this,{layer:o.a.FRONT,loc:"+torso",reflect:!0,aboveParts:["parts neck","parts chest"]}].concat(r)))}return _inherits(BraTopStrapPart,l["c"]),_createClass(BraTopStrapPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){var r=calcBra(t);if(null!==r){var n=Object(p.splitCurve)(.2,t.neck.cusp,t.collarbone),o={};o.top=n.left.p2,r.top.cp1={x:o.top.x-2,y:o.top.y-15},r.top.cp2={x:r.top.x,y:r.top.y+5},Object(f.i)(e,{fill:this.fill,stroke:this.stroke},t),e.lineWidth=this.strapWidth,e.beginPath(),Object(p.drawPoints)(e,o.top,r.top),e.stroke()}}}]),BraTopStrapPart}(),a=function(t){function BraBotStrapPart(){var t;_classCallCheck(this,BraBotStrapPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(BraBotStrapPart)).call.apply(t,[this,{layer:o.a.FRONT,loc:"+chest",reflect:!0,aboveParts:["parts torso"],belowParts:["parts chest"]}].concat(r)))}return _inherits(BraBotStrapPart,l["c"]),_createClass(BraBotStrapPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){if(null!==calcBra(t)){var r={};r.out={x:t.breast.bot.x,y:t.breast.cleavage.y},r.outbot={x:t.breast.bot.x,y:t.breast.bot.y+1},r.bot={x:-o.g,y:t.breast.bot.y+3},r.mid={x:-o.g,y:t.breast.cleavage.y},Object(f.i)(e,{fill:this.fill,stroke:this.stroke},t),e.beginPath(),Object(p.drawPoints)(e,r.out,r.outbot,r.bot,r.mid,r.out),e.fill()}}}]),BraBotStrapPart}(),s=function(t){function BraPart(){var t;_classCallCheck(this,BraPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(BraPart)).call.apply(t,[this,{layer:o.a.GENITALS,loc:"chest",reflect:!0,aboveParts:["parts chest","decorativeParts chest"]}].concat(r)))}return _inherits(BraPart,l["c"]),_createClass(BraPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){var r=calcBra(t);null!==r&&(r.out.cp1=Object(p.simpleQuadratic)(r.top,r.out,.4,1),r.top.cp1=Object(p.simpleQuadratic)(t.breast.cleavage,r.top,.6,2),Object(f.i)(e,{fill:this.fill,stroke:this.stroke},t),e.beginPath(),Object(p.drawPoints)(e,r.top,r.out,r.tip,t.breast.bot,t.breast.in,t.breast.cleavage,r.top),e.fill(),e.stroke())}}]),BraPart}();function calcBra(t){if(!1===t.hasOwnProperty("breast"))return null;var e=Object(p.splitCurve)(.7,t.breast.top,t.breast.tip),r={out:Object(p.clone)(e.right.p1),tip:Object(p.clone)(e.right.p2)};return r.top={x:t.breast.bot.x,y:r.out.y+2},r}var c=function(t){function BreastWrapPart(){var t;_classCallCheck(this,BreastWrapPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(BreastWrapPart)).call.apply(t,[this,{layer:o.a.GENITALS,loc:"chest",reflect:!0,aboveParts:["parts chest","decorativeParts chest"]}].concat(r)))}return _inherits(BreastWrapPart,l["c"]),_createClass(BreastWrapPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e,r,n){if(t.breast){for(var o=Object(p.clone)(t.breast.top),i=Object(p.splitCurve)(Object(p.clamp)(.01*n.getDim("breastSize")-.25,0,1),t.breast.top,t.breast.tip),a=i.left.p2,s=i.right.p2,c=0,l=n.getPartInLocation("chest",n.decorativeParts,c);l;)l.coverConceal=["chest"],l=n.getPartInLocation("chest",n.decorativeParts,++c);Object(f.i)(e,{fill:this.fill,stroke:this.stroke},t),e.beginPath(),Object(p.drawPoints)(e,o,t.breast.tip,t.breast.bot,t.breast.in,Object(u.a)(t.breast.in,o)),e.fill(),e.beginPath(),Object(p.drawPoints)(e,a,s,t.breast.bot),e.stroke()}}}]),BreastWrapPart}(),h=function(t){function BreastWrapStrapPart(){var t;_classCallCheck(this,BreastWrapStrapPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(BreastWrapStrapPart)).call.apply(t,[this,{layer:o.a.FRONT,loc:"+chest",reflect:!0,aboveParts:["parts torso"],belowParts:["parts chest"]}].concat(r)))}return _inherits(BreastWrapStrapPart,l["c"]),_createClass(BreastWrapStrapPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e,r,n){var o,i={x:0,y:t.armpit.y},a=Object(p.extractPoint)(t.armpit);t.breast&&(i.y=t.breast.top.y-2,(o=Object(p.extractPoint)(t.breast.top)).cp1={x:.5*o.x,y:i.y},a.cp1=Object(p.simpleQuadratic)(o,a,.5,1));var s=Object(p.splitCurve)(Object(p.clamp)(this.chestCoverage+.01*n.getDim("breastSize"),0,1),t.armpit,t.waist).left.p2,c={x:0,y:s.y-1};c.cp1={x:.5*s.x,y:c.y},l.a.simpleStrokeFill(e,t,this),e.beginPath(),Object(p.drawPoints)(e,i,o,a,s,c),e.fill(),e.stroke()}}]),BreastWrapStrapPart}(),y=function(t){function PantiesPart(){var t;_classCallCheck(this,PantiesPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(PantiesPart)).call.apply(t,[this,{layer:o.a.FRONT,loc:"groin",reflect:!0,aboveParts:["parts groin","parts torso"],belowParts:["parts leg"]}].concat(r)))}return _inherits(PantiesPart,l["c"]),_createClass(PantiesPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){if(!1!==t.hasOwnProperty("groin")){var r={};r.top={x:-o.g,y:t.pelvis.y};var n=Object(p.splitCurve)(.9,t.waist,t.hip);r.out=n.right.p1,r.out.cp1=Object(p.simpleQuadratic)(r.top,r.out,.4,-3),r.outbot=n.right.p2,r.bot={x:-o.g,y:t.groin.y},r.bot.cp1={x:r.outbot.x,y:r.outbot.y},r.bot.cp2={x:r.bot.x+5,y:r.bot.y},l.a.simpleStrokeFill(e,t,this),e.beginPath(),Object(p.drawPoints)(e,r.top,r.out,r.outbot,r.bot,r.top),e.fill(),e.beginPath(),Object(p.drawPoints)(e,r.top,r.out,r.outbot,r.bot),e.stroke()}}}]),PantiesPart}(),b=function(t){function Underwear(){var t;_classCallCheck(this,Underwear);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Underwear)).call.apply(t,[this,{clothingLayer:l.a.Layer.BASE}].concat(r)))}return _inherits(Underwear,l["b"]),Underwear}(),d=function(t){function Bra(){var t;_classCallCheck(this,Bra);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Bra)).call.apply(t,[this].concat(r)))}return _inherits(Bra,b),_createClass(Bra,[{key:"fill",value:function fill(){return"hsl(0,50%,50%)"}},{key:"partPrototypes",get:function get(){return[{side:null,Part:a},{side:null,Part:s}]}}]),Bra}(),g=function(t){function BreastWrap(){var t,e;_classCallCheck(this,BreastWrap);for(var r=arguments.length,n=new Array(r),o=0;o<r;o++)n[o]=arguments[o];return(e=_possibleConstructorReturn(this,(t=_getPrototypeOf(BreastWrap)).call.apply(t,[this,{chestCoverage:.6,thickness:.5,wrapSize:30}].concat(n)))).fill=Object(i.e)("bandages",e.wrapSize),e}return _inherits(BreastWrap,b),_createClass(BreastWrap,[{key:"partPrototypes",get:function get(){return[{side:null,Part:c},{side:null,Part:h}]}}]),BreastWrap}(),P=function(t){function Panties(){var t;_classCallCheck(this,Panties);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Panties)).call.apply(t,[this].concat(r)))}return _inherits(Panties,b),_createClass(Panties,[{key:"fill",value:function fill(){return"hsl(0,50%,50%)"}},{key:"partPrototypes",get:function get(){return[{side:null,Part:y}]}}]),Panties}()},function(t,e,r){"use strict";r.d(e,"a",function(){return n});var n={human:{}}},function(t,e,r){"use strict";r.d(e,"b",function(){return c}),r.d(e,"d",function(){return u}),r.d(e,"c",function(){return f}),r.d(e,"e",function(){return p}),r.d(e,"a",function(){return h}),r.d(e,"f",function(){return y});var n=r(16),o=r(1),l=r(0),i=r(6);function _toConsumableArray(t){return function _arrayWithoutHoles(t){if(Array.isArray(t)){for(var e=0,r=new Array(t.length);e<t.length;e++)r[e]=t[e];return r}}(t)||function _iterableToArray(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var a=function(t){function Outline(){var t;_classCallCheck(this,Outline);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Outline)).call.apply(t,[this].concat(r)))}return _inherits(Outline,n["a"]),_createClass(Outline,[{key:"stroke",value:function stroke(t,e){return i.g.call(this,t,e)}},{key:"fill",value:function fill(){return l.none}}]),Outline}(),s=function(t){function MuscleOutline(){var t;_classCallCheck(this,MuscleOutline);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(MuscleOutline)).call.apply(t,[this].concat(r)))}return _inherits(MuscleOutline,a),_createClass(MuscleOutline,[{key:"getLineWidth",value:function getLineWidth(t){return Object(l.clamp)(.05*(t.getDim(this.muscleGroup)-10),0,1.2)}}]),MuscleOutline}(),c=function(t){function BellyButtonOutline(){var t;_classCallCheck(this,BellyButtonOutline);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(BellyButtonOutline)).call.apply(t,[this,{loc:"+torso",aboveParts:["parts torso"],belowParts:["clothingParts leg"],layer:o.a.FRONT}].concat(r)))}return _inherits(BellyButtonOutline,a),_createClass(BellyButtonOutline,[{key:"getLineWidth",value:function getLineWidth(){return 1}},{key:"calcDrawPoints",value:function calcDrawPoints(t,e,r){if(r){var n=t.bellybutton={};n.top={x:0,y:.45*t.waist.y+.55*t.hip.y},n.bot={x:n.top.x,y:n.top.y-1},n.bot.cp1=Object(l.simpleQuadratic)(n.top,n.bot,.5,.5)}return[t.bellybutton.top,t.bellybutton.bot]}}]),BellyButtonOutline}(),u=function(t){function DeltoidsOutline(){var t;_classCallCheck(this,DeltoidsOutline);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(DeltoidsOutline)).call.apply(t,[this,{loc:"+arm",aboveParts:["parts arm"],layer:o.a.FRONT,muscleGroup:"upperMuscle"}].concat(r)))}return _inherits(DeltoidsOutline,s),_createClass(DeltoidsOutline,[{key:"calcDrawPoints",value:function calcDrawPoints(t,e,r){if(this.upperMuscle<20||!1===t.hasOwnProperty("deltoids"))return[];if(r){var n=this.upperMuscle-10,o=t.deltoids;o.top={x:t.armpit.x,y:t.armpit.y+2},o.bot={x:o.x-5,y:o.y},o.bot.cp1=Object(l.simpleQuadratic)(o.top,o.bot,.7,.1*-n)}return[t.deltoids.top,t.deltoids.bot]}}]),DeltoidsOutline}(),f=function(t){function CollarboneOutline(){var t;_classCallCheck(this,CollarboneOutline);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(CollarboneOutline)).call.apply(t,[this,{loc:"+torso",layer:o.a.FRONT,reflect:!0,muscleGroup:"upperMuscle"}].concat(r)))}return _inherits(CollarboneOutline,s),_createClass(CollarboneOutline,[{key:"calcDrawPoints",value:function calcDrawPoints(t,e,r){if(this.upperMuscle<20||!1===t.hasOwnProperty("collarbone"))return[];if(r){var n=t.collarbone;n.out={x:n.x-.5,y:n.y-2},n.in={x:2,y:n.out.y-2},n.in.cp1={x:n.out.x-5,y:n.out.y},n.in.cp2={x:n.in.x+1,y:n.in.y+2}}return[t.collarbone.out,t.collarbone.in]}}]),CollarboneOutline}(),p=function(t){function PectoralOutline(){var t;_classCallCheck(this,PectoralOutline);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(PectoralOutline)).call.apply(t,[this,{loc:"+torso",aboveParts:["parts torso"],belowParts:["parts chest","decorativeParts chest"],layer:o.a.FRONT,reflect:!0,muscleGroup:"upperMuscle"}].concat(r)))}return _inherits(PectoralOutline,s),_createClass(PectoralOutline,[{key:"calcDrawPoints",value:function calcDrawPoints(t,e,r){if(this.upperMuscle<20)return[];if(r){var n=this.upperMuscle-20,o=t.pecs={};o.outtop={x:t.armpit.x,y:t.armpit.y+4},o.outbot={x:o.outtop.x-3,y:o.outtop.y-9},o.inbot={x:2,y:o.outbot.y+.5},o.intop={x:.5,y:o.inbot.y+1+.3*n},o.outbot.cp1={x:o.outtop.x,y:o.outtop.y-3},o.outbot.cp2={x:o.outbot.x+1,y:o.outbot.y+1},o.inbot.cp1={x:o.outbot.x-.5,y:o.outbot.y-1},o.inbot.cp2={x:o.inbot.x+.5,y:o.inbot.y-1},o.intop.cp1={x:o.inbot.x-.1*n,y:o.inbot.y+.05*n},o.intop.cp2={x:o.intop.x,y:o.intop.y-.1*n}}return[t.pecs.outtop,t.pecs.outbot,t.pecs.inbot,t.pecs.intop]}}]),PectoralOutline}(),h=function(t){function AbdominalOutline(){var t;_classCallCheck(this,AbdominalOutline);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(AbdominalOutline)).call.apply(t,[this,{loc:"+torso",aboveParts:["parts torso"],layer:o.a.FRONT,reflect:!0,muscleGroup:"upperMuscle"}].concat(r)))}return _inherits(AbdominalOutline,s),_createClass(AbdominalOutline,[{key:"calcDrawPoints",value:function calcDrawPoints(t,e,r){if(this.upperMuscle<15)return[];var n=this.upperMuscle-20;if(r){var o=.12*(.75*(this.height-this.legLength)),i=.05*n,a=t.abs={};if(a.top={x:t.waist.x-3,y:t.armpit.y-7},a.first={x:a.top.x-1,y:a.top.y-o},a.first.cp1=Object(l.simpleQuadratic)(a.top,a.first,.5,i),a.second={x:a.first.x-.4,y:a.first.y-o},a.second.cp1=Object(l.simpleQuadratic)(a.first,a.second,.5,i),a.bot={x:a.second.x-.3,y:a.second.y-o},a.bot.cp1=Object(l.simpleQuadratic)(a.second,a.bot,.5,i),5<n){a.top.out={x:a.top.x-1.7,y:a.top.y},a.top.in={x:.9,y:a.top.y+.5},a.top.in.cp1=Object(l.simpleQuadratic)(a.top,a.top.in,.5,-i),a.first.out={x:a.first.x-1.7,y:a.first.y},a.first.in={x:1.5,y:a.first.y},a.first.in.cp1=Object(l.simpleQuadratic)(a.first,a.first.in,.5,i),a.second.out={x:a.second.x-1.7,y:a.second.y},a.second.in={x:1.2,y:a.second.y},a.second.in.cp1=Object(l.simpleQuadratic)(a.second,a.second.in,.5,i),a.bot.in={x:.6,y:a.bot.y},a.bot.in.cp1=Object(l.simpleQuadratic)(a.bot,a.bot.in,.5,i);var s=t.lat;s.top={x:s.x-1.5,y:s.y},s.bot={x:a.top.x+1,y:.5*a.top.y+.5*a.first.y},s.bot.cp1=Object(l.simpleQuadratic)(s.top,s.bot,.5,1.5*i)}}var c=[t.abs.top,t.abs.first,t.abs.second,t.abs.bot];return 5<n&&(c=_toConsumableArray(c).concat([l.breakPoint,t.abs.top.out,t.abs.top.in,l.breakPoint,t.abs.first.out,t.abs.first.in,l.breakPoint,t.abs.second.out,t.abs.second.in,l.breakPoint,t.lat.top,t.lat.bot])),c}}]),AbdominalOutline}(),y=function(t){function QuadricepsOutline(){var t;_classCallCheck(this,QuadricepsOutline);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(QuadricepsOutline)).call.apply(t,[this,{loc:"+leg",aboveParts:["parts leg"],belowParts:["clothingParts leg","clothingParts feet"],layer:o.a.FRONT,muscleGroup:"lowerMuscle"}].concat(r)))}return _inherits(QuadricepsOutline,s),_createClass(QuadricepsOutline,[{key:"fill",value:function fill(t,e){return i.f.call(this,t,e)}},{key:"clipFill",value:function clipFill(){}},{key:"calcDrawPoints",value:function calcDrawPoints(t,e,r){if(this.lowerMuscle<20||!1===t.hasOwnProperty("thigh"))return[];if(r){var n=this.lowerMuscle-10,o=t.quads={};o.top={x:.1*t.thigh.in.x+.9*t.thigh.out.x,y:t.thigh.out.y};var i=Object(l.splitCurve)(.95,t.thigh.out,t.knee.out);o.out=i.right.p1,o.out.cp1=Object(l.simpleQuadratic)(o.top,o.out,.55,.25*n),o.in={x:.65*t.thigh.in.x+.35*t.thigh.out.x,y:t.thigh.in.y+3.5},o.bot={x:t.knee.out.x-6-.05*n,y:t.knee.intop.y+2},o.bot.cp1=Object(l.simpleQuadratic)(o.in,o.bot,.7,.1*-n)}return[t.quads.top,t.quads.out,l.breakPoint,t.quads.in,t.quads.bot]}}]),QuadricepsOutline}()},function(t,e,r){"use strict";r.d(e,"c",function(){return s}),r.d(e,"b",function(){return n}),r.d(e,"a",function(){return loadMods});var i=r(14),a=r(17),s={armRotation:{linkedPart:"arm",units:"degree",low:-40,high:40,avg:0,stdev:0,bias:0},arousal:{units:"arbitrary",low:0,high:100,avg:10,stdev:5,bias:0},breastPerkiness:{linkedPart:"chest",desc:"counter sagging effect when breasts grow too large",units:"arbitrary",low:-10,high:20,avg:0,stdev:2,bias:0},browBotCurl:{linkedPart:"brow",desc:"How much the bottom of the eyebrow curls up or down; 0 is flat",units:"mm",low:-10,high:15,avg:3,stdev:2,bias:3},browTopCurl:{linkedPart:"brow",desc:"How much the top of the eyebrow curls up or down; 0 is flat",units:"mm",low:-10,high:15,avg:8,stdev:2,bias:1},browCloseness:{linkedPart:"brow",units:"mm",low:-10,high:10,avg:0,stdev:2,bias:0},browHeight:{linkedPart:"brow",units:"mm",low:-10,high:10,avg:0,stdev:2,bias:0},browLength:{linkedPart:"brow",units:"mm",low:-10,high:10,avg:0,stdev:2,bias:0},browSharpness:{linkedPart:"brow",units:"arbitrary",low:-10,high:10,avg:0,stdev:2,bias:0},browThickness:{linkedPart:"brow",units:"mm",low:-10,high:10,avg:0,stdev:1,bias:-1.5},browOutBias:{linkedPart:"brow",desc:"Whether the top of the outer brow ends inside or outside the bottom",units:"mm",low:-10,high:10,avg:-1,stdev:2,bias:0},browTilt:{linkedPart:"brow",units:"degree",low:-20,high:20,avg:5,stdev:4,bias:0},cheekFullness:{linkedPart:"head",units:"arbitrary",low:-20,high:20,avg:0,stdev:3,bias:0},chinLength:{linkedPart:"head",units:"mm",low:-30,high:30,avg:0,stdev:3,bias:0},earlobeLength:{linkedPart:"ears",low:-2,high:4,avg:0,stdev:.2,bias:0},eyeBias:{linkedPart:"eyes",desc:"Whether the eyes bias towards the inside or outside",units:"arbitrary",low:-10,high:10,avg:1,stdev:2,bias:0},eyeCloseness:{linkedPart:"eyes",units:"mm",low:-100,high:100,avg:0,stdev:5,bias:0},eyeBotBias:{linkedPart:"eyes",desc:"Whether the eye bottom bias towards the inside or outside",units:"arbitrary",low:-10,high:10,avg:0,stdev:2,bias:0},eyeBotSize:{linkedPart:"eyes",desc:"How much does the bottom of the eyes dip",units:"mm",low:-20,high:20,avg:0,stdev:0,bias:1},eyeHeight:{linkedPart:"eyes",units:"mm",low:-15,high:10,avg:-3,stdev:2,bias:0},eyeTilt:{linkedPart:"eyes",units:"degree",low:-20,high:30,avg:2,stdev:4,bias:0},eyeTopSize:{linkedPart:"eyes",desc:"How much does the top of the eyes curve",units:"mm",low:-10,high:8,avg:0,stdev:.5,bias:0},eyeWidth:{linkedPart:"eyes",units:"mm",low:-10,high:10,avg:0,stdev:2,bias:0},eyelashBias:{linkedPart:"eyelash",desc:"Whether the eyelashes bias towards the inside or outside",units:"arbitrary",low:-10,high:20,avg:5,stdev:1,bias:0},eyelashAngle:{linkedPart:"eyelash",desc:"Whether the eyelash points down or up",units:"arbitrary",low:-1,high:1,avg:.9,stdev:0,bias:0},eyelidBias:{linkedPart:"eyelid",desc:"Whether the eyelids bias towards the inside or outside",units:"arbitrary",low:-10,high:10,avg:1,stdev:2,bias:0},eyelidHeight:{linkedPart:"eyelid",units:"mm",low:-6,high:12,avg:0,stdev:2,bias:0},feetBias:{linkedPart:"feet",desc:"Relative importance of inner toes vs outer toes",units:"arbitrary",low:-10,high:20,avg:0,stdev:2,bias:0},feetLength:{linkedPart:"feet",units:"mm",low:-10,high:40,avg:0,stdev:2,bias:0},feetWidth:{linkedPart:"feet",units:"mm",low:-20,high:12,avg:0,stdev:2,bias:0},hairAccessoryHue:{linkedPart:"hair",units:"degree",low:0,high:360,avg:360,stdev:50,bias:0},hairAccessorySaturation:{linkedPart:"hair",units:"%",low:0,high:100,avg:80,stdev:5,bias:0},hairAccessoryLightness:{linkedPart:"hair",units:"%",low:0,high:100,avg:50,stdev:10,bias:0},handRotation:{linkedPart:"hand",units:"degree",low:-40,high:40,avg:0,stdev:0,bias:0},irisHeight:{linkedPart:"iris",units:"mm",low:-10,high:10,avg:0,stdev:1,bias:0},irisHue:{linkedPart:"iris",units:"degree",low:0,high:360,avg:30,stdev:30,bias:0},irisSaturation:{linkedPart:"iris",units:"%",low:0,high:100,avg:50,stdev:10,bias:0},irisLightness:{linkedPart:"iris",units:"%",low:0,high:100,avg:20,stdev:10,bias:0},irisSize:{linkedPart:"iris",desc:"Diameter of the iris",units:"mm",low:0,high:50,avg:16,stdev:1.5,bias:0},jawJut:{linkedPart:"head",units:"mm",low:-10,high:10,avg:0,stdev:.5,bias:0},limbalRingSize:{linkedPart:"iris",desc:"Width of the limbal ring (dark ring surrounding iris)",units:"um",low:0,high:100,avg:20,stdev:5,bias:0},lipBias:{linkedPart:"lips",desc:"Whether the top lip sits above the bottom lip or vise versa",units:"arbitrary",low:-50,high:50,avg:10,stdev:10,bias:0},lipCupidsBow:{linkedPart:"lips",units:"mm",low:-100,high:30,avg:0,stdev:20,bias:0},lipCurl:{linkedPart:"lips",units:"arbitrary",low:-20,high:20,avg:0,stdev:5,bias:0},lipHeight:{linkedPart:"lips",units:"mm",low:-10,high:10,avg:0,stdev:1.2,bias:0},lipTopCurve:{linkedPart:"lips",units:"arbitrary",low:-50,high:50,avg:0,stdev:10,bias:0},lipTopSize:{linkedPart:"lips",units:"um",low:-20,high:60,avg:8,stdev:4,bias:0},lipBotSize:{linkedPart:"lips",units:"mm",low:-80,high:100,avg:30,stdev:10,bias:3},lipParting:{linkedPart:"lips",units:"um",low:0,high:100,avg:0,stdev:0,bias:0},lipWidth:{linkedPart:"lips",units:"mm",low:-250,high:100,avg:0,stdev:30,bias:-70},neckCurve:{linkedPart:"neck",units:"mm",low:-20,high:10,avg:-5,stdev:3,bias:-2},noseHeight:{linkedPart:"nose",units:"mm",low:-10,high:10,avg:0,stdev:4,bias:0},noseLength:{linkedPart:"nose",units:"mm",low:0,high:70,avg:45,stdev:3,bias:0},noseRidgeHeight:{linkedPart:"nose",units:"mm",low:-10,high:10,avg:0,stdev:2,bias:0},noseRoundness:{linkedPart:"nose",units:"arbitrary",low:-6,high:10,avg:0,stdev:2,bias:0},noseWidth:{linkedPart:"nose",units:"mm",low:10,high:30,avg:18,stdev:2,bias:-1},nostrilSize:{linkedPart:"nose",units:"mm",low:5,high:30,avg:10,stdev:2,bias:0},pupilSize:{linkedPart:"pupil",desc:"Diameter of the pupil",units:"mm",low:0,high:20,avg:10,stdev:.5,bias:0},labiaFullness:{linkedPart:"genitals",desc:"How puffy the labia is",units:"arbitrary",low:-10,high:10,avg:0,stdev:1,bias:1},penisThickness:{linkedPart:"genitals",units:"um",low:-30,high:30,avg:0,stdev:4,bias:-4},shoeHeight:{units:"mm",low:0,high:300,avg:0,stdev:0,bias:0},skinHue:{units:"degree",low:-20,high:20,avg:0,stdev:2,bias:0},skinSaturation:{units:"%",low:-20,high:20,avg:0,stdev:2,bias:0},skinLightness:{units:"%",low:-20,high:20,avg:0,stdev:2,bias:0}},n={};function loadMods(){for(var t in i.b)if(i.b.hasOwnProperty(t)&&!s.hasOwnProperty(t)){var e=i.b[t].high-i.b[t].low;s[t]={low:-1e9,high:1e9,avg:0,stdev:.01*e,bias:0}}var r=a.a.human;for(var n in r)if(r.hasOwnProperty(n)&&!s.hasOwnProperty(n)){var o=r[n].high-r[n].low;s[n]={low:-1e9,high:1e9,avg:0,stdev:.01*o,bias:0}}}},function(t,e,r){"use strict";r.d(e,"g",function(){return i}),r.d(e,"i",function(){return calcSweaterBase}),r.d(e,"b",function(){return a}),r.d(e,"c",function(){return s}),r.d(e,"h",function(){return calcLongSleeve}),r.d(e,"e",function(){return c}),r.d(e,"f",function(){return l}),r.d(e,"d",function(){return u}),r.d(e,"a",function(){return y});var f=r(3),n=r(2),p=r(12),o=r(1),h=(r(6),r(0));function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var i=function(t){function SweaterBasePart(){var t;_classCallCheck(this,SweaterBasePart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(SweaterBasePart)).call.apply(t,[this,{layer:o.a.FRONT,loc:"torso",reflect:!0,aboveParts:["parts neck","parts torso","decorativeParts torso"],aboveSameLayerParts:["groin"]}].concat(r)))}return _inherits(SweaterBasePart,f["c"]),_createClass(SweaterBasePart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){var r=calcSweaterBase.call(this,t),n=r.top,o=r.out,i=r.cusp,a=r.collarbone,s=r.waist,c=r.bot;f.a.simpleStrokeFill(e,t,this),e.beginPath(),Object(h.drawPoints)(e,n,o,i,a,t.armpit,t.lat,s,c.out,c.bot),e.fill(),e.beginPath(),Object(h.drawPoints)(e,n,o,i,a,h.breakPoint,t.armpit,t.lat,s,c.out,c.bot),e.stroke()}}]),SweaterBasePart}();function calcSweaterBase(t){var e=Object(h.splitCurve)(1-this.neckCoverage,t.neck.top,t.neck.cusp),r=e.left.p2,n={x:0,y:r.y-2};r.cp1={x:.5*n.x+.5*r.x,y:n.y};var o=Object(h.extractPoint)(t.trapezius);o.cp1={x:r.x+2*this.neckCoverage,y:r.y-1},o.cp2={x:o.x,y:o.y+3*this.neckCoverage},e=Object(h.splitCurve)(this.stomachCoverage,t.waist,t.hip);var i={};return i.out=e.left.p2,i.out.x+=.4*this.thickness,i.bot=Object(h.extractPoint)(t.pelvis),i.bot.y+=i.out.y-t.hip.y,i.bot.cp1={x:.5*i.bot.x+.5*i.out.x,y:i.bot.y},{top:n,out:r,cusp:o,collarbone:Object(h.clone)(t.collarbone),waist:Object(h.adjust)(t.waist,.8*this.thickness,0),bot:i}}var a=function(t){function CoveredBreastPart(){var t;_classCallCheck(this,CoveredBreastPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(CoveredBreastPart)).call.apply(t,[this,{layer:o.a.GENITALS,loc:"chest",reflect:!0,aboveParts:["parts chest","decorativeParts chest"]}].concat(r)))}return _inherits(CoveredBreastPart,f["c"]),_createClass(CoveredBreastPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){if(!Object(p.b)(t,e,this)){var r=Object(h.adjust)(t.breast.top,0,0),n=Object(h.adjust)(t.breast.tip,.1,0),o=Object(h.adjust)(t.breast.bot,0,-.1),i=Object(h.adjust)(t.breast.in,0,0),a=Object(h.adjust)(t.breast.cleavage,-.1,0),s=Object(h.adjust)(Object(p.a)(a,r),0,.2);f.a.simpleStrokeFill(e,t,this),e.beginPath(),Object(h.drawPoints)(e,r,n,o,i,a,s),e.fill(),e.beginPath(),Object(h.drawPoints)(e,r,n,o,i),e.stroke()}}}]),CoveredBreastPart}(),s=function(t){function LongSleevePart(){var t;_classCallCheck(this,LongSleevePart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(LongSleevePart)).call.apply(t,[this,{layer:o.a.ARMS,loc:"arm",aboveParts:["parts arm","decorativeParts arm","parts hand"]},{sleeveLength:1}].concat(r)))}return _inherits(LongSleevePart,f["c"]),_createClass(LongSleevePart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){var r=calcLongSleeve.call(this,t),n=r.collarbone,o=r.deltoids,i=r.shoulder,a=r.elbowOut,s=r.out,c=r.bot,l=r.elbow,u=r.armpit;f.a.simpleStrokeFill(e,t,this),e.beginPath(),Object(h.drawPoints)(e,n,o,i,a,s,c,l,u,Object(p.a)(u,n)),e.fill(),e.beginPath(),Object(h.drawPoints)(e,n,o,i,a,s,c,l,u),e.stroke()}}]),LongSleevePart}();function calcLongSleeve(t){var e=Object(h.splitCurve)(this.sleeveLength,t.elbow.out,t.wrist.out),r=e.left.p2;r.cp1&&r.cp2&&(r.cp1.x+=.5*this.thickness,r.cp2.x+=.3*this.thickness);var n=(e=Object(h.splitCurve)(.9*(1-this.sleeveLength),t.wrist.in,t.elbow.in)).left.p2,o=e.right.p2;o=Object(h.adjust)(o,.4*-this.thickness,0);var i=Object(h.extractPoint)(t.collarbone);i.x-=.2;var a=Object(h.adjust)(t.shoulder,.5*this.thickness,0),s=Object(h.adjust)(t.elbow.out,.5*this.thickness,0);n.cp1=Object(h.simpleQuadratic)(r,n,.5,1);var c=Object(h.adjust)(t.armpit,-.2,0);return{collarbone:i,deltoids:t.deltoids,shoulder:a,elbowOut:s,out:r,bot:n,elbow:o,armpit:c}}var c=function(t){function ShortSleevePart(){var t;_classCallCheck(this,ShortSleevePart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(ShortSleevePart)).call.apply(t,[this,{layer:o.a.ARMS,loc:"arm",aboveParts:["parts arm","decorativeParts arm"]}].concat(r)))}return _inherits(ShortSleevePart,f["c"]),_createClass(ShortSleevePart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){var r=Object(h.splitCurve)(1-this.sleeveLength,t.shoulder,t.elbow.out),n=r.left.p2,o=(r=Object(h.splitCurve)(.9*(1-this.sleeveLength),t.elbow.in,t.armpit)).left.p2,i=r.right.p2;i=Object(h.adjust)(i,-.1,0);var a=calcSweaterBase.call(this,t).collarbone;a.x-=.1;var s=Object(h.adjust)(t.shoulder,.5*this.thickness,0);o.cp1=Object(h.simpleQuadratic)(n,o,.5,1),f.a.simpleStrokeFill(e,t,this),e.beginPath(),Object(h.drawPoints)(e,a,t.deltoids,s,n,o,i,Object(p.a)(i,a)),e.fill(),e.beginPath(),Object(h.drawPoints)(e,a,t.deltoids,s,n,o,i),e.stroke()}}]),ShortSleevePart}(),l=function(t){function Sweater(){var t;_classCallCheck(this,Sweater);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Sweater)).call.apply(t,[this,{clothingLayer:f.a.Layer.MID,stomachCoverage:.8,neckCoverage:.5,sleeveLength:.8}].concat(r)))}return _inherits(Sweater,f["b"]),Sweater}(),u=function(t){function LongSleevedSweater(){var t;_classCallCheck(this,LongSleevedSweater);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(LongSleevedSweater)).call.apply(t,[this,{stomachCoverage:.7,neckCoverage:.5,sleeveLength:1}].concat(r)))}return _inherits(LongSleevedSweater,l),_createClass(LongSleevedSweater,[{key:"stroke",value:function stroke(){return"#000"}},{key:"fill",value:function fill(){return"hsl(0,10%,20%)"}},{key:"partPrototypes",get:function get(){return[{side:null,Part:i},{side:null,Part:a},{side:n.b.LEFT,Part:s},{side:n.b.RIGHT,Part:s}]}}]),LongSleevedSweater}(),y=function(t){function AsymmetricSleevedSweater(){var t;_classCallCheck(this,AsymmetricSleevedSweater);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(AsymmetricSleevedSweater)).call.apply(t,[this,{stomachCoverage:.7,neckCoverage:.5,sleeveLength:1}].concat(r)))}return _inherits(AsymmetricSleevedSweater,l),_createClass(AsymmetricSleevedSweater,[{key:"stroke",value:function stroke(){return"#000"}},{key:"fill",value:function fill(){return"hsl(0,10%,20%)"}},{key:"partPrototypes",get:function get(){return[{side:null,Part:i},{side:null,Part:a},{side:n.b.LEFT,Part:c},{side:n.b.RIGHT,Part:s}]}}]),AsymmetricSleevedSweater}()},function(t,e,r){"use strict";r.d(e,"h",function(){return i}),r.d(e,"e",function(){return a}),r.d(e,"c",function(){return s}),r.d(e,"a",function(){return c}),r.d(e,"j",function(){return f}),r.d(e,"i",function(){return p}),r.d(e,"g",function(){return h}),r.d(e,"f",function(){return y}),r.d(e,"d",function(){return b}),r.d(e,"b",function(){return d}),r.d(e,"k",function(){return g});var l=r(3),n=r(2),o=r(1),u=r(0);function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var i=function(t){function SockPart(){var t;_classCallCheck(this,SockPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(SockPart)).call.apply(t,[this,{layer:o.a.FRONT,loc:"feet",aboveParts:["parts feet","parts leg"]}].concat(r)))}return _inherits(SockPart,l["c"]),SockPart}(),a=function(t){function ShortSockPart(){var t;_classCallCheck(this,ShortSockPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(ShortSockPart)).call.apply(t,[this].concat(r)))}return _inherits(ShortSockPart,i),_createClass(ShortSockPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){var r=Object(u.extractPoint)(t.ankle.out),n=t.ankle.outbot,o=t.toe.out,i=t.toe.in,a=t.ankle.inbot,s=t.ankle.in;r.cp1=Object(u.simpleQuadratic)(s,r,.5,-3),l.a.simpleStrokeFill(e,t,this),e.beginPath(),Object(u.drawPoints)(e,r,n,o,i,a,s,r),e.fill(),e.stroke()}}]),ShortSockPart}(),s=function(t){function MediumSockPart(){var t;_classCallCheck(this,MediumSockPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(MediumSockPart)).call.apply(t,[this].concat(r)))}return _inherits(MediumSockPart,i),_createClass(MediumSockPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){var r=1-this.length;.75<this.length&&(r+=.3*(this.length-.75));var n=Object(u.splitCurve)(r,t.calf.out,t.ankle.out),o=n.left.p2,i=n.right.p2,a=(n=Object(u.splitCurve)(this.length,t.ankle.in,t.calf.in)).left.p2;o.cp1=Object(u.simpleQuadratic)(a,o,.5,-2.5+this.length),l.a.simpleStrokeFill(e,t,this),e.beginPath(),Object(u.drawPoints)(e,o,i,t.ankle.outbot,t.toe.out,t.toe.in,t.ankle.inbot,t.ankle.in,a,o),e.fill(),e.stroke()}}]),MediumSockPart}(),c=function(t){function LongSockPart(){var t;_classCallCheck(this,LongSockPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(LongSockPart)).call.apply(t,[this].concat(r)))}return _inherits(LongSockPart,i),_createClass(LongSockPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){var r=1-this.length,n=Object(u.splitCurve)(r,t.knee.out,t.calf.out),o=n.left.p2,i=n.right.p2,a=this.length;this.length<.7&&(a+=.3*(.7-this.length));var s=(n=Object(u.splitCurve)(a,t.calf.in,t.knee.in)).left.p2;o.cp1=Object(u.simpleQuadratic)(s,o,.5,-2.5+this.length),l.a.simpleStrokeFill(e,t,this),e.beginPath(),Object(u.drawPoints)(e,o,i,t.ankle.out,t.ankle.outbot,t.toe.out,t.toe.in,t.ankle.inbot,t.ankle.in,t.calf.in,s,o),e.fill(),e.stroke()}}]),LongSockPart}(),f=function(t){function ThighHighPart(){var t;_classCallCheck(this,ThighHighPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(ThighHighPart)).call.apply(t,[this].concat(r)))}return _inherits(ThighHighPart,i),_createClass(ThighHighPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){var r=.5-.5*this.length,n=Object(u.splitCurve)(r,t.thigh.out,t.knee.out),o=n.left.p2,i=n.right.p2,a=.5*this.length,s=(n=Object(u.splitCurve)(a,t.thigh.in,t.thigh.top)).left.p2;o.cp1=Object(u.simpleQuadratic)(s,o,.5,2.5+this.length),l.a.simpleStrokeFill(e,t,this),e.beginPath(),Object(u.drawPoints)(e,o,i,t.calf.out,t.ankle.out,t.ankle.outbot,t.toe.out,t.toe.in,t.ankle.inbot,t.ankle.in,t.calf.in,t.knee.in,t.knee.intop,s),e.stroke(),Object(u.drawPoints)(e,null,o),e.fill()}}]),ThighHighPart}(),p=function(t){function ThighHighBandPart(){var t;_classCallCheck(this,ThighHighBandPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(ThighHighBandPart)).call.apply(t,[this,{aboveSameLayerParts:["feet"]}].concat(r)))}return _inherits(ThighHighBandPart,i),_createClass(ThighHighBandPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){var r=.5-.5*this.length-.03*this.bandWidth,n=Object(u.splitCurve)(r,t.thigh.out,t.knee.out),o=n.left.p2,i=(n=Object(u.splitCurve)(.1*this.bandWidth,o,t.knee.out)).left.p2,a=.5*this.length+.03*this.bandWidth,s=(n=Object(u.splitCurve)(a,t.thigh.in,t.thigh.top)).left.p2,c=(n=Object(u.splitCurve)(.2*this.bandWidth,t.thigh.in,s)).left.p2;s.cp1=n.right.p2.cp1,s.cp2=n.right.p2.cp2,c.cp1=Object(u.simpleQuadratic)(i,c,.5,-2.5-this.length),o.cp1=Object(u.simpleQuadratic)(s,o,.5,2.5+this.length),l.a.simpleStrokeFill(e,t,{stroke:this.bandPattern,fill:this.bandPattern}),e.beginPath(),Object(u.drawPoints)(e,o,i,c,s,o),e.fill(),e.stroke()}}]),ThighHighBandPart}(),h=function(t){function Sock(){var t;_classCallCheck(this,Sock);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Sock)).call.apply(t,[this,{clothingLayer:l.a.Layer.BASE,length:.5,thickness:1,stroke:"#b1a693"}].concat(r)))}return _inherits(Sock,l["b"]),Sock}(),y=function(t){function ShortSocks(){var t;_classCallCheck(this,ShortSocks);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(ShortSocks)).call.apply(t,[this].concat(r)))}return _inherits(ShortSocks,h),_createClass(ShortSocks,[{key:"partPrototypes",get:function get(){return[{side:n.b.LEFT,Part:a},{side:n.b.RIGHT,Part:a}]}}]),ShortSocks}(),b=function(t){function MediumSocks(){var t;_classCallCheck(this,MediumSocks);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(MediumSocks)).call.apply(t,[this].concat(r)))}return _inherits(MediumSocks,h),_createClass(MediumSocks,[{key:"partPrototypes",get:function get(){return[{side:n.b.LEFT,Part:s},{side:n.b.RIGHT,Part:s}]}}]),MediumSocks}(),d=function(t){function LongSocks(){var t;_classCallCheck(this,LongSocks);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(LongSocks)).call.apply(t,[this].concat(r)))}return _inherits(LongSocks,h),_createClass(LongSocks,[{key:"partPrototypes",get:function get(){return[{side:n.b.LEFT,Part:c},{side:n.b.RIGHT,Part:c}]}}]),LongSocks}(),g=function(t){function ThighHighs(){var t;_classCallCheck(this,ThighHighs);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(ThighHighs)).call.apply(t,[this,{bandWidth:2,bandPattern:"#000"}].concat(r)))}return _inherits(ThighHighs,h),_createClass(ThighHighs,[{key:"partPrototypes",get:function get(){return[{side:n.b.LEFT,Part:f},{side:n.b.RIGHT,Part:f},{side:n.b.RIGHT,Part:p}]}}]),ThighHighs}()},function(t,e,r){"use strict";r.d(e,"d",function(){return i}),r.d(e,"c",function(){return a}),r.d(e,"h",function(){return calcDressCleavage}),r.d(e,"a",function(){return s}),r.d(e,"g",function(){return c}),r.d(e,"e",function(){return l}),r.d(e,"b",function(){return u}),r.d(e,"f",function(){return h});var f=r(3),n=r(2),p=r(12),o=r(1),v=r(0),_=r(4);function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _toConsumableArray(t){return function _arrayWithoutHoles(t){if(Array.isArray(t)){for(var e=0,r=new Array(t.length);e<t.length;e++)r[e]=t[e];return r}}(t)||function _iterableToArray(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var i=function(t){function DressBreastPart(){var t;_classCallCheck(this,DressBreastPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(DressBreastPart)).call.apply(t,[this,{layer:o.a.GENITALS,loc:"chest",reflect:!0,aboveParts:["parts chest","decorativeParts chest"]},{}].concat(r)))}return _inherits(DressBreastPart,f["c"]),_createClass(DressBreastPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){f.a.simpleStrokeFill(e,t,this);var r=calcDressBase.call(this,t),n=r.cleavageBot,o=r.cleavageTop;if(e.beginPath(),Object(v.drawPoints)(e,{x:0,y:0},n,o,{x:100,y:250},{x:100,y:0}),e.clip(),!Object(p.b)(t,e,this)){var i=Object(v.adjust)(t.breast.top,.1,.2),a=Object(v.adjust)(t.breast.tip,.1,0),s=Object(v.adjust)(t.breast.bot,0,-.1),c=Object(v.adjust)(t.breast.in,-.4,0),l=Object(v.adjust)(t.breast.cleavage,-.1,0),u=Object(v.adjust)(Object(p.a)(l,i),0,.2);e.beginPath(),Object(v.drawPoints)(e,i,a,s,c,l,u),e.fill(),e.beginPath(),Object(v.drawPoints)(e,i,a,s),e.stroke(),e.beginPath(),Object(v.drawPoints)(e,n,o),e.stroke()}}}]),DressBreastPart}(),a=function(t){function DressBasePart(){var t;_classCallCheck(this,DressBasePart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(DressBasePart)).call.apply(t,[this,{layer:o.a.FRONT,loc:"torso",reflect:!0,aboveParts:["parts neck","parts torso","decorativeParts torso","parts leg","decorativeParts leg"],aboveSameLayerParts:["groin","leg"]},{cleavageOpeness:.3,cleavageCoverage:.3,sideLoose:0,legCoverage:.4,legLoose:0,curveCleavageX:0,curveCleavageY:0,bustle:!1}].concat(r)))}return _inherits(DressBasePart,f["c"]),_createClass(DressBasePart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){var r=calcDressBase.call(this,t),n=r.cleavageBot,o=r.cleavageTop,i=r.neck,a=(r.collarbone,r.armpit,r.waist,r.hip,r.outerPoints),s=r.shoulder,c=r.pit,l=r.bottom;f.a.simpleStrokeFill(e,t,this),e.beginPath(),v.drawPoints.apply(void 0,[e,n,o,i,s,c].concat(_toConsumableArray(a),[l])),e.fill(),e.beginPath(),v.drawPoints.apply(void 0,[e,n,o,i,s,v.breakPoint,c].concat(_toConsumableArray(a),[l])),e.stroke()}}]),DressBasePart}();function calcDressCleavage(t,e){var r,n,o;if(r={x:-.1,y:Object(v.splitCurve)(this.cleavageCoverage,t.neck.cusp,t.groin).left.p2.y},this.cleavageOpeness<0){var i=Object(v.splitCurve)(1+this.cleavageOpeness,t.neck.top,t.neck.cusp);n=Object(v.extractPoint)(i.left.p2),o=Object(v.clone)(t.neck.cusp)}else if(1<this.cleavageOpeness){var a=Object(v.splitCurve)(this.cleavageOpeness-1,t.collarbone,t.shoulder);n=Object(v.extractPoint)(a.left.p2)}else{var s=Object(v.splitCurve)(this.cleavageOpeness,t.neck.cusp,t.collarbone);n=Object(v.extractPoint)(s.left.p2)}!this.lacing&&e&&r.y<e.y&&(r.y=e.y+3);var c=Object(v.splitCurve)(.5,r,n);return n.cp1={x:c.left.p2.x+this.curveCleavageX,y:c.left.p2.y+this.curveCleavageY},{cleavageBot:r,cleavageTop:n,neck:o}}function calcDressBase(t){var e=Object(v.clone)(t.collarbone),r=Object(v.clone)(t.armpit),n=Object(v.clone)(t.collarbone),o=Object(v.clone)(t.armpit),i=Object(v.clone)(t.lat),a=Object(v.adjust)(t.hip,0,0),s=Object(v.adjust)(t.waist,0,0),c=o;i&&(c=i);var l,u=Object(_.g)(c,a,{x:0,y:s.y},{x:100,y:s.y});if(u.x>s.x&&(s.x=Object(_.a)(s.x,u.x,this.sideLoose),Object(_.i)(o,s,this.sideLoose),Object(_.i)(s,a,this.sideLoose)),this.legCoverage<0)l=Object(_.c)(o,a,1+this.legCoverage,o,i,s,a);else if(0==this.legCoverage)l=[o,i,s,a];else{var f,p=[o,i,s];if(0<this.legLoose){f=Object(_.c)(a,t.ankle.out,this.legCoverage,a,t.thigh.out);var h=a.y-(a.y-t.ankle.out.y)*this.legCoverage;h<t.groin.y&&((f=[])[f.length]=Object(v.clone)(a),f[f.length]=Object(v.clone)(t.thigh.out),this.bustle&&(f[f.length]=Object(v.extractPoint)(t.thigh.out)),f[f.length-1].y=h,f[f.length-1].x+=30*this.legLoose*this.legCoverage)}else f=Object(_.c)(a,t.ankle.out,this.legCoverage,a,t.thigh.out,t.knee.out,t.calf.out,t.ankle.out);l=p.concat(f)}var y={y:l[l.length-1].y,x:-.1},b=calcDressCleavage.call(this,t,y),d=b.cleavageBot,g=b.cleavageTop,P=b.neck;return l[l.length-1].y+=2,y.y+=-2,y.cp1={x:.5*y.x+.5*l[l.length-1].x,y:y.y},{cleavageBot:d,cleavageTop:g,neck:P,collarbone:n,armpit:o,waist:s,hip:a,outerPoints:l,shoulder:e,pit:r,bottom:y}}var s=function(t){function DetachedSleevePart(){var t;_classCallCheck(this,DetachedSleevePart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(DetachedSleevePart)).call.apply(t,[this,{layer:o.a.ARMS,loc:"arm",aboveParts:["parts arm","decorativeParts arm","parts hand"]},{shoulderCoverage:.5,armCoverage:.5,armLoose:0}].concat(r)))}return _inherits(DetachedSleevePart,f["c"]),_createClass(DetachedSleevePart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){if(!(this.armCoverage<=0)){var r=calcSuperSleeve.call(this,t),n=r.outerArmPoints,o=r.innerArmPoints;if(f.a.simpleStrokeFill(e,t,this),1<=this.shoulderCoverage){var i=Object(v.adjust)(t.collarbone,-.5,0),a=Object(v.adjust)(t.armpit,-.5,0);e.beginPath(),v.drawPoints.apply(void 0,[e].concat(_toConsumableArray(n),_toConsumableArray(o),[Object(p.a)(a,i)])),e.fill(),e.beginPath(),v.drawPoints.apply(void 0,[e].concat(_toConsumableArray(n),_toConsumableArray(o))),e.stroke()}else{var s=Object(v.splitCurve)(1-this.shoulderCoverage,t.collarbone,t.shoulder);n[0]=Object(v.extractPoint)(s.left.p2),n[1]=Object(v.extractPoint)(s.left.p2),n[2]=Object(v.extractPoint)(n[2]),e.beginPath(),v.drawPoints.apply(void 0,[e].concat(_toConsumableArray(n),_toConsumableArray(o),[n[0]])),e.fill(),e.stroke()}}}}]),DetachedSleevePart}(),c=function(t){function SuperSleevePart(){var t;_classCallCheck(this,SuperSleevePart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(SuperSleevePart)).call.apply(t,[this,{layer:o.a.ARMS,loc:"arm",aboveParts:["parts arm","decorativeParts arm","parts hand"]},{armCoverage:.5,armLoose:0}].concat(r)))}return _inherits(SuperSleevePart,f["c"]),_createClass(SuperSleevePart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){if(!(this.armCoverage<=0)){var r=calcSuperSleeve.call(this,t),n=r.outerArmPoints,o=r.innerArmPoints,i=Object(v.adjust)(t.collarbone,-.5,0),a=Object(v.adjust)(t.armpit,-.5,0);f.a.simpleStrokeFill(e,t,this),e.beginPath(),v.drawPoints.apply(void 0,[e].concat(_toConsumableArray(n),_toConsumableArray(o),[Object(p.a)(a,i)])),e.fill(),e.beginPath(),v.drawPoints.apply(void 0,[e].concat(_toConsumableArray(n),_toConsumableArray(o))),e.stroke()}}}]),SuperSleevePart}();function calcSuperSleeve(t){var e=[],r=[];if(0<this.armLoose){var n=Object(v.adjust)(t.wrist.in,0,0);n.y=t.hand.tip.y;var o=Object(v.adjust)(t.shoulder,5*this.armLoose*.75,0),i=Object(v.adjust)(t.deltoids,5*this.armLoose*1,0),a=Object(v.adjust)(t.hand.knuckle,5*this.armLoose*1.5,0),s=Object(v.adjust)(t.hand.tip,5*this.armLoose*1,0);e=Object(_.c)(t.collarbone,t.hand.palm,this.armCoverage,t.collarbone,i,o,a,s),(r=Object(_.c)(t.collarbone,t.hand.palm,this.armCoverage,t.armpit,n)).reverse(),void 0!==r[0]&&(r[0].x-=5*this.armLoose*1),void 0!==r[1]&&(r[1].x-=5*this.armLoose*1)}else(e=Object(_.c)(t.collarbone,t.hand.palm,this.armCoverage,t.collarbone,t.deltoids,t.shoulder,t.elbow.out,t.wrist.out,t.hand.knuckle,t.hand.fist,t.hand.tip))[e.length-1].y<=t.thumb.tip.y?(e[e.length]=t.hand.palm,(r=[t.armpit,t.elbow.in,t.wrist.in,t.thumb.out,t.thumb.tip]).reverse()):r=Object(_.d)(e[e.length-1],!0,t.armpit,t.elbow.in,t.wrist.in,t.thumb.out,t.thumb.tip);return this.armCoverage<1&&(r[0]=Object(v.extractPoint)(r[0])),{outerArmPoints:e,innerArmPoints:r}}var l=function(t){function LacingPart(){var t;_classCallCheck(this,LacingPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(LacingPart)).call.apply(t,[this,{layer:o.a.GENITALS,loc:"chest",reflect:!1,aboveParts:["parts chest","decorativeParts chest"]},{lacing:!1,crosses:0}].concat(r)))}return _inherits(LacingPart,f["c"]),_createClass(LacingPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){if(this.lacing){f.a.simpleStrokeFill(e,t,this);var r=calcDressCleavage.call(this,t),n=r.cleavageBot,o=r.cleavageTop,i=this.crosses;i<=0&&(i=13*this.cleavageCoverage);var a=Object(v.reflect)(o);a.cp1=Object(v.reflect)(o.cp1),a.cp2=Object(v.reflect)(o.cp2);var s=Object(_.b)(n,o,Object(v.reflect)(n),a,i,0);e.lineWidth=1,e.beginPath(),v.drawPoints.apply(void 0,[e].concat(_toConsumableArray(s.inner),[v.breakPoint],_toConsumableArray(s.outer))),e.stroke()}}}]),LacingPart}(),u=function(t){function Dress(){var t;_classCallCheck(this,Dress);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Dress)).call.apply(t,[this,{clothingLayer:f.a.Layer.MID,armCoverage:.5,armLoose:0,thickness:1}].concat(r)))}return _inherits(Dress,f["b"]),Dress}(),h=function(t){function SuperDress(){var t;_classCallCheck(this,SuperDress);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(SuperDress)).call.apply(t,[this,{}].concat(r)))}return _inherits(SuperDress,u),_createClass(SuperDress,[{key:"stroke",value:function stroke(){return"hsla(335, 80%, 30%, 1)"}},{key:"fill",value:function fill(){return"hsla(335, 100%, 42%, 1)"}},{key:"partPrototypes",get:function get(){return[{side:null,Part:l},{side:null,Part:a},{side:null,Part:i},{side:n.b.LEFT,Part:c},{side:n.b.RIGHT,Part:c}]}}]),SuperDress}()},function(t,e,r){"use strict";r.d(e,"a",function(){return n});var n={brownFur:Object.freeze({stroke:"#663300",fill:"#ac7339",coverConceal:["this"]}),sheerFabric:Object.freeze({stroke:"#000",fill:"rgba(0,0,0,0.8)"})}},function(t,e,r){"use strict";r.d(e,"b",function(){return a}),r.d(e,"c",function(){return s}),r.d(e,"g",function(){return u}),r.d(e,"f",function(){return f}),r.d(e,"e",function(){return p}),r.d(e,"d",function(){return h}),r.d(e,"a",function(){return y});var c=r(3),n=r(2),o=r(1),i=r(5),l=r(0);function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var a=function(t){function LeftBaseShoeShading(){var t;_classCallCheck(this,LeftBaseShoeShading);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(LeftBaseShoeShading)).call.apply(t,[this,{loc:"left feet",layer:o.a.FRONT}].concat(r)))}return _inherits(LeftBaseShoeShading,i["a"]),_createClass(LeftBaseShoeShading,[{key:"calcDrawPoints",value:function calcDrawPoints(t){var e=t.toe.toebox,r=Object(l.splitCurve)(.5,t.toe.out,t.toe.in),n=r.right.p2,o=r.left.p2;o.cp1=Object(l.simpleQuadratic)(e,o,.5,1);var i=Object(l.clone)(t.ankle.inbot);return e.cp1={x:i.x-1,y:i.y-5},e.cp2={x:e.x-3,y:e.y},[e,o,n,i,e]}}]),LeftBaseShoeShading}(),s=function(t){function RightBaseShoeShading(){var t;_classCallCheck(this,RightBaseShoeShading);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(RightBaseShoeShading)).call.apply(t,[this,{loc:"right feet",layer:o.a.FRONT}].concat(r)))}return _inherits(RightBaseShoeShading,i["a"]),_createClass(RightBaseShoeShading,[{key:"calcDrawPoints",value:function calcDrawPoints(t){var e=t.toe.toebox,r=Object(l.splitCurve)(.8,t.toe.out,t.toe.in).left.p2;r.cp1=Object(l.simpleQuadratic)(e,r,.5,-1);var n=Object(l.extractPoint)(t.ankle.outbot);return n.cp1=Object(l.simpleQuadratic)(r,n,.5,-10),e.cp1=Object(l.simpleQuadratic)(n,e,.7,3),[n,e,r,n]}}]),RightBaseShoeShading}(),u=function(t){function ShoeSidePart(){var t;_classCallCheck(this,ShoeSidePart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(ShoeSidePart)).call.apply(t,[this,{layer:o.a.BACK,loc:"feet"}].concat(r)))}return _inherits(ShoeSidePart,c["c"]),ShoeSidePart}(),f=function(t){function ShoePart(){var t;_classCallCheck(this,ShoePart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(ShoePart)).call.apply(t,[this,{layer:o.a.FRONT,loc:"feet",aboveParts:["parts feet","parts leg"],belowParts:["shadingParts feet"]}].concat(r)))}return _inherits(ShoePart,c["c"]),ShoePart}(),p=function(t){function ShoeBasePart(){var t;_classCallCheck(this,ShoeBasePart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(ShoeBasePart)).call.apply(t,[this,{layer:o.a.FRONT,loc:"feet",shadingParts:[a,s]}].concat(r)))}return _inherits(ShoeBasePart,f),_createClass(ShoeBasePart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){t.toe.toebox={x:t.toe.center.x,y:t.toe.center.y+this.toeHeight};var r=Object(l.extractPoint)(t.ankle.out),n=t.ankle.outbot,o=t.toe.out,i=t.toe.in,a=Object(l.clone)(t.ankle.inbot),s=t.ankle.in;a.cp2.x-=2,r.cp1=Object(l.simpleQuadratic)(s,r,.5,this.tongueDeflection),c.a.simpleStrokeFill(e,t,this),e.beginPath(),Object(l.drawPoints)(e,r,n,o,i,a,s,r),e.fill(),e.stroke()}}]),ShoeBasePart}(),h=function(t){function Shoe(){var t;_classCallCheck(this,Shoe);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Shoe)).call.apply(t,[this,{clothingLayer:c.a.Layer.MID,shoeHeight:0,tongueDeflection:2,toeHeight:0,Mods:{feetLength:-10,feetWidth:-2}}].concat(r)))}return _inherits(Shoe,c["b"]),Shoe}(),y=function(t){function FlatShoes(){var t;_classCallCheck(this,FlatShoes);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(FlatShoes)).call.apply(t,[this,{shoeHeight:0}].concat(r)))}return _inherits(FlatShoes,h),_createClass(FlatShoes,[{key:"stroke",value:function stroke(){return"#000"}},{key:"fill",value:function fill(){return"hsl(0,10%,20%)"}},{key:"partPrototypes",get:function get(){return[{side:n.b.LEFT,Part:p},{side:n.b.RIGHT,Part:p}]}}]),FlatShoes}()},function(t,e,r){"use strict";r.d(e,"a",function(){return a}),r.d(e,"b",function(){return s}),r.d(e,"d",function(){return c}),r.d(e,"g",function(){return l}),r.d(e,"i",function(){return u}),r.d(e,"f",function(){return f}),r.d(e,"c",function(){return p}),r.d(e,"e",function(){return h}),r.d(e,"h",function(){return y}),r.d(e,"j",function(){return b});var P=r(3),n=r(2),o=r(1),v=r(0),i=r(9);function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var a=function(t){function CoveredButtPart(){var t;_classCallCheck(this,CoveredButtPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(CoveredButtPart)).call.apply(t,[this,{layer:o.a.BACK,reflect:!0,loc:"butt",aboveParts:["parts butt"]}].concat(r)))}return _inherits(CoveredButtPart,P["c"]),_createClass(CoveredButtPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){P.a.simpleStrokeFill(e,t,this),e.strokeStyle=Object(i.b)(e.strokeStyle,{s:-5,l:-5}),e.beginPath(),Object(v.drawPoints)(e,t.butt.in,t.butt.out,t.butt.in),e.fill(),e.stroke()}}]),CoveredButtPart}(),s=function(t){function LongPantsPart(){var t;_classCallCheck(this,LongPantsPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(LongPantsPart)).call.apply(t,[this,{layer:o.a.FRONT,loc:"leg",aboveParts:["parts leg"]}].concat(r)))}return _inherits(LongPantsPart,P["c"]),_createClass(LongPantsPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){var r=Object(v.splitCurve)(this.legCoverage,t.calf.out,t.ankle.out),n=r.left.p2,o=(r=Object(v.splitCurve)(1-this.legCoverage,t.ankle.in,t.calf.in)).left.p2,i=r.right.p2;o.cp1=Object(v.simpleQuadratic)(n,o,.5,1);var a=t.knee.out,s=t.knee.in,c=t.knee.intop,l=t.calf.out,u=t.thigh.top,f=t.thigh.in,p=calcPantsTop(t,this.waistCoverage),h=p.out,y=p.hip,b=p.top,d=p.thighOut,g=p.groin;P.a.simpleStrokeFill(e,t,this),e.beginPath(),Object(v.drawPoints)(e,b,h,y,d,a,l,n,o,i,s,c,f,u,g),e.fill(),e.stroke()}}]),LongPantsPart}(),c=function(t){function MediumPantsPart(){var t;_classCallCheck(this,MediumPantsPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(MediumPantsPart)).call.apply(t,[this,{layer:o.a.FRONT,loc:"leg",aboveParts:["parts leg"]}].concat(r)))}return _inherits(MediumPantsPart,P["c"]),_createClass(MediumPantsPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){var r=Object(v.splitCurve)(this.legCoverage,t.knee.out,t.calf.out),n=r.left.p2,o=(r=Object(v.splitCurve)(1-this.legCoverage,t.calf.in,t.knee.in)).left.p2,i=r.right.p2;o.cp1=Object(v.simpleQuadratic)(n,o,.75,2);var a=t.knee.out,s=t.knee.intop,c=t.thigh.top,l=t.thigh.in,u=calcPantsTop(t,this.waistCoverage),f=u.out,p=u.hip,h=u.top,y=u.thighOut,b=u.groin;P.a.simpleStrokeFill(e,t,this),e.beginPath(),Object(v.drawPoints)(e,h,f,p,y,a,n,o,i,s,l,c,b),e.fill(),e.stroke()}}]),MediumPantsPart}(),l=function(t){function ShortPantsPart(){var t;_classCallCheck(this,ShortPantsPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(ShortPantsPart)).call.apply(t,[this,{layer:o.a.FRONT,loc:"leg",aboveParts:["parts leg"]}].concat(r)))}return _inherits(ShortPantsPart,P["c"]),_createClass(ShortPantsPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){var r=Object(v.splitCurve)(.35+.6*this.legCoverage,t.thigh.out,t.knee.out),n=r.left.p2,o=(r=Object(v.splitCurve)(1-this.legCoverage,t.knee.intop,t.thigh.in)).left.p2,i=r.right.p2,a=t.thigh.top;o.cp1=Object(v.simpleQuadratic)(n,o,.5,1/Object(v.clamp)(this.legCoverage,.3,1));var s=calcPantsTop(t,this.waistCoverage),c=s.out,l=s.hip,u=s.top,f=s.thighOut,p=s.groin;P.a.simpleStrokeFill(e,t,this),e.beginPath(),Object(v.drawPoints)(e,u,c,l,f,n,o,i,a,p),e.fill(),e.stroke()}}]),ShortPantsPart}(),u=function(t){function ShortsPart(){var t;_classCallCheck(this,ShortsPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(ShortsPart)).call.apply(t,[this,{layer:o.a.FRONT,loc:"leg",aboveParts:["parts leg","parts torso","decorativeParts torso"],belowSameLayerParts:["torso"]}].concat(r)))}return _inherits(ShortsPart,P["c"]),_createClass(ShortsPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){var r=Object(v.splitCurve)(.4+.55*this.legCoverage,t.hip,t.thigh.out),n=r.left.p2,o=(r=Object(v.splitCurve)(Object(v.clamp)(1.25-.75*this.legCoverage,0,1),t.thigh.in,t.thigh.top)).left.p2,i=r.right.p2;o.cp1=Object(v.simpleQuadratic)(n,o,.6,-3/Object(v.clamp)(this.legCoverage,.3,1));var a=calcPantsTop(t,this.waistCoverage),s=a.out,c=a.hip,l=a.top,u=a.groin;P.a.simpleStrokeFill(e,t,this),e.beginPath(),Object(v.drawPoints)(e,l,s,c,n,o,i,u),e.fill(),e.stroke()}}]),ShortsPart}();function calcPantsTop(t,e){var r,n,o;if(-.1<=e){var i=Object(v.splitCurve)(.9-e,t.waist,t.hip);r=i.left.p2,n=i.right.p2,o=t.thigh.out}else{var a=Object(v.splitCurve)(-.1-e,t.hip,t.thigh.out);r=a.left.p2,o=a.right.p2}var s=r.y-t.hip.y,c={x:0,y:t.pelvis.y+1.2*s};r.cp1={x:.5*r.x+.5*c.x,y:c.y};var l=Object(v.extractPoint)(t.groin);return l.cp1={x:.5*l.x+.5*t.thigh.top.x,y:l.y},{out:r,hip:n,top:c,thighOut:o,groin:l}}var f=function(t){function Pants(){var t;_classCallCheck(this,Pants);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Pants)).call.apply(t,[this,{clothingLayer:P.a.Layer.MID,legCoverage:1,waistCoverage:0}].concat(r)))}return _inherits(Pants,P["b"]),_createClass(Pants,[{key:"fill",value:function fill(){return"hsl(200, 65%, 10%)"}}]),Pants}(),p=function(t){function LongTightPants(){var t;_classCallCheck(this,LongTightPants);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(LongTightPants)).call.apply(t,[this].concat(r)))}return _inherits(LongTightPants,f),_createClass(LongTightPants,[{key:"partPrototypes",get:function get(){return[{side:null,Part:a},{side:n.b.LEFT,Part:s},{side:n.b.RIGHT,Part:s}]}}]),LongTightPants}(),h=function(t){function MediumTightPants(){var t;_classCallCheck(this,MediumTightPants);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(MediumTightPants)).call.apply(t,[this].concat(r)))}return _inherits(MediumTightPants,f),_createClass(MediumTightPants,[{key:"partPrototypes",get:function get(){return[{side:null,Part:a},{side:n.b.LEFT,Part:c},{side:n.b.RIGHT,Part:c}]}}]),MediumTightPants}(),y=function(t){function ShortTightPants(){var t;_classCallCheck(this,ShortTightPants);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(ShortTightPants)).call.apply(t,[this].concat(r)))}return _inherits(ShortTightPants,f),_createClass(ShortTightPants,[{key:"partPrototypes",get:function get(){return[{side:null,Part:a},{side:n.b.LEFT,Part:l},{side:n.b.RIGHT,Part:l}]}}]),ShortTightPants}(),b=function(t){function TightShorts(){var t;_classCallCheck(this,TightShorts);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(TightShorts)).call.apply(t,[this].concat(r)))}return _inherits(TightShorts,f),_createClass(TightShorts,[{key:"partPrototypes",get:function get(){return[{side:null,Part:a},{side:n.b.LEFT,Part:u},{side:n.b.RIGHT,Part:u}]}}]),TightShorts}()},function(t,e,r){"use strict";r.d(e,"a",function(){return i}),r.d(e,"b",function(){return s});var n=r(1),o=r(10);function _construct(t,e,r){return(_construct=function isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],function(){})),!0}catch(t){return!1}}()?Reflect.construct:function _construct(t,e,r){var n=[null];n.push.apply(n,e);var o=new(Function.bind.apply(t,n));return r&&_setPrototypeOf(o,r.prototype),o}).apply(null,arguments)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var i=function(){function Item(){!function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,Item);for(var t=arguments.length,e=new Array(t),r=0;r<t;r++)e[r]=arguments[r];if(Object.assign.apply(Object,[this,{layer:n.a.BASE}].concat(e)),!1===this.hasOwnProperty("name"))throw new Error("Constructing item with no name!");if(!1===this.hasOwnProperty("src"))throw new Error("Constructing item with no src!")}return function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}(Item,[{key:"renderItemLocation",value:function renderItemLocation(){return this.hasOwnProperty("x")&&this.hasOwnProperty("y")?{x:this.x,y:this.y}:null}},{key:"modifyPose",value:function modifyPose(){}},{key:"restorePose",value:function restorePose(){}}]),Item}(),a={},s={getItemRender:function getItemRender(t){if(a.hasOwnProperty(t.name))return a[t.name];throw new Error("Item not loaded yet: "+t.name)},loadItem:function loadItem(n){a.hasOwnProperty(n.name)||o.k.push(new Promise(function(t,e){var r=new Image;r.onload=function(){a[n.name]=r,t()},r.onerror=function(){console.log(Error("failed to load "+n.src)),e()},r.src=n.src}))},create:function create(t){for(var e=arguments.length,r=new Array(1<e?e-1:0),n=1;n<e;n++)r[n-1]=arguments[n];return _construct(t,r)}}},function(t,e,r){"use strict";r.d(e,"a",function(){return s}),r.d(e,"b",function(){return n});var o=r(1),i=r(11),a=r(2);function _construct(t,e,r){return(_construct=function isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],function(){})),!0}catch(t){return!1}}()?Reflect.construct:function _construct(t,e,r){var n=[null];n.push.apply(n,e);var o=new(Function.bind.apply(t,n));return r&&_setPrototypeOf(o,r.prototype),o}).apply(null,arguments)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var s=function(){function Tattoo(){!function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,Tattoo);for(var t=arguments.length,e=new Array(t),r=0;r<t;r++)e[r]=arguments[r];Object.assign.apply(Object,[this,{layer:o.a.BASE,side:a.b.RIGHT,rotation:0,width:20,loc:"+arm",ignoreClip:!1}].concat(e)),this.loc.startsWith("+")||(this.loc="+"+this.loc);var n=Object(i.extractBaseLocation)(this.loc);if(this.aboveParts=["parts ".concat(n),"decorativeParts ".concat(n)],this.belowParts=["clothingParts ".concat(n)],this.side=Object(i.getSideValue)(this.side),!1===this.hasOwnProperty("name"))throw new Error("Constructing tattoo with no name!");if(!1===this.hasOwnProperty("src"))throw new Error("Constructing tattoo with no src!");if(!1===this.hasOwnProperty("relativeLocation"))throw new Error("Constructing tattoo without relativeLocation object")}return function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}(Tattoo,[{key:"renderTattooLocation",value:function renderTattooLocation(t){return Object(i.locateRelativeToDrawpoint)(t,this.relativeLocation)}}]),Tattoo}(),c={},n={getRender:function getRender(t){if(c.hasOwnProperty(t.name))return c[t.name];throw new Error("Tattoo not loaded yet: "+t.name)},loadTattoo:function loadTattoo(n){c.hasOwnProperty(n.name)||i.patternLoadingQueue.push(new Promise(function(t,e){var r=new Image;r.onload=function(){c[n.name]=r,t()},r.onerror=function(){console.log(Error("failed to load "+n.src)),e()},r.src=n.src}))},create:function create(t){for(var e=arguments.length,r=new Array(1<e?e-1:0),n=1;n<e;n++)r[n-1]=arguments[n];return _construct(s,r)}}},function(t,e,r){"use strict";var o=r(7),O=r(0),f=r(1),i=r(2),n=r(5);function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _slicedToArray(t,e){return function _arrayWithHoles(t){if(Array.isArray(t))return t}(t)||function _iterableToArrayLimit(t,e){var r=[],n=!0,o=!1,i=void 0;try{for(var a,s=t[Symbol.iterator]();!(n=(a=s.next()).done)&&(r.push(a.value),!e||r.length!==e);n=!0);}catch(t){o=!0,i=t}finally{try{n||null==s.return||s.return()}finally{if(o)throw i}}return r}(t,e)||function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var a=function(t){function AsianBunBack(){var t;_classCallCheck(this,AsianBunBack);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(AsianBunBack)).call.apply(t,[this,o.a.hairBack,{coverConceal:["head"]}].concat(r)))}return _inherits(AsianBunBack,o["b"]),_createClass(AsianBunBack,[{key:"renderHairPoints",value:function renderHairPoints(e,r,t,n){var o=this.hairLength;function drawBackBuns(){var t=Object(O.adjust)(r.neck.top,1,-1);e.beginPath(),e.ellipse(t.x,t.y,.08*o,.06*o,.25*Math.PI,0,2*Math.PI),e.fill(),e.stroke()}if(drawBackBuns(),e.scale(-1,1),drawBackBuns(),e.scale(-1,1),10<(o=this.hairLength)){var i={x:0,y:r.skull.y+3},a={x:i.x+.13*o,y:i.y+.05*o},s={x:i.x+.1*o,y:i.y+.1*o};e.save(),e.beginPath(),e.strokeStyle=n.hairAccessoryColor,Object(O.drawPoints)(e,i,a),e.stroke(),e.restore(),e.beginPath(),e.ellipse(i.x,i.y,.1*o,.06*o,0,0,2*Math.PI),e.fill(),e.stroke(),e.beginPath(),e.save(),e.strokeStyle=n.hairAccessoryColor,Object(O.drawPoints)(e,Object(O.adjust)(i,1+.02*o,1+.02*o),s),e.stroke(),e.restore()}}}]),AsianBunBack}(),s=function(t){function LargeSideBangShading(){var t;_classCallCheck(this,LargeSideBangShading);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(LargeSideBangShading)).call.apply(t,[this,{loc:"+head",layer:f.a.HAIR,forcedSide:i.b.LEFT}].concat(r)))}return _inherits(LargeSideBangShading,n["a"]),_createClass(LargeSideBangShading,[{key:"calcDrawPoints",value:function calcDrawPoints(t,e,r,n,o){var i=Object(O.clamp)(o.dim.hairLength,0,50),a=calcLargeSideBang.call(this,t,i),s=a.tip,c=a.bot,l=_slicedToArray(Object(O.adjustPoints)(.03*-i,.04*-i,s.cp1,s.cp2),2),u=l[0],f=l[1],p=_slicedToArray(Object(O.adjustPoints)(.06*i,.05*i,s.cp1,s.cp2),2),h=p[0],y=p[1];return c.cp1=y,c.cp2=h,s.cp1=u,s.cp2=f,[c,s,c]}}]),LargeSideBangShading}(),c=function(t){function AsianBunFront(){var t;_classCallCheck(this,AsianBunFront);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(AsianBunFront)).call.apply(t,[this,o.a.hairFront,{shadingParts:[s]}].concat(r)))}return _inherits(AsianBunFront,o["b"]),_createClass(AsianBunFront,[{key:"renderHairPoints",value:function renderHairPoints(t,e){var r=Object(O.clamp)(this.hairLength,0,70),n={x:e.skull.x-2,y:e.skull.y+3},o=Object(O.adjust)(e.skull.side,1,0);o.cp1.x+=3+.01*r,o.cp1.y+=3+.01*r,o.cp2.x=o.x,n.cp1={x:o.x-4,y:o.y+3},n.cp2={x:n.x,y:n.y-this.faceLength/15},t.beginPath(),Object(O.drawPoints)(t,n,o,n),t.fill(),t.stroke();var i=Object(O.clamp)(this.hairLength,0,50);t.save();var a=calcLargeSideBang.call(this,e,i),s=a.tip,c=a.out,l=a.bot;t.scale(-1,1),t.beginPath(),Object(O.drawPoints)(t,s,c,l,s),t.fill(),t.stroke(),t.restore()}}]),AsianBunFront}();function calcLargeSideBang(t,e){var r={x:t.skull.x-2,y:t.skull.y+3},n=Object(O.adjust)(t.skull.side,1+.03*e,Object(O.clamp)(2-.05*e,-3,2));n.cp2.x=n.x,n.cp2.y-=2,n.cp1.x+=.05*e,n.cp1.y+=2+.04*e;var o={x:n.x-Object(O.clamp)(.1*e,0,10),y:n.y-Object(O.clamp)(e,0,20)};if(o.x=Object(O.clamp)(o.x,13,n.x),o.cp2={x:Object(O.clamp)(o.x+.08*e,0,Math.POSITIVE_INFINITY),y:o.y+2+.07*e},5<e&&(o.x-=.1*(e-5),20<e)){var i=e-20;o=Object(O.adjust)(o,.02*-i,.15*-i)}return o.cp1=Object(O.continueCurve)(r,n),r.cp1=Object(O.scale)(o.cp2,2,o),r.cp1.y=n.y,r.cp2={x:r.x-8,y:r.y-this.faceLength/15},e<10&&(r.cp2.y-=.5*(10-e)),{tip:r,out:n,bot:o}}function curly_tail_typeof(t){return(curly_tail_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function curly_tail_slicedToArray(t,e){return function curly_tail_arrayWithHoles(t){if(Array.isArray(t))return t}(t)||function curly_tail_iterableToArrayLimit(t,e){var r=[],n=!0,o=!1,i=void 0;try{for(var a,s=t[Symbol.iterator]();!(n=(a=s.next()).done)&&(r.push(a.value),!e||r.length!==e);n=!0);}catch(t){o=!0,i=t}finally{try{n||null==s.return||s.return()}finally{if(o)throw i}}return r}(t,e)||function curly_tail_nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function curly_tail_classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function curly_tail_defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function curly_tail_createClass(t,e,r){return e&&curly_tail_defineProperties(t.prototype,e),r&&curly_tail_defineProperties(t,r),t}function curly_tail_possibleConstructorReturn(t,e){return!e||"object"!==curly_tail_typeof(e)&&"function"!=typeof e?function curly_tail_assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function curly_tail_getPrototypeOf(t){return(curly_tail_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function curly_tail_inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&curly_tail_setPrototypeOf(t,e)}function curly_tail_setPrototypeOf(t,e){return(curly_tail_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var l=function(t){function CurlyTailFront(){var t;curly_tail_classCallCheck(this,CurlyTailFront);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return curly_tail_possibleConstructorReturn(this,(t=curly_tail_getPrototypeOf(CurlyTailFront)).call.apply(t,[this,o.a.hairFront].concat(r)))}return curly_tail_inherits(CurlyTailFront,o["b"]),curly_tail_createClass(CurlyTailFront,[{key:"renderHairPoints",value:function renderHairPoints(t,e){var r=Object(O.clamp)(this.hairLength,0,70),n={x:e.skull.x+.02*r,y:e.skull.y+3},o=Object(O.splitCurve)(Object(O.clamp)(.75+.0045*r,0,1.1),n,e.skull.side).left.p2;o.cp1.x+=3+.01*r,o.cp1.y+=3+.01*r,o.cp2.x=o.x,n.cp1={x:o.x-4+.03*r,y:o.y+3+.1*r},n.cp2={x:n.x,y:n.y-this.faceLength/15-.05*r},t.beginPath(),Object(O.drawPoints)(t,n,o,n),t.fill(),t.stroke();var i=calcCurlyTop(e,r),a=i.tip,s=i.out,c=i.bot;s.cp2.y-=.03*r,s.cp2.x+=.01*r,s.cp1.x+=.05*r,s.cp1.y+=4+.05*r,c.cp1={x:s.x,y:Object(O.clamp)(s.y-5-.05*r,c.y,s.y)},c.cp2={x:Object(O.clamp)(c.x+.07*r,0,s.x),y:c.y+2+.07*r},a.cp1=Object(O.scale)(c.cp2,3,c),a.cp2={x:a.x-7,y:a.y-this.faceLength/20},r<10&&(a.cp2.y-=.5*(10-r));var l=Object(O.splitCurve)(.5,c,a),u=curly_tail_slicedToArray(Object(O.drawSpecificCurl)({x:l.left.p2.x,y:l.left.p2.y,deflection:.03*-r},{x:l.left.p2.x,y:l.left.p2.y-.08*r},{x:a.x,y:a.y,deflection:-5}),3),f=u[0],p=u[1],h=u[2];h.cp2=l.right.p2.cp2,f.cp1=l.left.p2.cp1,f.cp2=l.left.p2.cp2,t.save(),t.scale(-1,1),t.beginPath(),Object(O.drawPoints)(t,a,s,c,f,p,h),t.fill(),t.stroke(),t.restore()}}]),CurlyTailFront}(),u=function(t){function CurlyTailMedium(){var t;curly_tail_classCallCheck(this,CurlyTailMedium);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return curly_tail_possibleConstructorReturn(this,(t=curly_tail_getPrototypeOf(CurlyTailMedium)).call.apply(t,[this,o.a.hairMedium].concat(r)))}return curly_tail_inherits(CurlyTailMedium,o["b"]),curly_tail_createClass(CurlyTailMedium,[{key:"renderHairPoints",value:function renderHairPoints(t,e){var r=this.hairLength,n=r-40;if(0<n){var o=calcCurlyTop(e,Object(O.clamp)(r,0,70)),i=o.out,a=o.bot,s={x:a.x+.04*n,y:a.y-.35*n,cp1:{x:a.x,y:a.y-.2*n}};s.cp2={x:s.x,y:s.y+.15*n};var c={x:a.x-.1*n,y:a.y-n,cp1:{x:s.x,y:s.y-.3*n}};c.cp2={x:c.x-.05*n,y:c.y+.4*n};var l=Object(O.extractPoint)(e.neck.top);l.cp1={x:c.x-.3*n,y:c.y+.2*n},l.cp2={x:l.x,y:l.y-.05*n},t.save(),t.scale(-1,1),t.beginPath(),Object(O.drawPoints)(t,a,s,c,l,i),t.fill(),t.stroke(),t.restore()}}}]),CurlyTailMedium}();function calcCurlyTop(t,e){var r={x:t.skull.x-.08*e,y:t.skull.y+3},n=Object(O.adjust)(t.skull.side,1+.03*e,Object(O.clamp)(2-.05*e,-3,2)),o={x:n.x-Object(O.clamp)(.05*e,0,10),y:n.y-Object(O.clamp)(.25*e,0,25)};return 50<e&&(o.x+=.06*(e-50)),{tip:r,out:n,bot:o}}var m=r(9);function hime_cut_slicedToArray(t,e){return function hime_cut_arrayWithHoles(t){if(Array.isArray(t))return t}(t)||function hime_cut_iterableToArrayLimit(t,e){var r=[],n=!0,o=!1,i=void 0;try{for(var a,s=t[Symbol.iterator]();!(n=(a=s.next()).done)&&(r.push(a.value),!e||r.length!==e);n=!0);}catch(t){o=!0,i=t}finally{try{n||null==s.return||s.return()}finally{if(o)throw i}}return r}(t,e)||function hime_cut_nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function hime_cut_typeof(t){return(hime_cut_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function hime_cut_classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function hime_cut_defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function hime_cut_createClass(t,e,r){return e&&hime_cut_defineProperties(t.prototype,e),r&&hime_cut_defineProperties(t,r),t}function hime_cut_possibleConstructorReturn(t,e){return!e||"object"!==hime_cut_typeof(e)&&"function"!=typeof e?function hime_cut_assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function hime_cut_getPrototypeOf(t){return(hime_cut_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function hime_cut_inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&hime_cut_setPrototypeOf(t,e)}function hime_cut_setPrototypeOf(t,e){return(hime_cut_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var p=function(t){function HimeCutFrontShading(){var t;hime_cut_classCallCheck(this,HimeCutFrontShading);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return hime_cut_possibleConstructorReturn(this,(t=hime_cut_getPrototypeOf(HimeCutFrontShading)).call.apply(t,[this,{loc:"+head",layer:f.a.BELOW_HAIR}].concat(r)))}return hime_cut_inherits(HimeCutFrontShading,n["a"]),hime_cut_createClass(HimeCutFrontShading,[{key:"calcDrawPoints",value:function calcDrawPoints(t){var e=calcHimeCut(t,Object(O.clamp)(this.hairLength,0,53)),r=e.left,n=e.right,o=e.top;return r=Object(O.adjust)(r,0,-1),[n=Object(O.adjust)(n,0,-1),r,o,n]}}]),HimeCutFrontShading}(),h=function(t){function HimeCutBack(){var t;hime_cut_classCallCheck(this,HimeCutBack);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return hime_cut_possibleConstructorReturn(this,(t=hime_cut_getPrototypeOf(HimeCutBack)).call.apply(t,[this,o.a.hairBack,{reflect:!0}].concat(r)))}return hime_cut_inherits(HimeCutBack,o["b"]),hime_cut_createClass(HimeCutBack,[{key:"renderHairPoints",value:function renderHairPoints(t,e){var r=this.hairLength,n=calcHimeCut(e,Object(O.clamp)(r,0,53)),o=n.right,i=n.top;i.y+=.01*r,i.x-=f.g,(o=Object(O.adjust)(o,.005*r,0)).cp1.y+=.01*r;var a={x:o.x,y:o.y-.8*r},s={x:-f.g,y:a.y-.01*r};t.beginPath(),Object(O.drawPoints)(t,i,o,a,s),t.fill(),t.stroke()}}]),HimeCutBack}(),y=function(t){function HimeCutFront(){var t;hime_cut_classCallCheck(this,HimeCutFront);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return hime_cut_possibleConstructorReturn(this,(t=hime_cut_getPrototypeOf(HimeCutFront)).call.apply(t,[this,o.a.hairFront,{shadingParts:[p]}].concat(r)))}return hime_cut_inherits(HimeCutFront,o["b"]),hime_cut_createClass(HimeCutFront,[{key:"renderHairPoints",value:function renderHairPoints(t,e){var r=calcHimeCut(e,Object(O.clamp)(this.hairLength,0,53)),n=r.left,o=r.right,i=r.top;t.beginPath(),Object(O.drawPoints)(t,o);var a=Object(O.splitCurve)(.2,o,n),s=a.left.p2;s.deflection=-2,a=Object(O.splitCurve)(.221,o,n),n.cp1=a.left.p2.cp1;var c=hime_cut_slicedToArray(Object(O.drawSpecificCurl)(s,Object(m.c)(s,i,.6),{x:a.left.p2.x,y:a.left.p2.y,deflection:-2}),3),l=c[1],u=c[2];Object(O.drawPoints)(t,null,s,l,u);var f=Object(O.splitCurve)(.6,o,n),p=f.left.p2;p.deflection=-1,f=Object(O.splitCurve)(.615,o,n),n.cp1=f.left.p2.cp1;var h=hime_cut_slicedToArray(Object(O.drawSpecificCurl)(p,Object(m.c)(p,i,.4),{x:f.left.p2.x,y:f.left.p2.y,deflection:-1}),3),y=h[1],b=h[2];Object(O.drawPoints)(t,null,p,y,b);var d=Object(O.splitCurve)(.9,o,n),g=d.left.p2;g.deflection=4,d=Object(O.splitCurve)(.91,o,n),n.cp1=d.left.p2.cp1;var P=hime_cut_slicedToArray(Object(O.drawSpecificCurl)(g,Object(m.c)(g,i,.5),{x:d.left.p2.x,y:d.left.p2.y,deflection:4}),3),v=P[1],_=P[2];Object(O.drawPoints)(t,null,g,v,_),Object(O.drawPoints)(t,null,n,i,o),t.fill()}}]),HimeCutFront}(),b=function(t){function HimeCutSide(){var t;hime_cut_classCallCheck(this,HimeCutSide);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return hime_cut_possibleConstructorReturn(this,(t=hime_cut_getPrototypeOf(HimeCutSide)).call.apply(t,[this,o.a.hairFront,{loc:"+front hair",aboveParts:["hairParts hair"],reflect:!0}].concat(r)))}return hime_cut_inherits(HimeCutSide,o["b"]),hime_cut_createClass(HimeCutSide,[{key:"renderHairPoints",value:function renderHairPoints(t,e){var r=this.hairLength;if(!(r<40)){var n=calcHimeCut(e,Object(O.clamp)(r,0,53)),o=n.left,i=n.right;(i=Object(O.adjust)(i,.4,.9)).cp1.y+=.01*r;var a=Object(O.splitCurve)(.1,i,o).left.p2,s={x:i.x,y:i.y-.4*(r-40)},c={x:a.x,y:s.y-1};c.cp1=Object(O.simpleQuadratic)(s,c,.5,1),t.beginPath(),Object(O.drawPoints)(t,i,s,c,a),t.fill()}}}]),HimeCutSide}();function calcHimeCut(t,e){var r=Object(O.splitCurve)(.4+e/82,t.skull,t.skull.side).left.p2;(r=Object(O.adjust)(r,1,e/100)).cp1.x-=.09*e;var n=Object(O.reflect)(r);n.cp1=Object(O.simpleQuadratic)(r,n,.5,e/20);var o=Object(O.extractPoint)(t.skull);return o.cp1=Object(O.reflect)(r.cp2),o.cp2=Object(O.reflect)(r.cp1),o=Object(O.adjust)(o,0,2),r.cp1.y+=2,r.cp2.y+=2,{left:n,right:r,top:o}}function straight_typeof(t){return(straight_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function straight_classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function straight_defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function straight_createClass(t,e,r){return e&&straight_defineProperties(t.prototype,e),r&&straight_defineProperties(t,r),t}function straight_possibleConstructorReturn(t,e){return!e||"object"!==straight_typeof(e)&&"function"!=typeof e?function straight_assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function straight_getPrototypeOf(t){return(straight_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function straight_inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&straight_setPrototypeOf(t,e)}function straight_setPrototypeOf(t,e){return(straight_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var d=function(t){function StraightFrontShading(){var t;straight_classCallCheck(this,StraightFrontShading);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return straight_possibleConstructorReturn(this,(t=straight_getPrototypeOf(StraightFrontShading)).call.apply(t,[this,{loc:"front hair",layer:f.a.HAIR}].concat(r)))}return straight_inherits(StraightFrontShading,n["a"]),straight_createClass(StraightFrontShading,[{key:"calcDrawPoints",value:function calcDrawPoints(t){var e=calcStraight.call(this,t),r=e.top,n=e.topBot;return n.cp1=Object(O.simpleQuadratic)(r,n,.5,2.5),n.cp2=null,r.cp1=Object(O.simpleQuadratic)(n,r,.5,-.5),[r,n,r]}}]),StraightFrontShading}(),g=function(t){function StraightFrontSideShading(){var t;straight_classCallCheck(this,StraightFrontSideShading);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return straight_possibleConstructorReturn(this,(t=straight_getPrototypeOf(StraightFrontSideShading)).call.apply(t,[this,{loc:"+front hair",layer:f.a.HAIR,reflect:!0}].concat(r)))}return straight_inherits(StraightFrontSideShading,n["a"]),straight_createClass(StraightFrontSideShading,[{key:"calcDrawPoints",value:function calcDrawPoints(t){var e=calcStraight.call(this,t),r=e.top,n=e.side,o=e.topBot,i=Object(O.splitCurve)(.8,r,n),a=[],s={x:1,y:.8*r.y+.2*o.y},c=Object(O.adjust)(Object(O.extractPoint)(i.left.p2),-.3,0);c.cp1=Object(O.simpleQuadratic)(s,c,.35,7),s.cp1=Object(O.simpleQuadratic)(c,s,.65,-6.6),a.push(s,c,s);var l={x:-1,y:.4*r.y+.6*o.y},u=Object(O.adjust)(Object(O.extractPoint)(i.left.p2),-.5,-1.5);return u.cp1=Object(O.simpleQuadratic)(l,u,.55,7),l.cp1=Object(O.simpleQuadratic)(u,l,1-.55,-6.6),a.push(O.breakPoint,l,u,l),a.push(O.endPoint),a}}]),StraightFrontSideShading}(),P=function(t){function StraightFrontShine(){var t;straight_classCallCheck(this,StraightFrontShine);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return straight_possibleConstructorReturn(this,(t=straight_getPrototypeOf(StraightFrontShine)).call.apply(t,[this,{loc:"+ears hair",layer:f.a.HAIR,aboveParts:["hairParts hair"]}].concat(r)))}return straight_inherits(StraightFrontShine,o["b"]),straight_createClass(StraightFrontShine,[{key:"renderHairPoints",value:function renderHairPoints(t,e){var r=calcStraight.call(this,e),n=r.top,o=r.topBot;n=Object(O.adjust)(n,2.5,-1),o=Object(O.adjust)(o,2.5,1);var i=Object(O.adjust)(Object(m.c)(n,o,.5),.5,0);o.cp1={x:n.x-1,y:n.y},o.cp2={x:o.x-1,y:o.y+.5},i.cp1={x:o.x+1.5,y:o.y},i.cp2={x:i.x-.2,y:i.y-.3},n.cp1=Object(O.continueCurve)(o,i),n.cp2={x:n.x+2,y:n.y},t.fillStyle="hsla(0,0%,100%,0.2)",t.scale(-1,1),t.beginPath(),Object(O.drawPoints)(t,n,o,i,n),t.fill(),t.scale(-1,1)}}]),StraightFrontShine}(),v=function(t){function StraightFront(){var t;straight_classCallCheck(this,StraightFront);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return straight_possibleConstructorReturn(this,(t=straight_getPrototypeOf(StraightFront)).call.apply(t,[this,o.a.hairFront,{reflect:!0,shadingParts:[d,g]}].concat(r)))}return straight_inherits(StraightFront,o["b"]),straight_createClass(StraightFront,[{key:"stroke",value:function stroke(){return O.none}},{key:"renderHairPoints",value:function renderHairPoints(t,e){var r=calcStraight.call(this,e),n=r.top,o=r.side,i=r.topBot;t.beginPath(),Object(O.drawPoints)(t,n,o,i,n),t.fill()}}]),StraightFront}(),_=function(t){function StraightSideBangShading(){var t;straight_classCallCheck(this,StraightSideBangShading);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return straight_possibleConstructorReturn(this,(t=straight_getPrototypeOf(StraightSideBangShading)).call.apply(t,[this,{loc:"+front hair",layer:f.a.BELOW_HAIR}].concat(r)))}return straight_inherits(StraightSideBangShading,n["a"]),straight_createClass(StraightSideBangShading,[{key:"calcDrawPoints",value:function calcDrawPoints(t){var e=this.hairLength-12;if(e<0)return[];var r=calcStraightSide.call(this,t,e),n=r.sideBot,o=r.innerBot;return n.y+=.1*e,[n,o,{x:o.x+6,y:o.y+10},{x:n.x+3,y:n.y+2},n]}}]),StraightSideBangShading}(),C=function(t){function StraightSideBang(){var t;straight_classCallCheck(this,StraightSideBang);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return straight_possibleConstructorReturn(this,(t=straight_getPrototypeOf(StraightSideBang)).call.apply(t,[this,o.a.hairAboveEars,{shadingParts:[_]}].concat(r)))}return straight_inherits(StraightSideBang,o["b"]),straight_createClass(StraightSideBang,[{key:"renderHairPoints",value:function renderHairPoints(t,e){var r=this.hairLength-12;if(!(r<0)){var n=calcStraightSide.call(this,e,r),o=n.top,i=n.side,a=n.sideBot,s=n.innerBot,c=n.innerTop;a.cp1=Object(O.simpleQuadratic)(i,a,.5,.5+.005*r),c.cp1=Object(O.simpleQuadratic)(s,c,.5,-.5),t.beginPath(),Object(O.drawPoints)(t,o,i,a,s,c),t.fill()}}}]),StraightSideBang}();function calcStraightSide(t,e){var r=calcStraight.call(this,t),n=r.top,o=r.side;o.x+=.02*e;var i={x:o.x-.03*e,y:o.y-.65*e},a={x:i.x-.02*e,y:i.y-.05*e},s=Object(O.splitCurve)(.6,n,o);return{top:n,side:o,sideBot:i,innerBot:a,innerTop:Object(O.extractPoint)(s.left.p2)}}var w=function(t){function StraightBack(){var t;straight_classCallCheck(this,StraightBack);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return straight_possibleConstructorReturn(this,(t=straight_getPrototypeOf(StraightBack)).call.apply(t,[this,o.a.hairBack,{reflect:!0}].concat(r)))}return straight_inherits(StraightBack,o["b"]),straight_createClass(StraightBack,[{key:"renderHairPoints",value:function renderHairPoints(t,e){var r=this.hairLength-12;if(!(r<0)){var n=calcStraight.call(this,e,r+12),o=n.top,i=n.side;i.x+=.02*r;var a={x:i.x+.05*r,y:i.y-r},s={x:0,y:a.y-.05*r};t.beginPath(),Object(O.drawPoints)(t,o,i,a,s),t.fill(),t.stroke()}}}]),StraightBack}();function calcStraight(t){var e=Object(O.extractPoint)(t.skull);e.y+=1;var r=Object(O.splitCurve)(.5,t.skull.side,t.skull.bot).left.p2;r.cp1={x:.5*e.x+.5*r.x,y:e.y+2},r.cp2={x:r.x+3.5,y:.7*e.y+.3*r.y};var n={x:e.x,y:e.y-.04*this.faceLength};return n.cp1={x:r.x,y:.4*r.y+.6*e.y},n.cp2={x:n.x,y:n.y-.02*this.faceLength},e.cp1=Object(O.simpleQuadratic)(n,e,.5,1),{top:e,side:r,topBot:n}}function side_high_tail_typeof(t){return(side_high_tail_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function side_high_tail_classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function side_high_tail_defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function side_high_tail_createClass(t,e,r){return e&&side_high_tail_defineProperties(t.prototype,e),r&&side_high_tail_defineProperties(t,r),t}function side_high_tail_possibleConstructorReturn(t,e){return!e||"object"!==side_high_tail_typeof(e)&&"function"!=typeof e?function side_high_tail_assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function side_high_tail_getPrototypeOf(t){return(side_high_tail_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function side_high_tail_inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&side_high_tail_setPrototypeOf(t,e)}function side_high_tail_setPrototypeOf(t,e){return(side_high_tail_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var k=function(t){function SideHighTailFront(){var t;side_high_tail_classCallCheck(this,SideHighTailFront);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return side_high_tail_possibleConstructorReturn(this,(t=side_high_tail_getPrototypeOf(SideHighTailFront)).call.apply(t,[this,o.a.hairFront].concat(r)))}return side_high_tail_inherits(SideHighTailFront,o["b"]),side_high_tail_createClass(SideHighTailFront,[{key:"renderHairPoints",value:function renderHairPoints(t,e){var r=Object(O.clamp)(this.hairLength,0,70),n={x:e.skull.x+.02*r,y:e.skull.y+3},o=Object(O.splitCurve)(Object(O.clamp)(.75+.0045*r,.9,1.1),n,e.skull.side).left.p2;o.cp1.x+=3+.01*r,o.cp1.y+=3+.01*r,o.cp2.x=o.x,n.cp1={x:o.x-4+.03*r,y:o.y+3+.1*r},n.cp2={x:n.x,y:n.y-this.faceLength/15-.05*r},t.beginPath(),Object(O.drawPoints)(t,n,o,n),t.fill(),t.stroke();var i=calcSideHighTailTop(e,r),a=i.tip,s=i.out,c=i.bot;s.cp2.y-=.03*r,s.cp2.x+=.01*r,s.cp1.x+=.05*r,s.cp1.y+=4+.05*r,c.cp1={x:s.x,y:Object(O.clamp)(s.y-5-.05*r,c.y,s.y)},c.cp2={x:Object(O.clamp)(c.x+.07*r,0,s.x),y:c.y+2+.07*r},a.cp1=Object(O.scale)(c.cp2,3,c),a.cp2={x:a.x-5,y:a.y-this.faceLength/15-.05*r},r<10&&(a.cp2.y-=.5*(10-r)),t.save(),t.scale(-1,1),t.beginPath(),Object(O.drawPoints)(t,a,s,c,a),t.fill(),t.stroke(),t.restore()}}]),SideHighTailFront}(),j=function(t){function SideHighTailTail(){var t;side_high_tail_classCallCheck(this,SideHighTailTail);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return side_high_tail_possibleConstructorReturn(this,(t=side_high_tail_getPrototypeOf(SideHighTailTail)).call.apply(t,[this,o.a.hairMedium].concat(r)))}return side_high_tail_inherits(SideHighTailTail,o["b"]),side_high_tail_createClass(SideHighTailTail,[{key:"renderHairPoints",value:function renderHairPoints(t,e,r,n){var o=this.hairLength,i=this.hairLength-50;if(!(i<0)){var a=calcSideHighTailTop(e,Object(O.clamp)(o,0,70)).tip;a.x*=-1,a.y-=.01*i;var s={x:a.x,y:a.y+.12*i},c={x:a.x-.09*i,y:a.y},l={x:a.x+.09*i,y:a.y};s.cp1={x:c.x+.02*o,y:c.y+.02*o},s.cp2={x:s.x-.1*i,y:s.y-.02*i},l.cp1={x:s.x+.1*i,y:s.y-.02*i},l.cp2={x:l.x-.02*o,y:l.y+.02*o},Object(O.rotatePoints)(a,-.24,s,c,l);var u={};u.out={x:s.x+.2*i,y:s.y-.8*i},u.outbot={x:s.x+.18*i,y:u.out.y-.8*i},u.in=Object(O.extractPoint)(e.neck.top),u.out.cp1={x:s.x+.3*i,y:s.y-.1*i},u.out.cp2={x:u.out.x-.1*i,y:u.out.y+.3*i},u.outbot.cp1=Object(O.continueCurve)(s,u.out),u.outbot.cp2={x:u.outbot.x+.2*i,y:u.outbot.y+.05*i},u.in.cp1={x:u.outbot.x-.05*i,y:u.outbot.y+.4*i},u.in.cp2={x:u.in.x-.1*i,y:u.in.y-.5*i},t.beginPath(),Object(O.drawPoints)(t,s,u.out,u.outbot,u.in),t.fill(),t.stroke();var f=this.hairLength-90;if(0<f){var p={};p.top=Object(O.extractPoint)(e.neck.top),p.tip={x:p.top.x+.6*f,y:p.top.y-3.5*f},p.tip.cp1={x:p.top.x+1.5*f,y:p.top.y-2*f},p.tip.cp2={x:p.tip.x-.5*f,y:p.tip.y+1.2*f},p.right=Object(O.extractPoint)(e.neck.cusp),p.right.x+=.5,p.right.cp1={x:p.tip.x-.6*f,y:p.tip.y+f},p.right.cp2={x:p.right.x+.3*f,y:p.right.y-.8*f},t.save(),t.scale(-1,1),t.beginPath(),Object(O.drawPoints)(t,p.top,p.tip,p.right),t.fill(),t.stroke(),t.restore()}t.beginPath(),Object(O.drawPoints)(t,c,s,l),t.fill(),t.stroke();var h=Object(O.splitCurve)(.3,c,s),y=h.left.p2,b=(h=Object(O.splitCurve)(.7,s,l)).left.p2;b.cp1=Object(O.simpleQuadratic)(y,b,.5,.03*i),t.save(),t.strokeStyle=n.hairAccessoryColor,t.beginPath(),Object(O.drawPoints)(t,y,b),t.stroke(),t.restore()}}}]),SideHighTailTail}();function calcSideHighTailTop(t,e){var r={x:t.skull.x-.08*e,y:t.skull.y+3},n=Object(O.adjust)(t.skull.side,.03*e,Object(O.clamp)(2-.05*e,-3,2)),o={x:n.x-Object(O.clamp)(.05*e,0,10),y:n.y-Object(O.clamp)(.25*e,0,25)};return 50<e&&(o.x+=.06*(e-50)),{tip:r,out:n,bot:o}}function hime_curl_typeof(t){return(hime_curl_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function hime_curl_slicedToArray(t,e){return function hime_curl_arrayWithHoles(t){if(Array.isArray(t))return t}(t)||function hime_curl_iterableToArrayLimit(t,e){var r=[],n=!0,o=!1,i=void 0;try{for(var a,s=t[Symbol.iterator]();!(n=(a=s.next()).done)&&(r.push(a.value),!e||r.length!==e);n=!0);}catch(t){o=!0,i=t}finally{try{n||null==s.return||s.return()}finally{if(o)throw i}}return r}(t,e)||function hime_curl_nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function hime_curl_classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function hime_curl_defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function hime_curl_createClass(t,e,r){return e&&hime_curl_defineProperties(t.prototype,e),r&&hime_curl_defineProperties(t,r),t}function hime_curl_possibleConstructorReturn(t,e){return!e||"object"!==hime_curl_typeof(e)&&"function"!=typeof e?function hime_curl_assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function hime_curl_getPrototypeOf(t){return(hime_curl_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function hime_curl_inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&hime_curl_setPrototypeOf(t,e)}function hime_curl_setPrototypeOf(t,e){return(hime_curl_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var x=function(t){function HimeCurlShading(){var t;hime_curl_classCallCheck(this,HimeCurlShading);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return hime_curl_possibleConstructorReturn(this,(t=hime_curl_getPrototypeOf(HimeCurlShading)).call.apply(t,[this,{loc:"+front hair",layer:f.a.GENITALS}].concat(r)))}return hime_curl_inherits(HimeCurlShading,n["a"]),hime_curl_createClass(HimeCurlShading,[{key:"calcDrawPoints",value:function calcDrawPoints(t){var e=calcHimeCurl(t,this.hairLength),r=e.right,n=e.out,o=e.bot,i=e.fork,a=e.forkIn,s=hime_curl_slicedToArray(Object(O.adjustPoints)(-2,0,r,n),2),c=s[0],l=s[1];o.cp1=Object(O.adjust)(o.cp1,-3,0),o.cp2=Object(O.adjust)(o.cp2,-4,0);var u=Object(O.splitCurve)(.35,l,o),f=Object(O.adjust)(u.left.p2,-2,0);return f.cp1=u.left.p2.cp1,f.cp2={x:f.x+.04*this.hairLength,y:f.y-.2*this.hairLength},o.cp1={x:f.x-.02*this.hairLength,y:f.y-.07*this.hairLength},o.cp2=u.right.p2.cp2,r.cp1={x:o.x+12,y:o.y},r.cp2={x:r.x+5,y:c.y},i.y+=1.5,i.x+=.7,i.cp1=Object(O.simpleQuadratic)(i,a,.5,-7),i.cp2=null,[r,l,f,o,r,O.breakPoint,o,i,a,i,Object(O.extractPoint)(o),O.endPoint]}}]),HimeCurlShading}(),S=function(t){function HimeCurlMedium(){var t;hime_curl_classCallCheck(this,HimeCurlMedium);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return hime_curl_possibleConstructorReturn(this,(t=hime_curl_getPrototypeOf(HimeCurlMedium)).call.apply(t,[this,o.a.hairMedium,{shadingParts:[x]}].concat(r)))}return hime_curl_inherits(HimeCurlMedium,o["b"]),hime_curl_createClass(HimeCurlMedium,[{key:"renderHairPoints",value:function renderHairPoints(t,e){var r=calcHimeCurl(e,this.hairLength),n=r.left,o=r.top,i=r.right,a=r.out,s=r.bot,c=r.fork,l=r.forkIn,u=r.forkTop;e.hair=e.hair||{},e.hair.mid={left:n,top:o,right:i,out:a,bot:s,fork:c,forkIn:l,forkTop:u},t.beginPath(),Object(O.drawPoints)(t,n,o,i,a,s,c,l,u),t.fill(),t.stroke()}}]),HimeCurlMedium}();function calcHimeCurl(t,e){var r=calcHimeCut(t,Object(O.clamp)(e,0,53)),n=r.right,o=r.top;o.y+=.01*e,o.x-=f.g,(n=Object(O.adjust)(n,.005*e,0)).cp1.y+=.01*e,o.cp1.y+=.01*e,o.cp2.x-=.005*e;var i=Object(O.reflect)(n);n.x+=.012*e;var a={x:n.x,y:n.y-.8*e},s={x:n.x-.01*e,y:.7*n.y+.3*a.y};s.cp1={x:n.x+.01*e,y:n.y-.15*e},s.cp2={x:s.x,y:s.y+.1*e},a.cp1={x:s.x,y:s.y-.07*e},a.cp2={x:a.x+.1*e,y:a.y+.1*e};var c={x:a.x-.03*e,y:a.y+.2*e},l={x:c.x-.02*e,y:c.y-.1*e},u=Object(O.extractPoint)(t.neck.top);return u.y-=2,u.cp1={x:l.x-.18*e,y:l.y+.23*e},u.cp2={x:u.x,y:u.y-.23*e},c.cp1={x:a.x+.02*e,y:a.y+.07*e},c.cp2={x:c.x-.02*e,y:c.y-.07*e},l.cp1=Object(O.simpleQuadratic)(c,l,.3,.02*-e),{left:i,top:o,right:n,out:s,bot:a,fork:c,forkIn:l,forkTop:u}}var T=function(t){function HimeCurlSide(){var t;hime_curl_classCallCheck(this,HimeCurlSide);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return hime_curl_possibleConstructorReturn(this,(t=hime_curl_getPrototypeOf(HimeCurlSide)).call.apply(t,[this,o.a.hairFront,{loc:"+front hair",aboveParts:["hairParts hair"]}].concat(r)))}return hime_curl_inherits(HimeCurlSide,o["b"]),hime_curl_createClass(HimeCurlSide,[{key:"renderHairPoints",value:function renderHairPoints(t,e){var r=this.hairLength,n=r-35;if(!(n<0)){var o=calcHimeCut(e,Object(O.clamp)(r,0,53)),i=o.left,a=o.right;(a=Object(O.adjust)(a,.4,1.5)).cp1.y+=.01*r;var s,c=Object(O.splitCurve)(.1,a,i),l=c.left.p2;(s=n<15?{x:a.x-3,y:a.y-n}:(c=Object(O.splitCurve)(Object(O.clamp)(.015*n-.3,-.3,.8),e.jaw,e.chin.out),Object(O.adjust)(c.left.p2,.2,-.2))).cp1={x:a.x,y:a.y-.1*n},s.cp2={x:s.x+.13*n,y:s.y+.06*n},l.cp1=Object(O.simpleQuadratic)(s,l,.45,.07*-n),t.save(),t.scale(-1,1),t.beginPath(),Object(O.drawPoints)(t,a,s,l),t.fill(),t.stroke(),t.restore()}}}]),HimeCurlSide}();r.d(e,"a",function(){return A});var A=[[],[c,a],[l,u],[y,h,b],[v,C,w,P],[k,j],[y,S,T],[k]]},function(t,e,r){"use strict";var n=r(10);var o=r(48),i=r(49),a=r(21),s=r(17);r.d(e,"b",function(){return c}),r.d(e,"a",function(){return load});var c=!1;function load(){return new Promise(function(t){Object(s.d)(),Object(a.a)(),Object(i.a)(),Object(o.b)(),function loadPatterns(){Object(n.c)("sequins","http://us.123rf.com/450wm/agonda/agonda1503/agonda150300035/37619569-melange-wool-knitting-pattern-seamless-background.jpg?ver=6"),Object(n.c)("soft brown fur","https://cdn.tobi.com/swatch_images/black-multi-cant-be-tamed-fur-vest-swatch.jpg"),Object(n.c)("black leather","http://www.textures123.com/free-texture/leather/leather-texture05.jpg"),Object(n.c)("yellow stripes","http://images.naldzgraphics.net/2014/07/16-yellow-stripe-texture.jpg"),Object(n.c)("purple squares","http://images.naldzgraphics.net/2014/07/17-square-fabric-textures.jpg"),Object(n.c)("chain mail 1","http://st.depositphotos.com/1268230/2584/i/950/depositphotos_25842101-Seamless-computer-generated-metal-chain.jpg"),Object(n.c)("fishnet","http://i.imgur.com/fU41Daz.png"),Object(n.c)("lace","http://i.imgur.com/RZc72OK.gif"),Object(n.c)("red plaid","http://www.creattor.com/files/37/1681/plaid-fabrics-textures-screenshots-1.jpg"),Object(n.b)("green camouflage","res/green camouflage.png","http://i.imgur.com/cSQUcjj.png"),Object(n.b)("camouflage","res/camouflage.jpg","http://images.naldzgraphics.net/2014/07/15-camo-fabric-texture.jpg"),Object(n.b)("kimono flowers","res/kimono_flowers.png","http://oksancia.com/wp-content/uploads/2011/03/beautiful_garden_seamless_pattern_wm.png"),Object(n.b)("bandages","res/bandages.png","http://i.imgur.com/Om7lYpO.png"),Object(n.b)("knit cashmere","res/knit_cashmere.jpg","https://i.imgur.com/kcyIFUT.jpg")}(),c=!0,t()})}},function(t,e,r){"use strict";r.d(e,"a",function(){return configureBaseColors}),r.d(e,"b",function(){return initCanvas});var a=r(9),u=r(1),f=r(6),p=r(0);function configureBaseColors(n){var t=n.avatar,e=t.dim.skin;if(isNaN(e))return n.baseFill=e,n.baseStroke=e,n.baseLipColor=e,void(n.nippleColor=e);if(e<11)n.baseFill=[Math.floor(255-2.8*e),Math.floor(214-5.3*e),Math.floor(180-6.5*e)],n.baseStroke=[Math.floor(214-5.1*e),Math.floor(156-4*e),Math.floor(147-6.4*e)],n.baseLipColor=[Math.floor(194-4.1*e),Math.floor(123-4.1*e),Math.floor(119-4.1*e)],n.nippleColor=[Math.floor(140-4.1*e),Math.floor(89-4.1*e),Math.floor(86-4.1*e)];else if(e<100){var r=e-11;n.baseFill=[Math.floor(227-9.6*r),Math.floor(161-9.1*r),Math.floor(115-6.3*r)],28<e&&(r-=2.5*(e-23)),n.baseStroke=[Math.floor(163-12*r),Math.floor(116-10.8*r),Math.floor(83-7.3*r)],n.baseLipColor=[Math.floor(153-8.9*r),Math.floor(82-6.2*r),Math.floor(78-6.4*r)],n.nippleColor=[Math.floor(99-9.9*r),Math.floor(48-7.2*r),Math.floor(45-7.4*r)]}var o=.7+Object(p.clamp)(t.getDim("faceFem")/(3*t.getDimDesc("faceFem").high),0,.3);n.baseLipColor.forEach(function(t,e,r){r[e]=n.baseFill[e]*(1-o)+t*o}),n.baseFill=finalizeColor(n.baseFill,t.Mods,"skin"),n.baseStroke=finalizeColor(n.baseStroke,t.Mods,"skin"),n.baseLipColor=finalizeColor(n.baseLipColor,t.Mods),n.nippleColor=finalizeColor(n.nippleColor,t.Mods);var i=t.getDim("faceFem")/t.getDimDesc("faceFem").high*20;n.eyelidColor=Object(a.b)(n.baseStroke,{s:-i,l:-i}),n.defaultHairFill="hsl(".concat(Math.round(t.dim.hairHue),",").concat(Math.round(t.dim.hairSaturation),"%,\n        ").concat(Math.round(t.dim.hairLightness),"%)"),n.hairFill=t.hairFill,n.hairStroke=t.hairStroke,n.browFill=t.browFill,t.hairFill||(n.hairFill=n.defaultHairFill),t.hairStroke||(n.hairStroke=Object(a.b)(n.defaultHairFill,{l:-10,s:-10})),t.browFill||(n.browFill=Object(a.b)(n.defaultHairFill,{l:-5,s:-5})),n.hairAccessoryColor="hsl(".concat(t.getMod("hairAccessoryHue"),",").concat(t.getMod("hairAccessorySaturation"),"%,").concat(t.getMod("hairAccessoryLightness"),"%)")}function finalizeColor(t,e,r){var n=Object(a.a)({r:Object(p.clamp)(t[0],0,255),g:Object(p.clamp)(t[1],0,255),b:Object(p.clamp)(t[2],0,255)});return r&&(n.h+=e[r+"Hue"],n.s+=e[r+"Saturation"],n.l+=e[r+"Lightness"]),"hsl("+Object(p.clamp)(Math.floor(n.h),0,360)+","+Object(p.clamp)(Math.floor(n.s),0,100)+"%,"+Object(p.clamp)(Math.floor(n.l),0,100)+"%)"}function initCanvas(t,e,r,n,o,i,a){a&&e.clearRect(0,0,t.width,t.height);var s=t.width/180,c=t.height/400,l=o.scaling=Math.min(s,c);e.scale(l,l),o.ox=r.ox=Math.floor(t.width/l-t.width/s),o.oy=r.oy=Math.floor(t.height/l-t.height/c),i===u.a.BASE&&r.printAdditionalInfo&&function printAdditionalInfo(t,e,r,n){e.save(),e.font="bold 20px Arial",e.fillStyle=r.genderColor,e.fillText(n.isMale()?String.fromCharCode(9794):String.fromCharCode(9792),6,24);var o=Object(p.clamp)(t.width/n.name.length/2,10,24);e.font=o+"px Arial",e.fillStyle=r.nameColor;24<n.name.length?e.fillText(n.name.slice(0,24)+"...",30,26):e.fillText(n.name,30,26);e.restore()}(t,e,r,n),e.translate(r.ox,0),i===u.a.BASE&&r.printHeight&&function printHeight(t,e,r){var n=r.heightAdjust(),o=r.dim.height/2.54+n+2,i=Math.floor(o/12)+"'",a=Math.floor(o-12*Math.floor(o/12))+'"',s=e.oy;o=i+a,t.save(),t.fillStyle=e.heightColor,t.font="12px Arial",t.fillText(o,125,16),0<n&&(o=r.dim.height/2.54+2,i=Math.floor(o/12)+"'",a=Math.floor(o-12*Math.floor(o/12))+'"',o=i+a,t.fillText("("+o+")",150,16));t.strokeStyle=e.heightBarColor,t.beginPath();t.moveTo(150,20),t.lineTo(178,20),t.lineTo(178,390+s);var c=Math.floor(72+s/(370/72)),l=1;for(l=1;l<c;l++){var u=390+s-l*(370/72);t.moveTo(178,u),l%12==0?t.lineTo(164,u):l%6==0?t.lineTo(171,u):l%3==0?t.lineTo(173,u):t.lineTo(175,u)}t.stroke(),t.restore()}(e,r,n),e.scale(1,-1),e.translate(0,-400-r.oy+10+Object(f.e)(n.heightAdjust())/2),e.translate(o.cx,0),e.strokeStyle=o.baseStroke,e.fillStyle=o.baseFill,e.lineCap="round",e.lineJoin="round"}},function(t,e,r){"use strict";r.d(e,"c",function(){return n}),r.d(e,"a",function(){return i}),r.d(e,"b",function(){return a});var u=r(3),o=r(1),f=r(0);function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var n=function(t){function NecktiePart(){var t;_classCallCheck(this,NecktiePart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(NecktiePart)).call.apply(t,[this,{layer:o.a.GENITALS,loc:"+neck",reflect:!1,aboveParts:["parts neck","parts torso","decorativeParts torso"],belowSameLayerParts:["torso"]},{offsetWidth:0,offsetHeight:-10,knotWidth:5,knotHeight:5,loopWidth:3,tongueTopWidth:4,tongueBotWidth:6,tongueHeight:15,tongueBotHeight:3,tongueRotation:0}].concat(r)))}return _inherits(NecktiePart,u["c"]),_createClass(NecktiePart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){var r={x:this.offsetWidth,y:t.neck.cusp.y+this.offsetHeight},n={};n.topLeft={x:r.x-this.knotWidth/2,y:r.y},n.topRight={x:r.x+this.knotWidth/2,y:r.y},n.left={x:n.topLeft.x,y:r.y-this.loopWidth/2},n.right={x:n.topRight.x,y:n.left.y},n.botLeft={x:r.x-this.tongueTopWidth/2,y:r.y-this.knotHeight},n.botRight={x:r.x+this.tongueTopWidth/2,y:n.botLeft.y};var o=Object(f.splitCurve)(Object(f.clamp)(.035*this.loopWidth,0,1),t.trapezius,t.collarbone),i=Object(f.extractPoint)(o.left.p2),a=o.left.p1;a.cp1=o.left.p2.cp2,a.cp2=o.left.p2.cp1;var s=Object(f.reflect)(a),c=Object(f.reflect)(i);s.cp1=Object(f.reflect)(a.cp1),s.cp2=Object(f.reflect)(a.cp2);var l={};l.bot={x:r.x,y:n.botRight.y-this.tongueHeight},l.left={x:r.x-this.tongueBotWidth/2,y:l.bot.y+this.tongueBotHeight},l.right={x:r.x+this.tongueBotWidth/2,y:l.left.y},Object(f.rotatePoints)(r,Object(f.rad)(this.tongueRotation),l.bot,l.left,l.right),u.a.simpleStrokeFill(e,t,this),e.beginPath(),Object(f.drawPoints)(e,n.topLeft,r,n.topRight,n.right,n.botRight,n.botLeft,n.left,n.topLeft);n.topLeft.cp1=Object(f.simpleQuadratic)(s,n.topLeft,.5,-1.5),c.cp1=Object(f.simpleQuadratic)(n.left,c,.5,1.5),Object(f.drawPoints)(e,c,s,n.topLeft,n.left,c),n.topRight.cp1=Object(f.simpleQuadratic)(a,n.topRight,.5,1.5),i.cp1=Object(f.simpleQuadratic)(n.right,i,.5,-1.5),Object(f.drawPoints)(e,i,a,n.topRight,n.right,i),Object(f.drawPoints)(e,n.botLeft,l.left,l.bot,l.right,n.botRight),e.fill()}}]),NecktiePart}(),i=function(t){function NeckAccessory(){var t;_classCallCheck(this,NeckAccessory);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(NeckAccessory)).call.apply(t,[this,{clothingLayer:u.a.Layer.MID}].concat(r)))}return _inherits(NeckAccessory,u["b"]),NeckAccessory}(),a=function(t){function NeckTie(){var t;_classCallCheck(this,NeckTie);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(NeckTie)).call.apply(t,[this].concat(r)))}return _inherits(NeckTie,i),_createClass(NeckTie,[{key:"fill",value:function fill(){return"#333"}},{key:"partPrototypes",get:function get(){return[{side:null,Part:n}]}}]),NeckTie}()},function(t,e,r){"use strict";r.d(e,"b",function(){return u}),r.d(e,"a",function(){return p});var o=r(1),n=r(2),a=r(0),i=r(16),s=r(9),c=r(6);function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var l=function(t){function Penis(){var t;_classCallCheck(this,Penis);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Penis)).call.apply(t,[this,{loc:"penis",layer:o.a.GENITALS,coverConceal:["groin","left leg"],aboveParts:["testicles"]}].concat(r)))}return _inherits(Penis,n["a"]),_createClass(Penis,[{key:"getLineWidth",value:function getLineWidth(t){return Object(a.clamp)(t.getDim("penisSize")/100,.8,1.5)}}]),Penis}(),u=function(t){function PenisHuman(){var t;_classCallCheck(this,PenisHuman);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(PenisHuman)).call.apply(t,[this].concat(r)))}return _inherits(PenisHuman,l),_createClass(PenisHuman,[{key:"stroke",value:function stroke(){return"inherit"}},{key:"calcDrawPoints",value:function calcDrawPoints(t,e,r){if(r){var n=t.penis={};n.center={x:0,y:t.groin.y+3},n.top={x:n.center.x+1+.01*e.penisThickness+.005*this.penisSize,y:n.center.y+.006*this.penisSize},n.bot={x:n.top.x-Object(a.clamp)(.5-.01*e.penisThickness-1e-4*this.penisSize,0,5),y:n.top.y-.1*this.penisSize},n.tip={x:n.center.x,y:n.bot.y-1-.01*this.penisSize},n.bot.cp1=Object(a.simpleQuadratic)(n.top,n.bot,.4,Object(a.clamp)(.5+.01*e.penisThickness-.002*this.penisSize,0,3)),n.tip.cp1={x:n.bot.x+.004*this.penisSize,y:n.bot.y-.005*this.penisSize},n.tip.cp2={x:n.tip.x+1,y:n.tip.y+.2}}var o=Object(a.reflect)(t.penis.bot),i=Object(a.reflect)(t.penis.top);return o.cp1=Object(a.reflect)(t.penis.tip.cp2),o.cp2=Object(a.reflect)(t.penis.tip.cp1),i.cp1=Object(a.reflect)(t.penis.bot.cp1),10<this.penisSize?[t.penis.top,t.penis.bot,t.penis.tip,o,i]:[]}}]),PenisHuman}(),f=function(t){function PenisHead(){var t;_classCallCheck(this,PenisHead);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(PenisHead)).call.apply(t,[this,{loc:"penis",layer:o.a.GENITALS,coverConceal:["groin","left leg"]}].concat(r)))}return _inherits(PenisHead,i["a"]),_createClass(PenisHead,[{key:"getLineWidth",value:function getLineWidth(t){return Object(a.clamp)(t.getDim("penisSize")/100,.8,1.5)}}]),PenisHead}(),p=function(t){function PenisHeadHuman(){var t;_classCallCheck(this,PenisHeadHuman);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(PenisHeadHuman)).call.apply(t,[this].concat(r)))}return _inherits(PenisHeadHuman,f),_createClass(PenisHeadHuman,[{key:"fill",value:function fill(t,e){return Object(s.b)(e.baseStroke,{l:-5,s:-5})}},{key:"stroke",value:function stroke(t,e){return Object(s.b)(e.baseStroke,{l:-5,s:-3})}},{key:"calcDrawPoints",value:function calcDrawPoints(t,e,r){if(e.arousal<50)return[];Object(c.h)("penis",t),r&&(t.penis.tiptop={x:t.penis.center.x,y:t.penis.bot.y+.003*this.penisSize});var n=Object(a.extractPoint)(t.penis.bot);n.cp1=Object(a.simpleQuadratic)(t.penis.tiptop,n,.5,.5);var o=Object(a.reflect)(t.penis.bot);return o.cp1=Object(a.reflect)(t.penis.tip.cp2),o.cp2=Object(a.reflect)(t.penis.tip.cp1),t.penis.tiptop.cp1=Object(a.simpleQuadratic)(o,t.penis.tiptop,.5,.5),[t.penis.tiptop,n,t.penis.tip,o,t.penis.tiptop]}}]),PenisHeadHuman}()},function(t,e,r){"use strict";r.d(e,"a",function(){return f});var n=r(5),o=r(1),i=r(2),P=r(0);function _toConsumableArray(t){return function _arrayWithoutHoles(t){if(Array.isArray(t)){for(var e=0,r=new Array(t.length);e<t.length;e++)r[e]=t[e];return r}}(t)||function _iterableToArray(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _slicedToArray(t,e){return function _arrayWithHoles(t){if(Array.isArray(t))return t}(t)||function _iterableToArrayLimit(t,e){var r=[],n=!0,o=!1,i=void 0;try{for(var a,s=t[Symbol.iterator]();!(n=(a=s.next()).done)&&(r.push(a.value),!e||r.length!==e);n=!0);}catch(t){o=!0,i=t}finally{try{n||null==s.return||s.return()}finally{if(o)throw i}}return r}(t,e)||function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var a=function(t){function LeftArmShading(){var t;_classCallCheck(this,LeftArmShading);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(LeftArmShading)).call.apply(t,[this,{loc:"left arm",layer:o.a.ARMS}].concat(r)))}return _inherits(LeftArmShading,n["a"]),_createClass(LeftArmShading,[{key:"fill",value:function fill(){return n.b}},{key:"calcDrawPoints",value:function calcDrawPoints(t){var e,r=[],n=_slicedToArray(Object(P.adjustPoints)(.07*this.armThickness,0,t.elbow.in,t.armpit),2),o=n[0],i=n[1];if(t.hand){var a=_slicedToArray(Object(P.adjustPoints)(.02*this.armThickness,0,t.wrist.in,t.thumb.out),2),s=a[0],c=a[1],l=Object(P.extractPoint)(t.thumb.tip);r.push(l,c,s)}else{var u=Object(P.extractPoint)(t.wrist.in);r.push(u)}t.breast?(e=Object(P.extractPoint)(t.breast.top)).cp1=Object(P.simpleQuadratic)(i,e,.5,-4):e=Object(P.extractPoint)(t.armpit);var f=Object(P.extractPoint)(t.armpit),p=Object(P.extractPoint)(t.elbow.in);p.cp1=Object(P.clone)(t.armpit.cp2),p.cp2=Object(P.clone)(t.armpit.cp1);var h=Object(P.extractPoint)(t.wrist.in);if(h.cp1=Object(P.clone)(t.elbow.in.cp2),h.cp2=Object(P.clone)(t.elbow.in.cp1),r.push(o,i,e,f,p,h),t.hand){var y=Object(P.extractPoint)(t.thumb.out);y.cp1=Object(P.clone)(t.wrist.in.cp2),y.cp2=Object(P.clone)(t.wrist.in.cp1);var b=Object(P.extractPoint)(t.thumb.tip);b.cp1=Object(P.clone)(t.thumb.out.cp2),b.cp2=Object(P.clone)(t.thumb.out.cp1),r.push(y,b);var d=Object(P.extractPoint)(t.hand.tip),g=Object(P.clone)(t.hand.palm);d.cp1=Object(P.adjust)(t.hand.palm.cp2,.01*this.handSize,0),d.cp2=Object(P.adjust)(t.hand.palm.cp1,.01*this.handSize,0),r.push(P.breakPoint,d,g,d,P.endPoint)}return r}}]),LeftArmShading}(),s=function(t){function LeftArmUnderShading(){var t;_classCallCheck(this,LeftArmUnderShading);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(LeftArmUnderShading)).call.apply(t,[this,{loc:"+left arm",layer:o.a.FRONT}].concat(r)))}return _inherits(LeftArmUnderShading,n["a"]),_createClass(LeftArmUnderShading,[{key:"calcDrawPoints",value:function calcDrawPoints(t){var e=[];if(t.hand){var r=Object(P.adjust)(t.hand.palm,-.5,-2),n=Object(P.adjust)(t.thumb.tip,-.5,-1.5);e.push.apply(e,[t.hand.tip,r,n].concat(_toConsumableArray(Object(P.adjustPoints)(-2,-1,t.thumb.out,t.wrist.in))))}else e.push(t.wrist.in);var o=Object(P.adjust)(t.elbow.in,-2,-1),i=Object(P.extractPoint)(t.armpit);return i.cp1=Object(P.adjust)(t.armpit.cp1,-1,-.5),i.cp2=Object(P.adjust)(t.armpit.cp2,-2,-.5),e.push(o,i),e.push(Object(P.extractPoint)(t.elbow.out),t.wrist.out),t.hand?e.push(t.hand.knuckle,t.hand.tip):e.push(Object(P.extractPoint)(t.wrist.in)),e}}]),LeftArmUnderShading}(),c=function(t){function RightArmShading(){var t;_classCallCheck(this,RightArmShading);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(RightArmShading)).call.apply(t,[this,{loc:"right arm",layer:o.a.ARMS}].concat(r)))}return _inherits(RightArmShading,n["a"]),_createClass(RightArmShading,[{key:"fill",value:function fill(){return n.b}},{key:"calcDrawPoints",value:function calcDrawPoints(t){var e=[],r=Object(P.extractPoint)(t.collarbone),n=_slicedToArray(Object(P.adjustPoints)(.05*-this.armThickness,0,t.deltoids,t.shoulder,t.elbow.out),3),o=n[0],i=n[1],a=n[2];if(e.push(r,o,i,a),t.hand){var s=Object(P.adjust)(t.wrist.out,.03*-this.armThickness,0),c=Object(P.adjust)(t.hand.knuckle,.02*-this.armThickness,0),l=Object(P.clone)(t.hand.tip);l.cp1=Object(P.adjust)(t.hand.tip.cp1,.02*-this.armThickness,0),e.push(s,c),t.hand.fist&&e.push(Object(P.adjust)(t.hand.fist,.02*-this.armThickness,1)),e.push(l),t.hand.fist?(e.push(Object(P.reverseDrawPoint)(t.hand.fist,t.hand.tip)),e.push(Object(P.reverseDrawPoint)(t.hand.knuckle,t.hand.fist))):e.push(Object(P.reverseDrawPoint)(t.hand.knuckle,t.hand.tip)),e.push(Object(P.reverseDrawPoint)(t.wrist.out,t.hand.knuckle))}else{var u=Object(P.extractPoint)(t.wrist.out);u.cp1={x:a.x,y:a.y},u.cp2={x:u.x-2,y:u.y},e.push(u)}var f=[];return f.push(Object(P.reverseDrawPoint)(t.elbow.out,t.wrist.out),Object(P.reverseDrawPoint)(t.elbow.out,t.elbow.out),Object(P.reverseDrawPoint)(t.shoulder,t.elbow.out)),t.deltoids?f.push(Object(P.reverseDrawPoint)(t.deltoids,t.shoulder),Object(P.reverseDrawPoint)(t.collarbone,t.deltoids)):f.push(Object(P.reverseDrawPoint)(t.collarbone,t.shoulder)),e.extend(P.adjustPoints.apply(void 0,[3,0].concat(f))),e}}]),RightArmShading}(),l=function(t){function RightArmUnderShading(){var t;_classCallCheck(this,RightArmUnderShading);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(RightArmUnderShading)).call.apply(t,[this,{loc:"+right arm",layer:o.a.FRONT}].concat(r)))}return _inherits(RightArmUnderShading,n["a"]),_createClass(RightArmUnderShading,[{key:"calcDrawPoints",value:function calcDrawPoints(t){var e=[t.collarbone].concat(_toConsumableArray(Object(P.adjustPoints)(3,-1,t.deltoids,t.shoulder,t.elbow.out)));if(t.hand)e.push.apply(e,_toConsumableArray(Object(P.adjustPoints)(1.5,-.7,t.wrist.out,t.hand.knuckle,t.hand.tip))),e.push.apply(e,_toConsumableArray(Object(P.adjustPoints)(2.2,-.9,t.hand.palm,t.thumb.tip,t.thumb.out)).concat([Object(P.extractPoint)(t.wrist.out)]));else{var r=Object(P.extractPoint)(t.wrist.out);e.push(r)}return e.push(Object(P.extractPoint)(t.elbow.in),Object(P.extractPoint)(t.collarbone)),e}}]),RightArmUnderShading}(),u=function(t){function Arm(){var t;_classCallCheck(this,Arm);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Arm)).call.apply(t,[this,{loc:"arm",layer:o.a.ARMS,childParts:["hand"],aboveParts:["leg","torso"],shadingParts:[a,s,c,l]}].concat(r)))}return _inherits(Arm,i["a"]),_createClass(Arm,[{key:"clipStroke",value:function clipStroke(){}},{key:"clipFill",value:function clipFill(){}}]),Arm}(),f=function(t){function ArmHuman(){var t;_classCallCheck(this,ArmHuman);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(ArmHuman)).call.apply(t,[this].concat(r)))}return _inherits(ArmHuman,u),_createClass(ArmHuman,[{key:"calcDrawPoints",value:function calcDrawPoints(t,e,r){if(r){var n=t.wrist={},o=t.armpit={x:t.collarbone.x-.03*this.upperMuscle,y:t.collarbone.y-.27*this.torsoLength-.1*this.upperMuscle},i=t.shoulder={x:t.collarbone.x+.2*this.upperMuscle+.1*this.armThickness,y:t.collarbone.y-10-.1*this.upperMuscle};i.cp1={x:i.x,y:t.collarbone.y-3},i.cp2={x:i.x-.5+.02*this.upperMuscle,y:i.y+4};var a=t.elbow={};if(a.out={x:o.x+5+.17*this.upperMuscle+.05*this.armThickness,y:i.y-.45*this.armLength},n.out={x:o.x+10+.01*this.upperMuscle+.035*this.armThickness,y:a.out.y-.5*this.armLength,cp1:{x:a.out.x,y:a.out.y-2}},n.out.cp2={x:n.out.x-.5,y:n.out.y+3},n.in={x:o.x+9,y:n.out.y-1},a.in={x:a.out.x-3-.07*this.upperMuscle-.05*this.armThickness,y:a.out.y+2,cp1:{x:n.in.x-1,y:n.in.y+7}},a.in.cp2={x:a.in.x+.5,y:a.in.y-7},t.armpit.cp1={x:a.in.x-.5,y:a.in.y+2},t.armpit.cp2={x:t.armpit.x,y:t.armpit.y-2},10<this.upperMuscle){var s=this.upperMuscle-10,c=t.deltoids={x:i.x-.12*s,y:i.y-.2*s};c.cp1=Object(P.extractPoint)(i.cp1),c.cp2=Object(P.extractPoint)(i.cp2),c.cp1.x+=.03*s,c.cp2.x+=.05*s;var l=Object(P.splitCurve)(.85,t.collarbone,t.deltoids);(i=t.shoulder=l.right.p1).cp1=l.right.p2.cp2,i.cp2=l.right.p2.cp1,a.out.cp1={x:i.x+.08*s,y:i.y-.1*s},a.out.cp2={x:a.out.x,y:a.out.y+.07*s},o.cp1.x-=.15*s,o.cp1.y+=.1*s,o.cp2.x-=.02*s,o.cp2.y-=.1*s,a.in.cp2.x-=.15*s,a.in.cp2.y-=.05*s,a.in.cp1.y+=.1*s,n.out.cp1.x+=.1*s,n.out.cp1.y-=.1*s,n.out.cp2.x+=.1*s,n.out.cp2.y+=.1*s,n.in.x-=.03*s}if(Object(P.rotatePoints)(a.in,e.armRotation*Math.PI/180,a.in,a.out,n.in,n.out),a.in.x-=.02*Math.abs(e.armRotation),a.in.y-=.01*e.armRotation,e.armRotation<-20){var u=-20-e.armRotation;a.in.x-=.05*u,a.in.y-=.17*u}}return[t.collarbone,t.deltoids,t.shoulder,t.elbow.out,t.wrist.out,{child:"hand"},t.wrist.in,t.elbow.in,t.armpit]}}]),ArmHuman}()},function(t,e,r){"use strict";r.d(e,"a",function(){return a});var o=r(1),n=r(2),l=r(0),u=r(6),f=r(9);function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var i=function(t){function Hand(){var t;_classCallCheck(this,Hand);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Hand)).call.apply(t,[this,{loc:"hand",layer:o.a.ARMS}].concat(r)))}return _inherits(Hand,n["a"]),Hand}(),a=function(t){function HandHuman(){var t;_classCallCheck(this,HandHuman);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(HandHuman)).call.apply(t,[this].concat(r)))}return _inherits(HandHuman,i),function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}(HandHuman,[{key:"calcDrawPoints",value:function calcDrawPoints(t,e,r){if(Object(u.h)("wrist",t),r){var n=t.hand={},o=t.thumb={},i=t.wrist.out,a=.1*this.handSize+.04*this.upperMuscle;if(n.knuckle={x:i.x+.15*a,y:i.y-.6*a},n.tip={x:i.x+.1*a,y:n.knuckle.y-2-.6*a},n.tip.cp1=Object(u.a)(n.knuckle,n.tip,.7,1,-.2),n.palm={x:.65*i.x+.35*t.wrist.in.x,y:n.knuckle.y-.1*a,cp1:{x:n.tip.x-.5-.15*a,y:n.tip.y+.1*a}},n.palm.cp2={x:n.palm.x+1+.2*a,y:n.palm.y-1-.2*a},o.tip={x:n.palm.x-.03*a,y:n.palm.y-1-.25*a,cp1:{x:n.palm.x-.1*a,y:n.palm.y-.1*a}},o.tip.cp2={x:o.tip.x+.1*a,y:o.tip.y+.1*a},o.out={x:t.wrist.in.x+.1,y:t.wrist.in.y-.2*a,cp1:{x:o.tip.x-.15*a,y:o.tip.y+.2*a}},o.out.cp2={x:o.out.x-.05*a,y:o.out.y-.2*a},Object(l.rotatePoints)(i,(e.armRotation+e.handRotation)*Math.PI/180,n.knuckle,n.tip,n.palm,o.tip,o.out),12<this.upperMuscle){var s=this.upperMuscle-12;n.knuckle.y-=.05*s,o.tip=Object(l.adjust)(o.tip,.03*-s,.05*s),n.tip.y+=.05*s,o.out.cp1.x-=.05*s,o.out.cp2.x-=.02*s,Object(l.rotatePoints)(n.knuckle,.035*-s,n.tip,n.palm);var c=Object(l.splitCurve)(.6,n.knuckle,n.tip);n.fist=c.left.p2,n.tip.cp1=c.right.p2.cp1,Object(l.rotatePoints)(n.fist,.05*-s,n.tip,n.palm.cp1,n.palm.cp2),n.palm.x-=.07*s,25<this.upperMuscle&&(n.tip=Object(l.extractPoint)(o.tip),n.palm=Object(l.extractPoint)(n.palm),o.out=Object(l.extractPoint)(o.out),o.knuckle=Object(f.c)(o.tip,o.out),o.knuckle.x-=.06*s),Object(l.rotatePoints)(i,.01*-s,n.tip,n.first,n.palm,o.tip,o.knuckle)}}return[t.wrist.out,t.hand.knuckle,t.hand.fist,t.hand.tip,t.hand.palm,t.thumb.tip,t.thumb.knuckle,t.thumb.out,t.wrist.in]}}]),HandHuman}()},function(t,e,r){"use strict";r.d(e,"a",function(){return f});var n=r(5),o=r(1),i=r(2),h=r(0),u=r(9),y=r(12);function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var a=function(t){function RightLegShading(){var t;_classCallCheck(this,RightLegShading);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(RightLegShading)).call.apply(t,[this,{loc:"right leg",layer:o.a.FRONT}].concat(r)))}return _inherits(RightLegShading,n["a"]),_createClass(RightLegShading,[{key:"fill",value:function fill(){return n.b}},{key:"calcDrawPoints",value:function calcDrawPoints(t){var e=Object(h.adjust)(t.hip,-3-.04*this.hipWidth,0),r=Object(h.adjust)(t.thigh.out,-7-.2*this.legFullness,0),n=Object(u.c)(t.knee.out,t.knee.in);n.cp1=Object(h.continueCurve)(e,r,1),n.cp2={x:n.x+5,y:n.y};var o=Object(h.splitCurve)(.5,r,n).left.p2;n.cp1={x:o.x,y:o.y-3};var i={x:.7*n.x+.3*t.knee.out.x,y:n.y-2};i.cp1={x:n.x-2,y:n.y-2};var a=Object(h.adjust)(t.calf.out,-6-.1*this.legFullness,0);a.cp1={x:i.x+1,y:i.y-5};var s=Object(h.adjust)(t.ankle.out,-2,3);s.cp1=Object(h.continueCurve)(i,a);var c={x:t.ankle.out.x+20,y:t.ankle.out.y},l={x:t.hip.x+20,y:t.hip.y};return[e,r,o,n,i,a,s,Object(h.extractPoint)(t.ankle.out),c,l,e]}}]),RightLegShading}(),s=function(t){function LeftLegShading(){var t;_classCallCheck(this,LeftLegShading);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(LeftLegShading)).call.apply(t,[this,{loc:"left leg",layer:o.a.FRONT}].concat(r)))}return _inherits(LeftLegShading,n["a"]),_createClass(LeftLegShading,[{key:"fill",value:function fill(){return n.b}},{key:"calcDrawPoints",value:function calcDrawPoints(t){var e=Object(h.adjust)(t.ankle.in,3,2),r=Object(h.adjust)(t.calf.in,10-.15*this.legFem,0);r.cp1.x-=5;var n={x:.7*t.knee.in.x+.3*t.knee.out.x,y:t.knee.in.y-3};n.cp1=Object(h.continueCurve)(e,r),n.cp2={x:n.x+5,y:n.y-2};var o=Object(h.adjust)(t.knee.intop,3,2);o.cp1={x:n.x-3,y:n.y+3},o.cp2={x:o.x-1,y:o.y-2};var i=Object(h.splitCurve)(.8,t.thigh.top,t.thigh.fold).left.p2;i.cp1=Object(h.simpleQuadratic)(o,i,.5,2);var a={x:t.knee.in.x-2,y:t.knee.in.y};a.cp1=Object(h.simpleQuadratic)(i,a,.35,-8-.3*this.legFullness-.1*this.legFem);var s=Object(h.extractPoint)(t.ankle.in);return s.cp1={x:t.calf.in.x-3,y:t.calf.in.y},[s,e,r,n,o,i,a,s]}}]),LeftLegShading}(),c=function(t){function ThighShading(){var t;_classCallCheck(this,ThighShading);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(ThighShading)).call.apply(t,[this,{loc:"+left leg",layer:o.a.FRONT,reflect:!0}].concat(r)))}return _inherits(ThighShading,n["a"]),_createClass(ThighShading,[{key:"calcDrawPoints",value:function calcDrawPoints(t){var e=Object(h.clone)(t.thigh.fold),r=Object(h.splitCurve)(.85,t.thigh.in,t.thigh.top),n=r.left.p2,o=r.right.p2;return n.cp1=Object(h.clone)(e.cp1),e.cp1.x-=1,e.cp1.y+=1,n.cp1.x+=.5,n.cp1.y-=.5,[o,e,n,o]}}]),ThighShading}(),l=function(t){function Leg(){var t;_classCallCheck(this,Leg);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Leg)).call.apply(t,[this,{loc:"leg",layer:o.a.FRONT,childParts:["feet"],shadingParts:[a,s,c]}].concat(r)))}return _inherits(Leg,i["a"]),Leg}(),f=function(t){function LegHuman(){var t;_classCallCheck(this,LegHuman);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(LegHuman)).call.apply(t,[this].concat(r)))}return _inherits(LegHuman,l),_createClass(LegHuman,[{key:"calcDrawPoints",value:function calcDrawPoints(t,e,r){if(r){var n=.01*this.legLength,o=t.knee={};o.out={x:12-Object(h.clamp)(.3*this.legFem,0,9)+.04*this.hipWidth+.03*this.legFullness,y:.5*this.legLength,cp1:{x:t.hip.x+.1*this.legFem+.15*this.buttFullness+.1*this.legFullness-.05*this.lowerMuscle,y:t.hip.y-7-.1*this.legFem-.1*this.buttFullness-.1*this.legFullness}},o.out.cp2={x:o.out.x+4+.1*this.legFem-.05*this.lowerMuscle,y:o.out.y+.25*this.legLength};var i=this.lowerMuscle-10,a=this.legFem<25&&0<i;a&&(o.out.cp1.x+=.05*i,o.out.cp1.y-=.05*i,o.out.cp2.x+=.2*i,o.out.cp2.y+=.5*i,t.hip.cp2.x+=.03*i);var s=Object(h.splitCurve)(.55,t.hip,o.out),c=t.thigh=t.thigh||{};c.out=s.left.p2,o.out=s.right.p2,t.ankle=t.ankle||{},t.ankle.out={x:o.out.x-.5-.05*this.legFullness,y:8};var l=t.calf=t.calf||{};l.out={x:o.out.x+(Object(h.clamp)(.1*this.legFem,0,3)+Object(h.clamp)(.005*this.legFullness,0,3))*n,y:o.out.y-.2*this.legLength+.1*this.lowerMuscle,cp1:{x:o.out.x,y:o.out.y-.1*this.legLength+Object(h.clamp)(.05*this.legFem,0,6)}},l.out.cp2={x:l.out.x,y:l.out.y+.1*this.legLength},t.ankle.out.cp1={x:l.out.x,y:l.out.y-.12*this.legLength},t.ankle.out.cp2={x:t.ankle.out.x-1,y:t.ankle.out.y+5},t.ankle.in={x:t.ankle.out.x-5+.02*this.legFem,y:t.ankle.out.y+.5},l.in={x:l.out.x-9+.015*this.legFem-.05*this.legFullness,y:l.out.y-.1*this.legFem};var u=15-this.legFem;0<u?l.in.x-=.02*u:l.in.x+=.02*this.legFem,l.in.cp1={x:t.ankle.in.x+.5,y:t.ankle.in.y+(1.3-.03*this.legFem)*this.legLength*.1},l.in.cp2={x:l.in.x+.02*this.legFem,y:l.in.y+(.01*this.legFem-1)*this.legLength*.1},0<u&&(l.in.cp2.x+=.01*u),o.in={x:o.out.x-8-.05*this.legFullness,y:o.out.y},o.in.cp1=Object(h.continueCurve)(t.ankle.in,l.in,.7),o.intop={x:o.in.x+.2-.01*this.legFem,y:o.in.y+3},a&&(o.in.x-=.04*i,o.intop.x-=.04*i),o.in.cp2={x:o.in.x,y:o.in.y-.09*this.legLength},c.top={x:1.6,y:t.hip.y-.15*this.legLength,cp1:{x:o.in.x,y:o.in.y+.07*this.legLength}},c.top.cp2={x:2-.03*this.buttFullness-.04*this.legFem,y:c.top.y-.12*this.legLength},a&&(o.in.cp2.x-=.01*i,o.in.cp2.y+=.05*i,o.in.cp1.x-=.1*i,l.in.x-=.1*i,l.in.y+=.1*i,l.in.cp2.x-=.1*i,l.out.x+=.05*i,l.out.cp2.x+=.05*i,l.out.cp1.x+=.02*i,l.out.cp1.y+=.1*i,c.top.cp2.x-=.08*i,c.top.cp2.y-=.08*i,c.top.cp1.y+=.2*i),s=Object(h.splitCurve)(.55,o.in,c.top),c.in=s.left.p2,c.top=s.right.p2;var f=Object(y.a)(c.top,t.hip),p=Object(h.clamp)(this.legFem/55-this.lowerMuscle/150-.1,0,1);s=Object(h.splitCurve)(p,c.top,f),c.fold=s.left.p2}return[Object(h.extractPoint)(t.hip),t.thigh.out,t.knee.out,t.calf.out,t.ankle.out,{child:"feet"},t.ankle.in,t.calf.in,t.knee.in,t.knee.intop,t.thigh.in,t.thigh.top]}}]),LegHuman}()},function(t,e,r){"use strict";r.d(e,"a",function(){return p}),r.d(e,"b",function(){return h});var n=r(5),o=r(1),i=r(2),l=r(0),u=r(11);function _slicedToArray(t,e){return function _arrayWithHoles(t){if(Array.isArray(t))return t}(t)||function _iterableToArrayLimit(t,e){var r=[],n=!0,o=!1,i=void 0;try{for(var a,s=t[Symbol.iterator]();!(n=(a=s.next()).done)&&(r.push(a.value),!e||r.length!==e);n=!0);}catch(t){o=!0,i=t}finally{try{n||null==s.return||s.return()}finally{if(o)throw i}}return r}(t,e)||function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var a=function(t){function LeftBreastShading(){var t;_classCallCheck(this,LeftBreastShading);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(LeftBreastShading)).call.apply(t,[this,{loc:"chest",layer:o.a.GENITALS,forcedSide:i.b.LEFT}].concat(r)))}return _inherits(LeftBreastShading,n["a"]),_createClass(LeftBreastShading,[{key:"fill",value:function fill(){return n.b}},{key:"calcDrawPoints",value:function calcDrawPoints(t){if(!1===t.hasOwnProperty("breast"))return[];var e={x:t.breast.cleavage.x+.5,y:t.breast.cleavage.y+.4*this.breastSize},r=Object(l.extractPoint)(t.breast.bot);return e.cp1=Object(l.continueCurve)(t.breast.in,t.breast.cleavage),r.cp1={x:e.x,y:.3*e.y+.7*r.y},r.cp2={x:r.x-6+.32*this.breastSize,y:r.y+7},[r,t.breast.in,t.breast.cleavage,e,r]}}]),LeftBreastShading}(),s=function(t){function LeftBreastUnderShading(){var t;_classCallCheck(this,LeftBreastUnderShading);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(LeftBreastUnderShading)).call.apply(t,[this,{loc:"+chest",layer:o.a.FRONT,forcedSide:i.b.LEFT}].concat(r)))}return _inherits(LeftBreastUnderShading,n["a"]),_createClass(LeftBreastUnderShading,[{key:"calcDrawPoints",value:function calcDrawPoints(t){if(!1===t.hasOwnProperty("breast"))return[];var e={x:t.breast.cleavage.x+.5,y:t.breast.cleavage.y+.4*this.breastSize},r=Object(l.extractPoint)(t.breast.bot);e.cp1=Object(l.continueCurve)(t.breast.in,t.breast.cleavage);var n=Object(l.extractPoint)(t.breast.cleavage);return n.x-=.05*this.breastSize,n.y-=.02*this.breastSize,n.cp1={x:1*e.x+0*n.x,y:e.y-.02*this.breastSize},n.cp2={x:n.x,y:.5*n.y+.5*e.y},r.cp1={x:n.x-.02*this.breastSize,y:n.y-.3*this.breastSize-5},r.cp2={x:r.x-2-.05*this.breastSize,y:r.y-2-.03*this.breastSize},[r,t.breast.in,t.breast.cleavage,e,n,r]}}]),LeftBreastUnderShading}(),c=function(t){function RightBreastShading(){var t;_classCallCheck(this,RightBreastShading);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(RightBreastShading)).call.apply(t,[this,{loc:"chest",layer:o.a.GENITALS,forcedSide:i.b.RIGHT}].concat(r)))}return _inherits(RightBreastShading,n["a"]),_createClass(RightBreastShading,[{key:"fill",value:function fill(){return n.b}},{key:"calcDrawPoints",value:function calcDrawPoints(t){if(!1===t.hasOwnProperty("breast"))return[];var e=Object(l.extractPoint)(t.breast.bot),r=_slicedToArray(Object(l.adjustPoints)(.25*-this.breastSize,0,t.breast.tip,t.breast.bot.cp1,t.breast.bot.cp2),3),n=r[0],o=r[1],i=r[2];e.cp1=o,e.cp2=i;var a=_slicedToArray(Object(l.adjustPoints)(.1*this.breastSize,.12*-this.breastSize,Object(l.reverseDrawPoint)(t.breast.tip,t.breast.bot),Object(l.reverseDrawPoint)(t.breast.top,t.breast.tip)),2),s=a[0],c=a[1];return c.x=t.breast.top.x,c.y=t.breast.top.y,[t.breast.top,n,e,s,c]}}]),RightBreastShading}(),f=function(t){function Chest(){var t;_classCallCheck(this,Chest);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Chest)).call.apply(t,[this,{loc:"chest",reflect:!0,layer:o.a.GENITALS,aboveParts:["parts torso","decorativeParts torso","arm"]}].concat(r)))}return _inherits(Chest,i["a"]),Chest}(),p=function(t){function ChestHuman(){var t;_classCallCheck(this,ChestHuman);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(ChestHuman)).call.apply(t,[this,{shadingParts:[a,s,c]}].concat(r)))}return _inherits(ChestHuman,f),_createClass(ChestHuman,[{key:"calcDrawPoints",value:function calcDrawPoints(t,e,r){if(this.breastSize<0)return[];if(r){var n=t.breast={},o=this.breastSize-10;n.top={x:t.armpit.x-2.2+.02*this.breastSize,y:t.armpit.y+.5+.023*this.height-.05*this.breastSize},this.breastSize<10&&(n.top.x+=.1*o);var i=.006*Math.pow(Object(l.clamp)(o-e.breastPerkiness,0,100),2);n.center={x:t.armpit.x-3+.02*o+.02*i,y:n.top.y-6-.03*o-i+.02*e.breastPerkiness},o=Math.max(0,o),n.tip={x:n.center.x+3.3+.07*o+.04*e.breastPerkiness,y:n.center.y+.07*e.breastPerkiness,cp1:{x:n.top.x+2+.07*o-.5*i,y:n.top.y-3+Object(l.clamp)(.15*e.breastPerkiness,-4,4)-.7*i}},n.tip.cp2={x:n.tip.x-.1*i,y:n.tip.y+2+.07*o},n.bot={x:n.center.x-1.5+.01*o,y:n.center.y-3.8-.08*o-.05*i+.08*e.breastPerkiness},n.bot.cp1=Object(l.continueCurve)(n.top,n.tip,Object(l.clamp)(.6+.05*i,0,1)),n.bot.cp2={x:n.bot.x+3.5+.05*o,y:n.bot.y},n.cleavage={x:.5,y:n.tip.y},n.cleavage.cp1=Object(l.continueCurve)(n.tip,n.bot),n.cleavage.cp2={x:n.cleavage.x,y:n.cleavage.y-2.5-.05*o};var a=Object(l.splitCurve)(Object(l.clamp)((o+5)/30,0,1),n.bot,n.cleavage);n.in=a.left.p2,n.cleavage=a.right.p2}var s=Object(l.splitCurve)(Object(l.clamp)(1-this.breastSize/10,0,1),t.breast.top,t.breast.tip),c=s.right.p1;return t.breast.tip=s.right.p2,t.breast.top=Object(u.connectEndPoints)(t.breast.cleavage,c),[l.breakPoint,c,t.breast.tip,t.breast.bot,t.breast.in,t.breast.cleavage,t.breast.top]}}]),ChestHuman}(),h=function(t){function NipplesHuman(){var t;_classCallCheck(this,NipplesHuman);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(NipplesHuman)).call.apply(t,[this,{fill:l.none,loc:"+chest",aboveParts:["parts chest","decorativeParts chest"]}].concat(r)))}return _inherits(NipplesHuman,f),_createClass(NipplesHuman,[{key:"strokeClip",value:function strokeClip(){}},{key:"stroke",value:function stroke(t,e){return e.baseLipColor}},{key:"getLineWidth",value:function getLineWidth(t){return.05*t.dim.breastSize+.1*t.dim.areolaSize}},{key:"calcDrawPoints",value:function calcDrawPoints(t,e,r){return t.chest=t.chest||{},r&&(t.breast?t.chest.nipples={x:t.breast.center.x-1.5+.03*this.breastSize,y:t.breast.tip.y-.03*this.breastSize+.1*e.breastPerkiness}:t.chest.nipples={x:t.armpit.x-5-.08*this.upperMuscle,y:t.armpit.y-3}),[l.breakPoint,t.chest.nipples]}}]),NipplesHuman}()},function(t,e,r){"use strict";r.d(e,"a",function(){return c}),r.d(e,"b",function(){return l});var o=r(1),n=r(2),i=r(6),a=r(25);function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var s=function(t){function Feet(){var t;_classCallCheck(this,Feet);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Feet)).call.apply(t,[this,{loc:"feet",layer:o.a.FRONT}].concat(r)))}return _inherits(Feet,n["a"]),Feet}(),c=function(t){function FeetHuman(){var t;_classCallCheck(this,FeetHuman);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(FeetHuman)).call.apply(t,[this].concat(r)))}return _inherits(FeetHuman,s),_createClass(FeetHuman,[{key:"calcDrawPoints",value:function calcDrawPoints(t,e,r){if(r){t.ankle.outbot={x:t.ankle.out.x+.2,y:t.ankle.out.y-2.5},t.ankle.outbot.cp1=Object(i.a)(t.ankle.out,t.ankle.outbot,.5,.5,.5);var n=t.toe=t.toe||{};n.center={x:.5*t.ankle.out.x+.5*t.ankle.in.x,y:1+.02*this.legFem-.1*e.feetLength},n.out={x:n.center.x+4-.04*this.legFem+.1*e.feetWidth,y:n.center.y,cp1:{x:t.ankle.outbot.x,y:t.ankle.outbot.y}},n.out.cp2={x:n.out.x+.02*this.legFem,y:n.out.y+1},n.in={x:n.center.x-3.3-.02*this.legFem-.1*e.feetWidth,y:n.out.y-2-.1*e.feetLength},n.in.cp1={x:n.out.x+1,y:n.out.y-1-.1*e.feetBias*(n.out.y-n.in.y)},n.in.cp2={x:n.in.x+2.5,y:n.in.y-.5-.02*this.legFem},t.ankle.inbot={x:n.center.x-4+.03*this.legFem,y:t.ankle.outbot.y-.5+.03*this.legFem,cp1:{x:n.in.x-1.5,y:n.in.y+1.5}},t.ankle.inbot.cp2={x:t.ankle.inbot.x+1,y:t.ankle.inbot.y-2},t.ankle.in.cp1=Object(i.a)(t.ankle.inbot,t.ankle.in,.3,-.5,.5)}return[t.ankle.outbot,t.toe.out,t.toe.in,t.ankle.inbot]}}]),FeetHuman}(),l=function(t){function HoofHorse(){var t;_classCallCheck(this,HoofHorse);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(HoofHorse)).call.apply(t,[this,{uncoverable:!0}].concat(r)))}return _inherits(HoofHorse,s),_createClass(HoofHorse,[{key:"stroke",value:function stroke(){return a.a.brownFur.stroke}},{key:"fill",value:function fill(){return a.a.brownFur.fill}},{key:"calcDrawPoints",value:function calcDrawPoints(t,e,r){return r&&(t.ankle.outbot={x:t.ankle.out.x+.2,y:t.ankle.out.y-2.5},t.ankle.outbot.cp1=Object(i.a)(t.ankle.out,t.ankle.outbot,.5,.5,.5),t.toe=t.toe||{},t.toe.out={x:t.ankle.outbot.x+3-.07*this.legFem,y:1+.02*this.legFem,cp1:{x:t.ankle.outbot.x,y:t.ankle.outbot.y}},t.toe.out.cp2={x:t.toe.out.x+.02*this.legFem,y:t.toe.out.y+1},t.toe.in={x:t.toe.out.x-7+.05*this.legFem,y:t.toe.out.y-2,cp1:{x:t.toe.out.x+1,y:t.toe.out.y-1}},t.toe.in.cp2={x:t.toe.in.x+2.5,y:t.toe.in.y-.5-.02*this.legFem},t.ankle.inbot={x:t.toe.in.x-.5+.02*this.legFem,y:t.ankle.outbot.y-.5+.03*this.legFem,cp1:{x:t.toe.in.x-1.5,y:t.toe.in.y+1.5}},t.ankle.inbot.cp2={x:t.ankle.inbot.x+1,y:t.ankle.inbot.y-2},t.ankle.in.cp1=Object(i.a)(t.ankle.inbot,t.ankle.in,.3,-.5,.5)),[t.ankle.outbot,t.toe.out,t.toe.in,t.ankle.inbot]}}]),HoofHorse}()},function(t,e,r){"use strict";r.d(e,"b",function(){return c}),r.d(e,"a",function(){return l});var n=r(13),o=r(9),i=r(1),a=r(0);function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var s=function(t){function Ears(){var t;_classCallCheck(this,Ears);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Ears)).call.apply(t,[this,{loc:"ears",layer:i.a.BELOW_HAIR,belowParts:["parts head"]}].concat(r)))}return _inherits(Ears,n["a"]),_createClass(Ears,[{key:"clipFill",value:function clipFill(){}},{key:"clipStroke",value:function clipStroke(){}},{key:"fill",value:function fill(t,e){return Object(o.b)(e.baseFill,{s:-18,l:-2})}},{key:"getLineWidth",value:function getLineWidth(t){return Object(a.clamp)(1.7-.05*t.dim.faceFem,.7,1.5)}}]),Ears}(),c=function(t){function EarsHuman(){var t;_classCallCheck(this,EarsHuman);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(EarsHuman)).call.apply(t,[this].concat(r)))}return _inherits(EarsHuman,s),_createClass(EarsHuman,[{key:"calcDrawPoints",value:function calcDrawPoints(t,e,r){if(r){var n=t.ear={};n.top=Object(a.extractPoint)(t.skull.side),n.bot=Object(a.extractPoint)(t.skull.bot),n.mid={x:n.top.x+.6,y:.4*n.top.y+.6*n.bot.y},n.mid.cp1={x:n.top.x+1.5,y:n.top.y+.5},n.mid.cp2={x:n.mid.x+.5,y:n.mid.y+.9},n.bot.cp1={x:n.mid.x,y:n.mid.y-.7},n.bot.cp2={x:n.bot.x+.6,y:n.bot.y-.1}}return[t.ear.top,t.ear.mid,t.ear.bot]}}]),EarsHuman}(),l=function(t){function EarsElf(){var t;_classCallCheck(this,EarsElf);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(EarsElf)).call.apply(t,[this].concat(r)))}return _inherits(EarsElf,s),_createClass(EarsElf,[{key:"calcDrawPoints",value:function calcDrawPoints(t,e,r){if(r){var n=t.ear={};n.top=Object(a.extractPoint)(t.skull.side);var o=Object(a.splitCurve)(.3,t.skull.side,t.skull.bot);n.bot=o.left.p2,n.mid={x:n.top.x+6+e.earlobeLength,y:n.top.y+.5},n.mid.cp1=Object(a.simpleQuadratic)(n.top,n.mid,.3,1),n.bot.cp1={x:n.mid.x-2,y:n.mid.y-2},n.bot.cp2={x:n.bot.x+2,y:n.bot.y+4}}return[t.ear.top,t.ear.mid,t.ear.bot]}}]),EarsElf}()},function(t,e,r){"use strict";r.d(e,"a",function(){return i});var n=r(13),a=(r(2),r(0));function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var o=function(t){function Eyes(){var t;_classCallCheck(this,Eyes);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Eyes)).call.apply(t,[this,{loc:"eyes",aboveParts:["parts head"]}].concat(r)))}return _inherits(Eyes,n["a"]),Eyes}(),i=function(t){function EyesHuman(){var t;_classCallCheck(this,EyesHuman);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(EyesHuman)).call.apply(t,[this].concat(r)))}return _inherits(EyesHuman,o),function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}(EyesHuman,[{key:"fill",value:function fill(){return"white"}},{key:"calcDrawPoints",value:function calcDrawPoints(t,e,r){if(r){var n=.1*this.faceLength,o=t.eyes={};o.center={x:.04469*this.faceWidth-.01*e.eyeCloseness+.005*this.eyeSize+.04*e.eyeWidth,y:t.skull.y-.42*n+.1*e.eyeHeight},o.in={x:o.center.x-1.7-.005*this.eyeSize-.04*e.eyeWidth,y:o.center.y-.5},o.out={x:o.in.x+3.5+.015*this.eyeSize+.1*e.eyeWidth,y:o.in.y+.3};var i=o.out.x-o.in.x;o.top={x:o.in.x+.4*i+.008*this.faceFem,y:o.in.y+1+.015*this.eyeSize+.1*e.eyeTopSize,cp1:{x:o.in.x+.1*i,y:o.in.y+Object(a.clamp)(.9-.015*this.faceFem,.4,2)+.01*this.eyeSize}},o.top.cp2={x:o.top.x-.2*i-.05*e.eyeTopSize,y:o.top.y},o.top=Object(a.adjust)(o.top,.1*e.eyeBias,0),o.out.cp1={x:o.top.x+.2*i,y:o.top.y},o.out.cp2={x:o.out.x-.1*i+.01*this.eyeSize,y:o.out.y+.5+.01*this.eyeSize},o.in.cp1={x:o.out.x-i*Object(a.clamp)(.3-.03*e.eyeBotBias,0,1),y:o.out.y-.7-.02*this.eyeSize-.1*e.eyeBotSize},o.in.cp2={x:o.in.x+i*Object(a.clamp)(.2+.02*e.eyeBotBias,0,1),y:o.in.y},Object(a.rotatePoints)(o.center,e.eyeTilt*Math.PI/180,o.top,o.out,o.in)}return[t.eyes.in,t.eyes.top,t.eyes.out,t.eyes.in]}}]),EyesHuman}()},function(t,e,r){"use strict";r.d(e,"a",function(){return a});var n=r(13),o=r(0);function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var i=function(t){function Pupil(){var t;_classCallCheck(this,Pupil);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Pupil)).call.apply(t,[this,{loc:"pupil",aboveParts:["iris"]}].concat(r)))}return _inherits(Pupil,n["a"]),Pupil}(),a=function(t){function PupilHuman(){var t;_classCallCheck(this,PupilHuman);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(PupilHuman)).call.apply(t,[this].concat(r)))}return _inherits(PupilHuman,i),function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}(PupilHuman,[{key:"stroke",value:function stroke(){return"#000"}},{key:"clipStroke",value:function clipStroke(t){return[t.eyes.in,t.eyes.top,t.eyes.out,t.eyes.in]}},{key:"getLineWidth",value:function getLineWidth(t){return.1*t.Mods.pupilSize}},{key:"calcDrawPoints",value:function calcDrawPoints(t,e){return[o.breakPoint,t.eyes.iris]}}]),PupilHuman}()},function(t,e,r){"use strict";r.d(e,"a",function(){return a});var n=r(13),o=r(0);function _toConsumableArray(t){return function _arrayWithoutHoles(t){if(Array.isArray(t)){for(var e=0,r=new Array(t.length);e<t.length;e++)r[e]=t[e];return r}}(t)||function _iterableToArray(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var i=function(t){function Iris(){var t;_classCallCheck(this,Iris);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Iris)).call.apply(t,[this,{loc:"iris",aboveParts:["eyes"]}].concat(r)))}return _inherits(Iris,n["a"]),Iris}(),a=function(t){function IrisHuman(){var t;_classCallCheck(this,IrisHuman);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(IrisHuman)).call.apply(t,[this].concat(r)))}return _inherits(IrisHuman,i),function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}(IrisHuman,[{key:"stroke",value:function stroke(){return"#000"}},{key:"fill",value:function fill(t,e){var r=e.avatar.Mods.irisHue,n=e.avatar.Mods.irisSaturation,o=e.avatar.Mods.irisLightness;return"hsl(".concat(r,",").concat(n,"%,").concat(o,"%)")}},{key:"getLineWidth",value:function getLineWidth(t){return.01*t.Mods.limbalRingSize}},{key:"clipStroke",value:function clipStroke(t){return this.clipFill(t)}},{key:"clipFill",value:function clipFill(t){return[t.eyes.in,t.eyes.top,t.eyes.out,t.eyes.in]}},{key:"calcDrawPoints",value:function calcDrawPoints(t,e,r){return r&&(t.eyes.iris=Object(o.adjust)(t.eyes.center,0,.1*e.irisHeight)),[o.breakPoint].concat(_toConsumableArray(Object(o.drawCircle)(t.eyes.iris,.1*e.irisSize)))}}]),IrisHuman}()},function(t,e,r){"use strict";r.d(e,"a",function(){return a});var n=r(13),i=r(0);function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var o=function(t){function Eyelid(){var t;_classCallCheck(this,Eyelid);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Eyelid)).call.apply(t,[this,{loc:"eyelid",aboveParts:["eyes","iris","pupil"]}].concat(r)))}return _inherits(Eyelid,n["a"]),Eyelid}(),a=function(t){function EyelidHuman(){var t;_classCallCheck(this,EyelidHuman);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(EyelidHuman)).call.apply(t,[this].concat(r)))}return _inherits(EyelidHuman,o),function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}(EyelidHuman,[{key:"fill",value:function fill(t,e){return e.eyelidColor}},{key:"calcDrawPoints",value:function calcDrawPoints(t,e,r){if(r){t.eyelid={};var n=Object(i.adjust)(t.eyes.top,.1*e.eyelidBias,.1*e.eyelidHeight-.3),o=Object(i.adjust)(t.eyes.out,.1*e.eyelidBias,.1*e.eyelidHeight-.3);t.eyelid.top={x:n.x,y:n.y},t.eyelid.top.cp1=o.cp2,t.eyelid.top.cp2=o.cp1,t.eyelid.in=Object(i.extractPoint)(t.eyes.in),t.eyelid.in.cp1=n.cp2,t.eyelid.in.cp2=n.cp1,5<e.eyelidHeight&&(t.eyelid.in.cp1.x-=.02*e.eyelidHeight,t.eyelid.in.cp2.x-=.02*e.eyelidHeight)}return[t.eyes.in,t.eyes.top,t.eyes.out,t.eyelid.top,t.eyelid.in]}}]),EyelidHuman}()},function(t,e,r){"use strict";r.d(e,"a",function(){return a});var n=r(13),o=r(9),s=r(0);function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var i=function(t){function Eyelash(){var t;_classCallCheck(this,Eyelash);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Eyelash)).call.apply(t,[this,{loc:"eyelash",aboveParts:["eyelid"],parentPart:"eyelid"}].concat(r)))}return _inherits(Eyelash,n["a"]),Eyelash}(),a=function(t){function EyelashHuman(){var t;_classCallCheck(this,EyelashHuman);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(EyelashHuman)).call.apply(t,[this].concat(r)))}return _inherits(EyelashHuman,i),function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}(EyelashHuman,[{key:"fill",value:function fill(t,e){return Object(o.b)(e.defaultHairFill,{l:-10,s:-10})}},{key:"calcDrawPoints",value:function calcDrawPoints(t,e,r){if(r){var n=t.eyelash={},o=t.eyelid,i=e.eyelashAngle*this.eyelashLength*.1;n.top={x:t.eyes.top.x+.1*e.eyelashBias,y:o.top.y+i},n.top.cp1={x:.7*o.in.x+.3*n.top.x,y:.5*o.in.y+.5*n.top.y},n.top.cp2={x:.4*o.in.x+.6*n.top.x,y:n.top.y},n.out=Object(s.extractPoint)(t.eyes.out),n.out.cp1=Object(s.continueCurve)(t.eyes.out,n.top,1),n.outBot=Object(s.extractPoint)(t.eyes.out),n.outBot.cp1=Object(s.adjust)(t.eyes.in.cp2,e.eyelashBias*Object(s.clamp)(this.eyelashLength,0,4)*.01,.03*-this.eyelashLength),n.outBot.cp2=Object(s.adjust)(t.eyes.in.cp1,e.eyelashBias*Object(s.clamp)(this.eyelashLength,0,5)*.01,.03*-this.eyelashLength);var a=t.eyes;Object(s.rotatePoints)(a.center,e.eyeTilt*Math.PI/180,n.top,n.out)}return[t.eyes.out,t.eyelid.top,t.eyelid.in,t.eyelash.top,t.eyelash.out,s.breakPoint,t.eyes.out,t.eyes.in,t.eyelash.outBot,s.endPoint]}}]),EyelashHuman}()},function(t,e,r){"use strict";r.d(e,"a",function(){return i});var n=r(13),a=(r(9),r(0));function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var o=function(t){function Brow(){var t;_classCallCheck(this,Brow);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Brow)).call.apply(t,[this,{loc:"brow",aboveParts:["parts head","faceParts eyelid"]}].concat(r)))}return _inherits(Brow,n["a"]),Brow}(),i=function(t){function BrowHuman(){var t;_classCallCheck(this,BrowHuman);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(BrowHuman)).call.apply(t,[this].concat(r)))}return _inherits(BrowHuman,o),function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}(BrowHuman,[{key:"fill",value:function fill(t,e){return e.browFill}},{key:"calcDrawPoints",value:function calcDrawPoints(t,e,r){if(r){var n=t.brow={},o=.7+.01*this.faceFem;n.inbot={x:t.eyes.center.x-2+.1*e.browCloseness,y:t.eyes.center.y+o-.5+.1*e.browHeight};var i=.1*e.browThickness-.005*this.faceFem;n.intop={x:n.inbot.x+.1*e.browSharpness,y:n.inbot.y+Object(a.clamp)(.95+i,0,5)},n.intop.cp1=Object(a.simpleQuadratic)(n.inbot,n.intop,.5,.5),n.outbot={x:t.eyes.center.x+2.5+.1*e.browLength,y:t.eyes.center.y+o+.1*e.browHeight},n.outtop={x:n.outbot.x+.1*e.browOutBias,y:n.outbot.y+Object(a.clamp)(.7+i+.05*e.browOutBias,0,5)},n.outtop.cp1=Object(a.simpleQuadratic)(n.intop,n.outtop,.4,.1*e.browTopCurl),-5<e.browOutBias&&(n.outbot.cp1=Object(a.simpleQuadratic)(n.outtop,n.outbot,.5,.5)),n.inbot.cp1=Object(a.simpleQuadratic)(n.outbot,n.intop,.6,.1*-e.browBotCurl),Object(a.rotatePoints)(n.inbot,e.browTilt*Math.PI/180,n.inbot,n.intop,n.outtop,n.outbot)}return[t.brow.inbot,t.brow.intop,t.brow.outtop,t.brow.outbot,t.brow.inbot]}}]),BrowHuman}()},function(t,e,r){"use strict";r.d(e,"d",function(){return i}),r.d(e,"b",function(){return a}),r.d(e,"h",function(){return s}),r.d(e,"f",function(){return c}),r.d(e,"e",function(){return l}),r.d(e,"c",function(){return u}),r.d(e,"a",function(){return b}),r.d(e,"g",function(){return d});var p=r(3),n=r(2),o=r(1),h=r(0),f=r(4),y=r(24);function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var i=function(t){function TeePart(){var t;_classCallCheck(this,TeePart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(TeePart)).call.apply(t,[this,{layer:o.a.FRONT,loc:"torso",reflect:!0,aboveParts:["parts neck","parts torso","decorativeParts torso","parts leg"]},{}].concat(r)))}return _inherits(TeePart,p["c"]),_createClass(TeePart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){var r=function calcTee(t){var e=Object(h.clone)(t.collarbone),r=calcTopBody.call(this,t),n=r.armpit,o=r.lat,i=r.waist,a=r.hip,s=r.out,c=r.bottom,l=y.h.call(this,t,c);return{cleavageBot:l.cleavageBot,cleavageTop:l.cleavageTop,neck:l.neck,shoulder:e,armpit:n,lat:o,waist:i,hip:a,out:s,bottom:c}}.call(this,t),n=r.cleavageBot,o=r.cleavageTop,i=r.neck,a=r.shoulder,s=r.armpit,c=r.waist,l=r.hip,u=r.out,f=r.bottom;p.a.simpleStrokeFill(e,t,this),e.beginPath(),Object(h.drawPoints)(e,n,o,i,a,s,c,l,u,f),e.fill(),e.stroke()}}]),TeePart}(),a=function(t){function HalterTopBreastPart(){var t;_classCallCheck(this,HalterTopBreastPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(HalterTopBreastPart)).call.apply(t,[this,{layer:o.a.GENITALS,loc:"chest",reflect:!0,aboveParts:["parts chest","decorativeParts chest"]},{}].concat(r)))}return _inherits(HalterTopBreastPart,p["c"]),_createClass(HalterTopBreastPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){function checkCleavage(t,e){n.y<e.y&&(n.y=e.y+3),r=Object(h.splitCurve)(.5,n,a),a.cp1={x:r.left.p2.x+t.curveCleavageX,y:r.left.p2.y+t.curveCleavageY}}p.a.simpleStrokeFill(e,t,this);var r=Object(h.splitCurve)(this.cleavageCoverage,t.neck.cusp,t.groin),n={x:-.1,y:r.left.p2.y};this.outerNeckCoverage<this.innerNeckCoverage&&(this.outerNeckCoverage=this.innerNeckCoverage),this.innerNeckCoverage>this.outerNeckCoverage&&(this.innerNeckCoverage=this.outerNeckCoverage);var o=t.neck.cusp;t.trapezius&&(o=t.trapezius);var i=(r=Object(h.splitCurve)(this.outerNeckCoverage,o,t.collarbone)).left.p2;r=this.innerNeckCoverage<0?Object(h.splitCurve)(1+this.innerNeckCoverage,t.neck.top,o):Object(h.splitCurve)(this.innerNeckCoverage,o,t.collarbone);var a=Object(h.extractPoint)(r.left.p2);if(!1===t.hasOwnProperty("breast")){var s=Object(h.adjust)(t.armpit,0,0),c={x:-.1,y:s.y-1};return checkCleavage(this,c),e.beginPath(),Object(h.drawPoints)(e,n,a,i,Object(h.extractPoint)(s),c),e.fill(),e.beginPath(),Object(h.drawPoints)(e,n,a,i,Object(h.extractPoint)(s)),e.stroke(),e.save(),e.lineWidth=3,e.strokeStyle=e.fillStyle,e.beginPath(),Object(h.drawPoints)(e,h.breakPoint,t.chest.nipples),e.stroke(),void e.restore()}var l=Object(h.adjust)(t.breast.tip,.1,0),u=Object(h.adjust)(t.breast.bot,0,-.1),f={x:-.1,y:u.y};checkCleavage(this,f),e.beginPath(),Object(h.drawPoints)(e,n,a,i,l,u,f),e.fill(),e.beginPath(),Object(h.drawPoints)(e,n,a,i,l,u),e.stroke()}}]),HalterTopBreastPart}(),s=function(t){function TubeTopBreastPart(){var t;_classCallCheck(this,TubeTopBreastPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(TubeTopBreastPart)).call.apply(t,[this,{layer:o.a.GENITALS,loc:"chest",reflect:!0,aboveParts:["parts chest","decorativeParts chest"]},{}].concat(r)))}return _inherits(TubeTopBreastPart,p["c"]),_createClass(TubeTopBreastPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){if(p.a.simpleStrokeFill(e,t,this),!1===t.hasOwnProperty("breast"))return e.save(),e.lineWidth=3,e.strokeStyle=e.fillStyle,e.beginPath(),Object(h.drawPoints)(e,h.breakPoint,t.chest.nipples),e.stroke(),void e.restore();var r=Object(h.splitCurve)(this.chestCoverage,t.breast.top,t.breast.tip),n=Object(h.extractPoint)(r.left.p2),o={x:-.1,y:n.y},i=Object(h.adjust)(t.breast.tip,.1,0),a=Object(h.adjust)(t.breast.bot,0,-.1),s={x:-.1,y:a.y};e.beginPath(),Object(h.drawPoints)(e,o,n,i,a,s),e.fill(),e.beginPath(),Object(h.drawPoints)(e,o,n,i,a),e.stroke()}}]),TubeTopBreastPart}(),c=function(t){function TopChestPart(){var t;_classCallCheck(this,TopChestPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(TopChestPart)).call.apply(t,[this,{layer:o.a.FRONT,loc:"torso",reflect:!0,aboveParts:["parts neck","parts torso","decorativeParts torso","parts leg"]},{}].concat(r)))}return _inherits(TopChestPart,p["c"]),_createClass(TopChestPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){if(p.a.simpleStrokeFill(e,t,this),!(2<=this.waistCoverage)){var r=calcTopBody.call(this,t),n=r.armpit,o=r.lat,i=r.waist,a=r.hip,s=r.out,c=r.bottom,l={};l=t.breast?{x:-.1,y:t.breast.in.y}:{x:-.1,y:t.armpit.y},e.beginPath(),Object(h.drawPoints)(e,n,o,i,a,s,c,l,Object(h.extractPoint)(n)),e.fill(),e.beginPath(),Object(h.drawPoints)(e,n,o,i,a,s,c),e.stroke()}}}]),TopChestPart}();function calcTopBody(t){var e=Object(h.clone)(t.armpit),r=Object(h.clone)(t.lat),n=Object(h.adjust)(t.hip,0,0),o=Object(h.adjust)(t.waist,.8*this.thickness,0),i=e;r&&(i=r);var a,s=Object(f.g)(i,n,{x:0,y:o.y},{x:100,y:o.y});if(s.x>o.x&&(o.x=Object(f.a)(o.x,s.x,this.sideLoose),Object(f.i)(e,o,this.sideLoose),Object(f.i)(o,n,this.sideLoose)),1<this.waistCoverage){var c=Object(h.splitCurve)(1-(this.waistCoverage-1),t.armpit,o);n=o=void 0,a=c.left.p2}else if(0<=this.waistCoverage){var l=Object(h.splitCurve)(1-this.waistCoverage,o,n);n=void 0,a=l.left.p2}else{a=Object(h.splitCurve)(Math.abs(this.waistCoverage),n,t.thigh.out).left.p2}var u={y:a.y-3,x:-.1};return u.cp1={x:.5*u.x+.5*a.x,y:u.y},{armpit:e,lat:r,waist:o,hip:n,out:a,bottom:u}}var l=function(t){function Top(){var t;_classCallCheck(this,Top);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Top)).call.apply(t,[this,{clothingLayer:p.a.Layer.MID,thickness:.6}].concat(r)))}return _inherits(Top,p["b"]),_createClass(Top,[{key:"stroke",value:function stroke(){return"hsla(335, 800%, 30%, 1)"}},{key:"fill",value:function fill(){return"hsla(335, 100%, 42%, 1)"}}]),Top}(),u=function(t){function Tee(){var t;_classCallCheck(this,Tee);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Tee)).call.apply(t,[this,{cleavageOpeness:.3,cleavageCoverage:.16,sideLoose:0,waistCoverage:0,curveCleavageX:0,curveCleavageY:0}].concat(r)))}return _inherits(Tee,l),_createClass(Tee,[{key:"partPrototypes",get:function get(){return[{side:null,Part:y.e},{side:null,Part:i},{side:null,Part:y.d},{side:n.b.LEFT,Part:y.g},{side:n.b.RIGHT,Part:y.g}]}}]),Tee}(),b=function(t){function HalterTop(){var t;_classCallCheck(this,HalterTop);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(HalterTop)).call.apply(t,[this,{cleavageCoverage:.3,outerNeckCoverage:.35,innerNeckCoverage:.15,curveCleavageX:9,curveCleavageY:-9,waistCoverage:.66,sideLoose:0}].concat(r)))}return _inherits(HalterTop,l),_createClass(HalterTop,[{key:"partPrototypes",get:function get(){return[{side:null,Part:a},{side:null,Part:c}]}}]),HalterTop}(),d=function(t){function TubeTop(){var t;_classCallCheck(this,TubeTop);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(TubeTop)).call.apply(t,[this,{chestCoverage:.3,waistCoverage:.3,sideLoose:0}].concat(r)))}return _inherits(TubeTop,l),_createClass(TubeTop,[{key:"partPrototypes",get:function get(){return[{side:null,Part:s},{side:null,Part:c}]}}]),TubeTop}()},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"c",function(){return serialize}),__webpack_require__.d(__webpack_exports__,"a",function(){return deserialize}),__webpack_require__.d(__webpack_exports__,"b",function(){return loadSerialization});var _pattern__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(10),_parts_part__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(2),_clothes_clothing__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(3);function serialize(t,e){return JSON.stringify(t,function(t,e){if("_owner"!==t&&"shadingParts"!==t)return e},e)}function deserialize(text){return JSON.parse(text,function(key,val){var value=val;if(Array.isArray(value)&&2===value.length&&"(revive:eval)"===value[0]){var $ReviveData$=value[1][1];value=eval(value[1][0])}else if(Object(_pattern__WEBPACK_IMPORTED_MODULE_0__.h)(value)){var _value$=value[1],patternName=_value$.patternName,_value$$patternSize=_value$.patternSize,patternSize=void 0===_value$$patternSize?_pattern__WEBPACK_IMPORTED_MODULE_0__.a:_value$$patternSize;value=Object(_pattern__WEBPACK_IMPORTED_MODULE_0__.e)(Object(_pattern__WEBPACK_IMPORTED_MODULE_0__.f)(patternName),patternSize)}return value})}function extendSerializability(globalClassIdentifier){var classConstructor=eval(globalClassIdentifier);Object.defineProperties(classConstructor.prototype,{_getData:{value:function value(){var e={};return Object.keys(this).forEach(function(t){e[t]=this[t]},this),e}},_setData:{value:function value(t){return new this.constructor(t)}},clone:{value:function value(){return new classConstructor(this._getData)}},toJSON:{value:function value(){return JSON.reviveWrapper("(new "+globalClassIdentifier+"($ReviveData$))",this._getData())}}})}function loadSerialization(){var t=[],e=window.da;for(var r in e){if(!1!==e.hasOwnProperty(r))"function"==typeof e[r]&&1<r.length&&r.charAt(0)===r.charAt(0).toUpperCase()&&t.push(r)}t.forEach(function(t){extendSerializability("da."+t)})}JSON.reviveWrapper||Object.defineProperty(JSON,"reviveWrapper",{configurable:!0,writable:!0,value:function value(t,e){if("string"!=typeof t)throw new TypeError("JSON.reviveWrapper code parameter must be a string");return["(revive:eval)",[t,e]]}})},function(t,e,r){"use strict";r.d(e,"a",function(){return loadDefaultParts});var n=r(19),o=r(2),i=r(50),a=r(34),s=r(51),c=r(52),l=r(53),u=r(35),f=r(36),p=r(54),h=r(37),y=r(55),b=r(56),d=r(38),g=r(39),P=r(40),v=r(41),_=r(57),O=r(58),m=r(59),C=r(42),w=r(43),k=r(44),j=r(45),x=r(46),S=r(20);function loadDefaultParts(){n.a.human.maleParts=[{partGroup:"parts",side:null,part:i.a},{partGroup:"parts",side:null,part:a.b},{partGroup:"decorativeParts",side:null,part:a.a}],n.a.human.femaleParts=[{partGroup:"parts",side:null,part:s.a}],n.a.human.defaultParts=[{side:null,part:c.a},{side:null,part:l.a},{side:o.b.LEFT,part:u.a},{side:o.b.RIGHT,part:u.a},{side:o.b.LEFT,part:f.a},{side:o.b.RIGHT,part:f.a},{side:null,part:p.a},{side:o.b.LEFT,part:h.a},{side:o.b.RIGHT,part:h.a},{side:o.b.LEFT,part:g.a},{side:o.b.RIGHT,part:g.a},{side:null,part:y.a},{side:null,part:b.a},{side:null,part:d.a},{side:null,part:d.b}],n.a.human.defaultFaceParts=[{side:o.b.LEFT,part:P.b},{side:o.b.RIGHT,part:P.b},{side:null,part:m.a},{side:null,part:O.a},{side:null,part:_.a},{side:o.b.LEFT,part:v.a},{side:o.b.RIGHT,part:v.a},{side:o.b.LEFT,part:w.a},{side:o.b.RIGHT,part:w.a},{side:o.b.LEFT,part:C.a},{side:o.b.RIGHT,part:C.a},{side:o.b.LEFT,part:k.a},{side:o.b.RIGHT,part:k.a},{side:o.b.LEFT,part:j.a},{side:o.b.RIGHT,part:j.a},{side:o.b.LEFT,part:x.a},{side:o.b.RIGHT,part:x.a}],n.a.human.defaultDecorativeParts=[{side:null,part:S.b},{side:o.b.LEFT,part:S.d},{side:o.b.RIGHT,part:S.d},{side:null,part:S.c},{side:null,part:S.e},{side:null,part:S.a},{side:o.b.LEFT,part:S.f},{side:o.b.RIGHT,part:S.f}]}},function(t,e,r){"use strict";r.d(e,"a",function(){return s});var o=r(1),n=r(2),i=r(0);function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var a=function(t){function Testicles(){var t;_classCallCheck(this,Testicles);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Testicles)).call.apply(t,[this,{loc:"testicles",layer:o.a.GENITALS,coverConceal:["groin","left leg"]}].concat(r)))}return _inherits(Testicles,n["a"]),Testicles}(),s=function(t){function TesticlesHuman(){var t;_classCallCheck(this,TesticlesHuman);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(TesticlesHuman)).call.apply(t,[this,{reflect:!0}].concat(r)))}return _inherits(TesticlesHuman,a),function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}(TesticlesHuman,[{key:"getLineWidth",value:function getLineWidth(t){return Object(i.clamp)(t.getDim("testicleSize")/60,.5,2)}},{key:"stroke",value:function stroke(){return"inherit"}},{key:"calcDrawPoints",value:function calcDrawPoints(t,e,r){if(r){var n=t.testicles={};n.center={x:0,y:t.groin.y+3},n.top={x:n.center.x+1.5+.003*this.testicleSize,y:n.center.y+.006*this.testicleSize},n.side={x:n.center.x+.06*this.testicleSize,y:n.center.y-.1*this.testicleSize},n.bot={x:n.center.x,y:n.side.y-.02*this.testicleSize},n.side.cp1={x:n.top.x,y:n.top.y-.04*this.testicleSize},n.side.cp2={x:n.side.x+.01*this.testicleSize,y:n.side.y+.05*this.testicleSize},n.bot.cp1=Object(i.simpleQuadratic)(n.side,n.bot,.5,.05*this.testicleSize),n.center.cp1=Object(i.simpleQuadratic)(n.bot,n.center,.3,.01*this.testicleSize)}return 20<this.testicleSize?[t.testicles.top,t.testicles.side,t.testicles.bot,Object(i.adjust)(t.testicles.center,0,-4)]:[]}}]),TesticlesHuman}()},function(t,e,r){"use strict";r.d(e,"a",function(){return s});var o=r(1),n=r(2),i=r(0);function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var a=function(t){function Vagina(){var t;_classCallCheck(this,Vagina);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Vagina)).call.apply(t,[this,{loc:"vagina",forcedSide:null,layer:o.a.FRONT,aboveParts:["parts groin"],belowParts:["leg","clothingParts groin"]}].concat(r)))}return _inherits(Vagina,n["a"]),Vagina}(),s=function(t){function VaginaHuman(){var t;_classCallCheck(this,VaginaHuman);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(VaginaHuman)).call.apply(t,[this,{reflect:!0}].concat(r)))}return _inherits(VaginaHuman,a),function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}(VaginaHuman,[{key:"stroke",value:function stroke(){return"inherit"}},{key:"calcDrawPoints",value:function calcDrawPoints(t,e,r){return r&&(t.vagina={},t.coverGroin=!0,t.vagina.top={x:t.groin.x,y:t.groin.y+.022*this.vaginaSize+.005*e.labiaFullness},t.vagina.side=Object(i.extractPoint)(t.thigh.top),t.vagina.side.y+=.1*e.labiaFullness+.005*this.vaginaSize+.5,t.vagina.side.x+=.02*e.labiaFullness+.002*this.vaginaSize,t.vagina.top.cp1={x:t.vagina.side.x,y:t.vagina.side.y-.8-(.1*e.labiaFullness+.005*this.vaginaSize)},t.vagina.top.cp2={x:t.vagina.top.x,y:t.vagina.top.y-.032*this.vaginaSize}),[t.vagina.side,t.vagina.top]}}]),VaginaHuman}()},function(t,e,r){"use strict";r.d(e,"a",function(){return l});var n=r(5),o=r(1),i=r(2),c=r(0);function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var a=function(t){function Head(){var t;_classCallCheck(this,Head);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Head)).call.apply(t,[this,{loc:"head",forcedSide:null,parentPart:"neck",layer:o.a.BELOW_HAIR,reflect:!0}].concat(r)))}return _inherits(Head,i["a"]),Head}(),s=function(t){function HeadHumanShading(){var t;_classCallCheck(this,HeadHumanShading);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(HeadHumanShading)).call.apply(t,[this,{loc:"+head",layer:o.a.HAIR}].concat(r)))}return _inherits(HeadHumanShading,n["a"]),_createClass(HeadHumanShading,[{key:"calcDrawPoints",value:function calcDrawPoints(t){var e=function calcHeadShading(t,e){var r=Object(c.splitCurve)(.4,t.skull,t.skull.side),n=Object(c.extractPoint)(r.left.p2),o=r.right.p2;o=Object(c.adjust)(o,.045*-e,0);var i=Object(c.adjust)(t.skull.bot,.03*-e,0);i.cp1=Object(c.simpleQuadratic)(o,i,.5,.5);var a=t.chin.out?Object(c.adjust)(Object(c.extractPoint)(t.chin.out),.026*-e,0):{},s=(r=Object(c.splitCurve)(.8,a,t.chin.bot)).left.p2;return s.cp1=Object(c.continueCurve)(i,a,.7),s.cp2=Object(c.adjust)(s.cp2,.02*-e,.1),{top:n,skullSide:o,skullBot:i,chinOut:a,chinBot:s}}(t,this.faceWidth),r=e.top,n=e.skullSide,o=e.skullBot,i=e.chinOut,a=e.chinBot;return r.cp1={x:a.x+.3*this.faceWidth,y:a.y},r.cp2={x:r.x+.4*this.faceWidth,y:r.y},[r,n,o,i,a,r]}}]),HeadHumanShading}();var l=function(t){function HeadHuman(){var t;_classCallCheck(this,HeadHuman);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(HeadHuman)).call.apply(t,[this,{shadingParts:[s]}].concat(r)))}return _inherits(HeadHuman,a),_createClass(HeadHuman,[{key:"getLineWidth",value:function getLineWidth(t){return Object(c.clamp)(1.7-.05*t.dim.faceFem,.7,1.5)}},{key:"calcDrawPoints",value:function calcDrawPoints(t,e,r){if(r){var n=this.height,o=t.skull={x:0,y:n};t.ear={},o.side={x:.095*this.faceWidth-.01*this.faceFem,y:t.skull.y-.035*this.faceLength,cp1:{x:.045*this.faceWidth,y:n}},o.side.cp2={x:o.side.x,y:n-2},o.bot={x:o.side.x-.0135*this.faceFem,y:o.side.y-5*this.faceLength/220},t.jaw={x:o.bot.x-Object(c.clamp)(1.5-.05*this.faceFem-.1*e.jawJut,0,.2*this.faceWidth),y:o.bot.y-Object(c.clamp)(.025*this.faceLength-.2*this.faceFem,0,.03*this.faceLength)},t.chin={},t.chin.bot={x:0,y:t.skull.y-.1*this.faceLength+.035*this.faceFem-.1*e.chinLength,cp1:{x:t.jaw.x-Object(c.clamp)(1.5-.02*this.faceFem,.5,2),y:t.jaw.y-Object(c.clamp)(1+.05*this.faceFem+.1*e.cheekFullness,0,.025*this.faceLength)}},t.chin.bot.cp2={x:.1*this.chinWidth-Object(c.clamp)(.22*this.faceFem,0,3),y:t.chin.bot.y-1+Object(c.clamp)(.035*this.faceFem,0,2)};var i=Object(c.splitCurve)(1-.78,t.jaw,t.chin.bot);t.chin.out=i.right.p1,t.chin.out.cp1=i.left.p2.cp1,t.chin.bot=i.right.p2,this.faceFem<13&&(t.chin.out.cp1=Object(c.simpleQuadratic)(t.jaw,t.chin.out,.5,.1*this.faceFem))}return[t.skull,t.skull.side,t.skull.bot,t.jaw,t.chin.out,t.chin.bot]}}]),HeadHuman}()},function(t,e,r){"use strict";r.d(e,"a",function(){return f});var n=r(5),o=r(1),i=r(2),l=r(0),a=r(6);function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _toConsumableArray(t){return function _arrayWithoutHoles(t){if(Array.isArray(t)){for(var e=0,r=new Array(t.length);e<t.length;e++)r[e]=t[e];return r}}(t)||function _iterableToArray(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function _slicedToArray(t,e){return function _arrayWithHoles(t){if(Array.isArray(t))return t}(t)||function _iterableToArrayLimit(t,e){var r=[],n=!0,o=!1,i=void 0;try{for(var a,s=t[Symbol.iterator]();!(n=(a=s.next()).done)&&(r.push(a.value),!e||r.length!==e);n=!0);}catch(t){o=!0,i=t}finally{try{n||null==s.return||s.return()}finally{if(o)throw i}}return r}(t,e)||function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var s=function(t){function ChinShading(){var t;_classCallCheck(this,ChinShading);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(ChinShading)).call.apply(t,[this,{loc:"+neck",layer:o.a.GENITALS}].concat(r)))}return _inherits(ChinShading,n["a"]),_createClass(ChinShading,[{key:"calcDrawPoints",value:function calcDrawPoints(t){var e=_slicedToArray(Object(l.adjustPoints)(0,-2,t.skull.side,t.skull.bot,t.jaw,t.chin.out,t.chin.bot),5),r=e[0],n=e[1],o=e[2],i=e[3],a=e[4],s=Object(l.reflect)(i);s.cp1=Object(l.reflect)(a.cp2),s.cp2=Object(l.reflect)(a.cp1);var c=Object(l.reflect)(o);return c.cp1=Object(l.reflect)(i.cp2),c.cp2=Object(l.reflect)(i.cp1),l.adjustPoints.apply(void 0,[1.3,0].concat(_toConsumableArray(Object(l.adjustPoints)(1.8,0,r,n,o,i,a)),[s,c]))}}]),ChinShading}(),c=function(t){function NeckShading(){var t;_classCallCheck(this,NeckShading);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(NeckShading)).call.apply(t,[this,{loc:"+neck",layer:o.a.GENITALS}].concat(r)))}return _inherits(NeckShading,n["a"]),_createClass(NeckShading,[{key:"calcDrawPoints",value:function calcDrawPoints(t){var e={x:0,y:t.neck.top.y},r={x:t.neck.cusp.x,y:t.neck.cusp.y-3};r.cp1=t.neck.cusp.cp1;var n={x:t.neck.top.x+1,y:t.neck.top.y};return n.cp1=t.neck.cusp.cp1,[e,r,n,e]}}]),NeckShading}(),u=function(t){function Neck(){var t;_classCallCheck(this,Neck);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Neck)).call.apply(t,[this,{loc:"neck",forcedSide:null,layer:o.a.FRONT,reflect:!0,shadingParts:[s,c]}].concat(r)))}return _inherits(Neck,i["a"]),Neck}(),f=function(t){function NeckHuman(){var t;_classCallCheck(this,NeckHuman);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(NeckHuman)).call.apply(t,[this].concat(r)))}return _inherits(NeckHuman,u),_createClass(NeckHuman,[{key:"calcDrawPoints",value:function calcDrawPoints(t,e,r){if(r){var n=t.neck={};if(n.nape={x:0,y:t.skull.y-.068*this.faceLength},n.top={x:.1*this.neckWidth+.05*this.upperMuscle-.01*this.faceFem,y:n.nape.y},n.cusp={x:n.top.x+.2,y:n.top.y-.1*this.neckLength},n.cusp.cp1=Object(l.simpleQuadratic)(n.top,n.cusp,.7,.1*e.neckCurve),12<this.upperMuscle){var o=Object(l.splitCurve)(Object(l.clamp)(1-(this.upperMuscle-12)/80,0,1),n.top,n.cusp);t.trapezius=o.right.p1}else t.trapezius=Object(l.clone)(n.cusp);t.collarbone={x:n.cusp.x+.1*this.shoulderWidth+.01*this.upperMuscle,y:n.cusp.y-.105*this.torsoLength+.05*this.upperMuscle},12<this.upperMuscle?(t.collarbone.x+=.1*(this.upperMuscle-12),t.collarbone.cp1=Object(a.a)(t.trapezius,t.collarbone,.7,.02*this.upperMuscle,.02*this.upperMuscle)):t.collarbone.cp1=Object(a.a)(n.cusp,t.collarbone,.3,-.05*(12-this.upperMuscle),-.05*(12-this.upperMuscle))}return[t.neck.nape,t.neck.top,t.neck.cusp,t.trapezius,t.collarbone]}}]),NeckHuman}()},function(t,e,r){"use strict";r.d(e,"a",function(){return l});var n=r(5),o=r(1),i=r(2),c=r(0);function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var a=function(t){function TorsoShading(){var t;_classCallCheck(this,TorsoShading);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(TorsoShading)).call.apply(t,[this,{loc:"+torso",layer:o.a.FRONT}].concat(r)))}return _inherits(TorsoShading,n["a"]),_createClass(TorsoShading,[{key:"fill",value:function fill(){return n.b}},{key:"calcDrawPoints",value:function calcDrawPoints(t){return function calcTorsoShading(t){var e=t.armpit;t.breast&&(e=Object(c.splitCurve)(.1,t.armpit,t.waist).left.p2);var r=Object(c.adjust)(e,-2-.03*this.shoulderWidth,-5),n=Object(c.adjust)(t.waist,-1-.03*this.waistWidth,-4),o=Object(c.adjust)(t.hip,-3-.04*this.hipWidth,0);o.cp1=Object(c.adjust)(o.cp1,.02*this.hipWidth,0);var i={x:t.hip.x+5,y:t.hip.y},a={x:t.waist.x+5,y:t.waist.y},s={x:t.armpit.x+5,y:e.y};return r.cp1=Object(c.simpleQuadratic)(s,r,.7,-4),[r,n,o,i,a,s,r]}.call(this,t)}}]),TorsoShading}(),s=function(t){function Torso(){var t;_classCallCheck(this,Torso);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Torso)).call.apply(t,[this,{loc:"torso",forcedSide:null,reflect:!0,layer:o.a.FRONT,shadingParts:[a]}].concat(r)))}return _inherits(Torso,i["a"]),Torso}(),l=function(t){function TorsoHuman(){var t;_classCallCheck(this,TorsoHuman);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(TorsoHuman)).call.apply(t,[this].concat(r)))}return _inherits(TorsoHuman,s),_createClass(TorsoHuman,[{key:"calcDrawPoints",value:function calcDrawPoints(t,e,r){if(r){if(Object(c.fillerDefinition)(t,"armpit",{x:t.collarbone.x-.03*this.upperMuscle,y:t.collarbone.y-12-.1*this.upperMuscle}),t.hasOwnProperty("elbow")){var n=Object(c.splitCurve)(Object(c.clamp)(1.2-this.upperMuscle/40,.6,1),t.elbow.in,t.armpit);t.lat=n.right.p1,t.lat.cp1=n.right.p2.cp2,t.lat.cp2=n.right.p2.cp1}else Object(c.fillerDefinition)(t,"lat",{x:t.armpit.x+.5,y:t.armpit.y-3});var o=.1*(this.shoulderWidth-80);t.waist={x:.1*this.waistWidth+.7*o,y:t.armpit.y-.33*this.torsoLength,cp1:{x:t.armpit.x,y:t.armpit.y-5}},t.waist.cp2={x:t.waist.x,y:t.waist.y+.01*this.waistWidth+.1*o},t.hip={x:.1*this.hipWidth+.5*o,y:t.waist.y-.32*this.torsoLength,cp1:{x:t.waist.x,y:t.waist.y-.2*this.torsoLength}},t.hip.cp2={x:t.hip.x-.03*this.buttFullness-.05*this.legFem,y:t.hip.y+4+.015*this.buttFullness},t.pelvis={x:0,y:t.hip.y-.05*this.torsoLength}}return t.hasOwnProperty("knee")?[t.armpit,t.lat,t.waist,t.hip,c.endPoint]:[t.armpit,t.lat,t.waist,t.hip,t.groin]}}]),TorsoHuman}()},function(t,e,r){"use strict";r.d(e,"a",function(){return l});var n=r(5),o=r(1),i=r(2),a=r(0);function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var s=function(t){function GroinShading(){var t;_classCallCheck(this,GroinShading);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(GroinShading)).call.apply(t,[this,{loc:"groin",layer:o.a.FRONT}].concat(r)))}return _inherits(GroinShading,n["a"]),_createClass(GroinShading,[{key:"calcDrawPoints",value:function calcDrawPoints(t){var e=Object(a.splitCurve)(.2,t.thigh.top,t.thigh.fold),r=e.left.p2,n=Object(a.extractPoint)(t.groin);n.cp1=Object(a.simpleQuadratic)(r,n,.5,2),e=Object(a.splitCurve)(.8,t.thigh.top,t.thigh.fold);var o=Object(a.reflect)(e.left.p2);o.cp1=Object(a.reflect)(e.left.p2.cp1),e.left.p2.cp2&&(o.cp2=Object(a.reflect)(e.left.p2.cp2));var i=Object(a.reflect)(t.thigh.top);return r.cp1=Object(a.simpleQuadratic)(o,r,.7,-4),[r,n,i,o,r]}}]),GroinShading}(),c=function(t){function Groin(){var t;_classCallCheck(this,Groin);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Groin)).call.apply(t,[this,{loc:"groin",forcedSide:null,reflect:!0,layer:o.a.FRONT,belowParts:["parts torso"],shadingParts:[s]}].concat(r)))}return _inherits(Groin,i["a"]),Groin}(),l=function(t){function GroinHuman(){var t;_classCallCheck(this,GroinHuman);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(GroinHuman)).call.apply(t,[this].concat(r)))}return _inherits(GroinHuman,c),_createClass(GroinHuman,[{key:"getLineWidth",value:function getLineWidth(){return 0}},{key:"calcDrawPoints",value:function calcDrawPoints(t,e,r){if(r){var n=.85*this.height-this.legLength;Object(a.fillerDefinition)(t,"thigh"),Object(a.fillerDefinition)(t.thigh,"top",{x:1.6,y:t.hip.y-.15*this.legLength}),t.groin={x:0,y:t.thigh.top.y-.015*n},t.groin.top={x:t.thigh.top.x+5,y:t.thigh.top.y+1.1}}return[t.groin.top,t.groin,{fillOnly:[t.neck.nape,t.groin.top]}]}}]),GroinHuman}()},function(t,e,r){"use strict";r.d(e,"a",function(){return s});var o=r(1),n=r(2),i=r(0);function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var a=function(t){function Butt(){var t;_classCallCheck(this,Butt);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Butt)).call.apply(t,[this,{loc:"butt",reflect:!0,layer:o.a.BACK}].concat(r)))}return _inherits(Butt,n["a"]),Butt}(),s=function(t){function ButtHuman(){var t;_classCallCheck(this,ButtHuman);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(ButtHuman)).call.apply(t,[this].concat(r)))}return _inherits(ButtHuman,a),function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}(ButtHuman,[{key:"getLineWidth",value:function getLineWidth(t){return Object(i.clamp)(.5+.05*t.dim.buttFullness,.5,1.5)}},{key:"calcDrawPoints",value:function calcDrawPoints(t,e,r){if(r){if(t.butt={},t.butt.in={x:.5,y:t.groin.y-.01*this.buttFullness},!t.thigh.out)return[];t.butt.out={x:t.thigh.out.x-2,y:t.butt.in.y+1},t.butt.out.cp1={x:.7*t.butt.in.x+.3*t.butt.out.x-.1*this.buttFullness,y:t.butt.in.y-.35*this.buttFullness},t.butt.out.cp2={x:.3*t.butt.in.x+.7*t.butt.out.x+.12*this.buttFullness,y:t.butt.out.y-2-.2*this.buttFullness},t.butt.in.cp1={x:t.butt.out.cp2.x,y:t.butt.out.y+.2*this.buttFullness},t.butt.in.cp2={x:t.butt.in.x,y:t.butt.in.y+3+.2*this.buttFullness}}return[t.butt.in,t.butt.out,t.butt.in]}}]),ButtHuman}()},function(t,e,r){"use strict";r.d(e,"a",function(){return s});var n=r(13),o=r(9),i=r(0);function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var a=function(t){function Mouth(){var t;_classCallCheck(this,Mouth);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Mouth)).call.apply(t,[this,{loc:"mouth",reflect:!0,aboveParts:["parts head"]}].concat(r)))}return _inherits(Mouth,n["a"]),Mouth}(),s=function(t){function MouthHuman(){var t;_classCallCheck(this,MouthHuman);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(MouthHuman)).call.apply(t,[this].concat(r)))}return _inherits(MouthHuman,a),function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}(MouthHuman,[{key:"fill",value:function fill(t,e){return Object(o.b)(e.baseLipColor,{s:-20,l:-10})}},{key:"clipFill",value:function clipFill(){}},{key:"calcDrawPoints",value:function calcDrawPoints(t){return[i.breakPoint,t.lips.top,t.lips.out,t.lips.bot,t.lips.top,i.endPoint]}}]),MouthHuman}()},function(t,e,r){"use strict";r.d(e,"a",function(){return c});var n=r(13),o=r(5),i=r(1),u=r(0);function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var a=function(t){function LipShading(){var t;_classCallCheck(this,LipShading);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(LipShading)).call.apply(t,[this,{loc:"+lips",reflect:!0,layer:i.a.BELOW_HAIR,aboveParts:["faceParts lips"]}].concat(r)))}return _inherits(LipShading,o["a"]),_createClass(LipShading,[{key:"fill",value:function fill(){return"hsl(0,0%,85%)"}},{key:"calcDrawPoints",value:function calcDrawPoints(t){var e=Object(u.clone)(t.lips.bot.top);return[u.breakPoint,e,t.lips.out.lower,t.lips.bot,e,u.endPoint]}}]),LipShading}(),s=function(t){function Lips(){var t;_classCallCheck(this,Lips);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Lips)).call.apply(t,[this,{loc:"lips",reflect:!0,aboveParts:["mouth"],shadingParts:[a]}].concat(r)))}return _inherits(Lips,n["a"]),Lips}(),c=function(t){function LipsHuman(){var t;_classCallCheck(this,LipsHuman);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(LipsHuman)).call.apply(t,[this].concat(r)))}return _inherits(LipsHuman,s),_createClass(LipsHuman,[{key:"fill",value:function fill(t,e){return e.baseLipColor}},{key:"clipFill",value:function clipFill(){}},{key:"calcDrawPoints",value:function calcDrawPoints(t,e,r){if(r){var n=.1*this.faceLength,o=40-this.faceFem,i=.007*e.lipParting,a=.015*-e.lipParting,s=t.lips={};s.center={x:-.1,y:t.skull.y-.78*n+.1*e.lipHeight+.018*this.faceFem},s.top={x:s.center.x,y:s.center.y+Object(u.clamp)(.015*this.lipSize+.005*this.faceFem+.01*e.lipTopSize,0,3)+i},s.tip={x:Object(u.clamp)(.7-.003*this.faceFem+.01*e.lipCupidsBow,0,5)*this.lipSize/20,y:s.top.y+.005*e.lipTopSize+.003*this.faceFem+.01*this.lipSize},s.tip.cp1=Object(u.simpleQuadratic)(s.top,s.tip,.5,.1+.001*e.lipTopCurve),s.out={x:1+.08*this.lipSize+.005*e.lipWidth+.01*o,y:s.center.y+.02*e.lipCurl},s.out.cp1={x:.5*s.tip.x+.5*s.out.x+.002*e.lipTopCurve,y:s.tip.y},s.out.cp2={x:.3*s.tip.x+.7*s.out.x,y:.5*s.tip.y+.5*s.out.y+.01*e.lipTopCurve},s.bot={x:0,y:s.center.y-.3-.02*this.lipSize-.008*this.faceFem-.004*e.lipBotSize+a},s.bot.cp1=Object(u.simpleQuadratic)(s.out,s.bot,.5,.02*this.lipSize+.003*this.faceFem+.003*e.lipBotSize-.5*a),s.bot.cp1.y-=.01*e.lipCurl;var c=-.1-.006*e.lipBias;s.bot.top={x:s.center.x,y:s.center.y+a+c},s.top.bot={x:s.center.x,y:s.center.y+1.2*i+c},s.out.lower=Object(u.extractPoint)(s.out),s.out.lower.cp1=Object(u.simpleQuadratic)(s.bot.top,s.out.lower,.3,.02*e.lipBias-.005*e.lipParting);var l=Object(u.splitCurve)(.6+e.lipParting/400,s.bot.top,s.out.lower);s.out.in=l.left.p2,s.top.bot.cp1=Object(u.simpleQuadratic)(s.out.in,s.top.bot,.7,.005*-e.lipParting)}return[u.breakPoint,t.lips.top,t.lips.tip,t.lips.out,t.lips.bot,t.lips.bot.top,t.lips.out.in,t.lips.top.bot,t.lips.top,u.endPoint]}}]),LipsHuman}()},function(t,e,r){"use strict";r.d(e,"a",function(){return l});var n=r(13),o=r(1),i=r(5),c=r(0);function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var a=function(t){function Nose(){var t;_classCallCheck(this,Nose);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Nose)).call.apply(t,[this,{loc:"nose"}].concat(r)))}return _inherits(Nose,n["a"]),Nose}(),s=function(t){function NoseHumanShading(){var t;_classCallCheck(this,NoseHumanShading);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(NoseHumanShading)).call.apply(t,[this,{loc:"+nose",layer:o.a.BELOW_HAIR}].concat(r)))}return _inherits(NoseHumanShading,i["a"]),_createClass(NoseHumanShading,[{key:"calcDrawPoints",value:function calcDrawPoints(t,e){var r=t.nose,n=r.top,o=r.bot;o.cp1={x:n.x,y:n.y-.05*e.noseLength},o.cp2={x:o.x+.6+.1*e.noseRoundness,y:o.y+.02*e.noseLength};var i=Object(c.adjust)(r.out,0,0);i.cp1=Object(c.simpleQuadratic)(o,i,.5,.1*e.nostrilSize);var a=Object(c.clamp)(.01*e.nostrilSize-.02*e.noseRidgeHeight,0,.3),s={x:o.x*a+i.x*(1-a),y:o.y+1+.05*e.nostrilSize};return s.cp1={x:i.x+.02*e.nostrilSize,y:i.y+.05*e.nostrilSize},s.cp2={x:s.x+.6,y:s.y-.3},n.cp1=Object(c.continueCurve)(i,s,.1*e.nostrilSize),n.cp2={x:Object(c.clamp)(n.x+.1+.06*e.noseWidth+.1*e.noseRidgeHeight-.1*e.noseRoundness,0,100),y:n.y+.2},[n,o,i,s,n]}}]),NoseHumanShading}(),l=function(t){function NoseHuman(){var t;_classCallCheck(this,NoseHuman);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(NoseHuman)).call.apply(t,[this,{shadingParts:[s]}].concat(r)))}return _inherits(NoseHuman,a),_createClass(NoseHuman,[{key:"fill",value:function fill(t,e){return e.baseStroke}},{key:"clipFill",value:function clipFill(){}},{key:"calcDrawPoints",value:function calcDrawPoints(t,e,r){if(r){var n=t.nose={},o=.1*this.faceLength;n.center={x:0,y:t.skull.y-.65*o+.1*e.noseHeight+.02*this.faceFem},n.in={x:n.center.x+.037*e.noseWidth-.007*this.faceFem+.01*e.nostrilSize,y:n.center.y-.3},n.out={x:n.center.x+.043*e.noseWidth-.017*this.faceFem+.25+.08*e.nostrilSize,y:n.center.y+.3};var i=Object(c.clamp)(.5-.005*this.faceFem,0,.4);n.out.cp1=Object(c.simpleQuadratic)(n.in,n.out,.5,i),n.in.cp1=Object(c.simpleQuadratic)(n.out,n.in,.5,i),n.left={},n.left.in=Object(c.reflect)(n.in),n.left.out=Object(c.reflect)(n.out),n.left.in.cp1=Object(c.reflect)(n.in.cp1),n.left.out.cp1=Object(c.reflect)(n.out.cp1),n.top={x:n.center.x+.01*e.noseWidth+Object(c.clamp)(.01*e.noseRoundness,0,5),y:n.center.y+(.1*e.noseLength-.1*e.noseRoundness)*o*.045},n.bot={x:n.top.x,y:n.center.y+.3}}return[c.breakPoint,t.nose.in,t.nose.out,t.nose.in,c.breakPoint,t.nose.left.in,t.nose.left.out,t.nose.left.in,c.endPoint]}}]),NoseHuman}()},function(t,e,r){"use strict";r.d(e,"a",function(){return n});var o=r(0),n={create:function create(t){var e=1<arguments.length&&void 0!==arguments[1]?arguments[1]:1,r=Object(o.clone)(t);for(var n in r.Mods)r.Mods.hasOwnProperty(n)&&(r.Mods[n]*=e);return r},neutral:Object.freeze({Mods:{}}),suspicious:Object.freeze({Mods:{eyeBotSize:-7,browHeight:-2,lipBotSize:-20,lipTopSize:-8,lipWidth:-25}}),angry:Object.freeze({Mods:{browTilt:7,browCloseness:-3,browHeight:-4,eyeBotSize:1,eyeTopSize:1,lipCurl:-6}}),sad:Object.freeze({Mods:{browTilt:-7,eyeBotSize:2,eyeTopSize:-1,lipCurl:-5,eyeTilt:-1}}),surprised:Object.freeze({Mods:{browTilt:-5,eyeBotSize:2,eyeTopSize:1,lipParting:15,browHeight:5}}),mischievous:Object.freeze({Mods:{lipCurl:10,eyeBotSize:-4,eyeTopSize:-1}}),happy:Object.freeze({Mods:{lipCurl:12,eyeBotSize:-2}}),sleepy:Object.freeze({Mods:{eyeTopSize:-4,eyelidHeight:-1}}),aroused:Object.freeze({Mods:{eyelidHeight:-2.5,lipParting:13}}),bliss:Object.freeze({Mods:{irisHeight:2,lipParting:20,eyelidHeight:-2}})}},function(t,e,r){"use strict";r.d(e,"c",function(){return a}),r.d(e,"b",function(){return s}),r.d(e,"f",function(){return calcJacket}),r.d(e,"e",function(){return c}),r.d(e,"a",function(){return l}),r.d(e,"d",function(){return u});var p=r(3),o=r(2),n=r(5),i=r(1),h=r(6),v=r(0);function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var a=function(t){function JacketBaseShading(){var t;_classCallCheck(this,JacketBaseShading);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(JacketBaseShading)).call.apply(t,[this,{loc:"+torso",layer:i.a.GENITALS,forcedSide:o.b.LEFT}].concat(r)))}return _inherits(JacketBaseShading,n["a"]),_createClass(JacketBaseShading,[{key:"calcDrawPoints",value:function calcDrawPoints(t){var e=calcJacket.call(this,t),r=e.top,n=e.mid,o=e.bot,i=1-this.chestCoverage,a=Object(v.extractPoint)(n);return a.cp1=o.cp1,a=Object(v.adjust)(a,3*-i,3*i),r.cp1=Object(v.adjust)(n.cp2,0*-i,-i),r.cp2=Object(v.adjust)(n.cp1,6*-i,2*-i),[r,n,o,a,a,r]}}]),JacketBaseShading}(),s=function(t){function JacketBasePart(){var t;_classCallCheck(this,JacketBasePart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(JacketBasePart)).call.apply(t,[this,{layer:i.a.GENITALS,loc:"torso",reflect:!0,aboveParts:["parts neck","parts chest","decorativeParts chest"],belowParts:["head"],shadingParts:[a]}].concat(r)))}return _inherits(JacketBasePart,p["c"]),_createClass(JacketBasePart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){var r=calcJacket.call(this,t),n=r.collarbone,o=r.top,i=r.mid,a=r.bot,s=r.outBot,c=r.outMid,l=r.breastBot,u=r.breastTip,f=r.outTop;p.a.simpleStrokeFill(e,t,this),e.beginPath(),Object(v.drawPoints)(e,n,o,i,a,s,c,l,u,f),e.fill(),e.stroke(),Object(h.i)(e,{stroke:this.liningPattern,fill:v.none},t),e.lineWidth=this.liningWidth,e.clip(),e.beginPath(),Object(v.drawPoints)(e,o,i,a,s),e.stroke()}}]),JacketBasePart}();function calcJacket(t){var e,r,n,o,i,a=Object(v.splitCurve)(.2,t.trapezius,t.collarbone),s=a.left.p2,c=Object(v.extractPoint)(t.collarbone),l=1-this.chestCoverage,u={x:(a=Object(v.splitCurve)(this.stomachCoverage,t.waist,t.hip)).left.p2.x*(.2+Object(v.clamp)(l,0,.8)),y:a.left.p2.y},f=Object(v.adjust)(a.left.p2,1,-1),p=t.breast;if(p){(e={x:t.waist.x*Object(v.clamp)(.8*l,0,1),y:.5*u.y+.5*p.bot.y}).cp1={x:p.center.x*Object(v.clamp)(.6-.7*this.chestCoverage,0,1)-2*l,y:p.top.y},e.cp2={x:p.tip.x*Object(v.clamp)(1.2-.85*this.chestCoverage,0,1),y:p.tip.y},u.cp1=Object(v.continueCurve)(s,e,Object(v.clamp)(.2+.5*l,0,1)),n=Object(v.extractPoint)(p.top),o=Object(v.adjust)(Object(v.extractPoint)(p.tip),.3,0);var h,y,b=p.tip.x-t.waist.x,d=r=(a=Object(v.splitCurve)(Object(v.clamp)(.06*b-.2,0,this.stomachCoverage),t.waist,f)).left.p2;d.x+=.1,r.cp1=a.right.p2.cp2,r.cp2=a.right.p2.cp1,r=Object(v.adjust)(r,1,0),2<b&&(a=Object(v.splitCurve)(Object(v.clamp)(.065*b,0,1),p.tip,p.bot),(i=Object(v.adjust)(a.left.p2,.05*b,.05*-b-1)).cp1=Object(v.continueCurve)(f,r,1),o.cp1=a.left.p2.cp2,o.cp2=a.left.p2.cp1,o.cp2.y-=Object(v.clamp)(3-.2*b,0,5)),n.cp1=p.tip.cp2,n.cp2=p.tip.cp1,r=Object(v.adjust)(r,(d.x-r.x)*this.cling,0),y=i.y>t.waist.y?(h=t.lat,t.waist):(h=t.waist,t.hip);var g=Object(v.interpolateCurve)(h,y,{x:null,y:i.y});a=Object(v.splitCurve)(g.t,h,y),g.cp1=a.right.p2.cp2,g.cp2=a.right.p2.cp1,i=Object(v.transformCurve)(d,i,d,g,this.cling),y=o.y>t.waist.y?(h=t.lat,t.waist):(h=t.waist,t.hip);var P=(Object(v.interpolateCurve)(h,y,{x:null,y:o.y}).x-o.x)*this.cling;o=Object(v.adjust)(o,P,0),n.cp1+=P,n.cp2+=P}else(e={x:.5*t.waist.x,y:t.waist.y}).cp1=Object(v.simpleQuadratic)(s,e,.5,3),u.cp1=Object(v.simpleQuadratic)(e,u,.5,-5),(r=Object(v.extractPoint)(t.waist)).cp1=t.hip.cp2,r.cp2=t.hip.cp1,r=Object(v.adjust)(r,.05*r.x,0),n=Object(v.extractPoint)(t.armpit);return f.cp1=null,f.cp2=null,{collarbone:c,top:s,mid:e,bot:u,outBot:f,outMid:r,breastBot:i,breastTip:o,outTop:n}}var c=function(t){function MediumLooseSleevePart(){var t;_classCallCheck(this,MediumLooseSleevePart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(MediumLooseSleevePart)).call.apply(t,[this,{layer:i.a.ARMS,loc:"arm",aboveParts:["parts arm","decorativeParts arm","parts hand"]}].concat(r)))}return _inherits(MediumLooseSleevePart,p["c"]),_createClass(MediumLooseSleevePart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){var r,n=Object(v.extractPoint)(t.collarbone);n.x-=.3,t.deltoids?(r=Object(v.adjust)(t.deltoids,1,0)).x+=2:r=Object(v.adjust)(t.shoulder,1,0),r.x+=1;var o={x:.5*t.armpit.x+.5*t.elbow.in.x,y:t.elbow.in.y},i={x:t.elbow.out.x+4,y:o.y+2};o.cp1={x:.7*i.x+.3*o.x,y:i.y},o.cp2={x:.3*i.x+.7*o.x,y:o.y-1};var a=calcJacket.call(this,t).outTop;a.x-=.3,p.a.simpleStrokeFill(e,t,this),e.beginPath(),Object(v.drawPoints)(e,n,r,i,o,a),e.fill(),e.stroke(),Object(h.i)(e,{stroke:this.liningPattern,fill:v.none},t),e.lineWidth=this.liningWidth,e.clip(),e.beginPath(),Object(v.drawPoints)(e,i,o),e.stroke()}}]),MediumLooseSleevePart}(),l=function(t){function Jacket(){var t;_classCallCheck(this,Jacket);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Jacket)).call.apply(t,[this,{clothingLayer:p.a.Layer.MID,stomachCoverage:.8,chestCoverage:.5,sleeveLength:.8,liningWidth:1,liningPattern:"#000",thickness:.8,cling:.4}].concat(r)))}return _inherits(Jacket,p["b"]),Jacket}(),u=function(t){function LooseJacket(){var t;_classCallCheck(this,LooseJacket);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(LooseJacket)).call.apply(t,[this,{stomachCoverage:.7,sleeveLength:1}].concat(r)))}return _inherits(LooseJacket,l),_createClass(LooseJacket,[{key:"fill",value:function fill(){return"hsl(0,10%,20%)"}},{key:"partPrototypes",get:function get(){return[{side:null,Part:s},{side:o.b.LEFT,Part:c},{side:o.b.RIGHT,Part:c}]}}]),LooseJacket}()},function(t,e,r){t.exports=r(81)},function(t,e,r){"use strict";r.d(e,"a",function(){return s});var n=r(16),o=r(1),i=r(0);function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var a=function(t){function FacialHair(){var t;_classCallCheck(this,FacialHair);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(FacialHair)).call.apply(t,[this,{loc:"+head",layer:o.a.BELOW_HAIR,aboveParts:["parts head"]}].concat(r)))}return _inherits(FacialHair,n["a"]),_createClass(FacialHair,[{key:"stroke",value:function stroke(){return i.none}},{key:"clipFill",value:function clipFill(){}},{key:"fill",value:function fill(t,e){return console.log(this),Object(i.adjustColor)(e.hairFill,{l:-5,s:-5})}}]),FacialHair}(),s=function(t){function Mustache(){var t;_classCallCheck(this,Mustache);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Mustache)).call.apply(t,[this].concat(r)))}return _inherits(Mustache,a),_createClass(Mustache,[{key:"stroke",value:function stroke(){return i.none}},{key:"clipFill",value:function clipFill(){}},{key:"fill",value:function fill(t,e){return console.log(this),Object(i.adjustColor)(e.hairFill,{l:-5,s:-5})}}]),Mustache}()},function(t,e,r){"use strict";r.d(e,"a",function(){return s});var n=r(16),o=r(1),i=r(0),a=r(25);function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var s=function(t){function LegFur(){var t;!function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,LegFur);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(LegFur)).call.apply(t,[this,a.a.brownFur,{fill:i.none,loc:"+leg",layer:o.a.FRONT,aboveParts:["parts leg"]}].concat(r)))}return function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}(LegFur,n["a"]),function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}(LegFur,[{key:"calcDrawPoints",value:function calcDrawPoints(t){var e=[];return e.extend(Object(i.drawCurl)(Object(i.adjust)(t.ankle.in,-1.5,0),5,10,.3,.7)),e.extend(Object(i.drawCurl)(Object(i.adjust)(t.ankle.inbot,4,-1),6,8,.55,0,.7)),e.extend(Object(i.drawCurl)(Object(i.adjust)(t.knee.in,-1.3,1),4,9,.4,.6,.6)),e.extend(Object(i.drawCurl)(Object(i.adjust)(t.calf.out,.7,-1),5,12,.7,-.5,-.35)),e.extend(Object(i.drawCurl)(Object(i.adjust)(t.thigh.out,.2,-3),6,10,.7,-.5,-.35)),e}}]),LegFur}()},function(t,e,r){"use strict";r.d(e,"a",function(){return s});var n=r(16),o=r(1),i=r(0),a=r(9);function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _toConsumableArray(t){return function _arrayWithoutHoles(t){if(Array.isArray(t)){for(var e=0,r=new Array(t.length);e<t.length;e++)r[e]=t[e];return r}}(t)||function _iterableToArray(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var s=function(t){function BeautyMark(){var t;!function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,BeautyMark);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(BeautyMark)).call.apply(t,[this,{offsetX:-10,offsetY:10,radius:.3,loc:"head",layer:o.a.BELOW_HAIR,aboveParts:["parts head"]}].concat(r)))}return function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}(BeautyMark,n["a"]),function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}(BeautyMark,[{key:"stroke",value:function stroke(){return i.none}},{key:"clipFill",value:function clipFill(){}},{key:"fill",value:function fill(t,e){return Object(a.b)(e.baseStroke,{s:-30,l:-30})}},{key:"calcDrawPoints",value:function calcDrawPoints(t,e,r,n){var o=Object(i.extractPoint)(t.lips.center);return o.x+=n.offsetX,o.y+=n.offsetY,[i.breakPoint].concat(_toConsumableArray(Object(i.drawCircle)(o,n.radius)))}}]),BeautyMark}()},function(t,e,r){"use strict";r.d(e,"a",function(){return O});var a=r(15),n=r(17),c=r(19),l=r(2),o=r(14),i=r(21),s=r(31),u=r(7),f=r(5),p=r(0),h=r(8),y=r(28),b=r(60),d=r(3),g=r(18),P=r(30),v=r(29),_=r(11);function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}function defaultBaseDimensions(t){return Object(a.d)(n.a[t],n.b[t])()}function defaultParts(t,e){for(var r=[],n=c.a[e][t],o=0;o<n.length;++o){var i=n[o],a=i.side,s=i.part;r.push(l.b.create(s,{side:a}))}return r}var O=function(){function Player(t){var r=this;if(function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,Player),!s.b)throw new Error("trying to create Player without having loaded first! (call load() before)");Object.assign(this,Player.defaultStats(),{skeleton:"human",parts:[],faceParts:[],decorativeParts:[],hairParts:[],clothingParts:[],inv:[],Mods:{},vitals:{},traits:[],_expression:b.a.neutral,hairFill:null,hairStroke:null,browFill:null});var e=["number","string","function"];for(var n in t){var o=_typeof(t[n]);t.hasOwnProperty(n)&&(e.includes(o)||Object(_.isPattern)(t[n]))&&(this[n]=t[n])}this.parts=defaultParts("defaultParts",this.skeleton),function addSexParts(o){var t,e=c.a[o.skeleton];o.isFemale()&&(t=e.femaleParts),o.isMale()&&(t=e.maleParts),t.forEach(function(t){var e=t.partGroup,r=t.side,n=t.part;o.attachPart(l.b.create(n,{side:r}),o[e])})}(this),this.decorativeParts=defaultParts("defaultDecorativeParts",this.skeleton),this.faceParts=defaultParts("defaultFaceParts",this.skeleton),this.shadingParts=[],this.parts.forEach(function(t){t.shadingParts&&t.shadingParts.forEach(function(t){var e=Object(l.c)(t);r.getPartInLocation(e)&&r.attachPart(l.b.create(t),r.shadingParts)})}),this.faceParts.forEach(function(t){t.shadingParts&&t.shadingParts.forEach(function(t){var e=Object(l.c)(t);r.getPartInLocation(e,r.faceParts)&&r.attachPart(l.b.create(t),r.shadingParts)})}),this.clothingParts=[],this.clothes=[],this.items=[],this.tattoos=[],Player.defaultClothes().forEach(function(t){r.wearClothing(t)}),t?(this.basedim=Object.assign({},defaultBaseDimensions(this.skeleton),t.basedim),this.Mods=Object.assign({},Player.defaultMods(),t.Mods),this.vitals=Object.assign({},Player.defaultVitals(),t.vitals),t.parts&&t.parts.forEach(function(t){r.attachPart(t)}),t.decorativeParts&&t.decorativeParts.forEach(function(t){r.attachPart(t,r.decorativeParts)}),t.faceParts&&t.faceParts.forEach(function(t){r.attachPart(t,r.faceParts)}),t.clothes&&(this.removeAllClothing(),t.clothes.forEach(function(t){r.wearClothing(t)})),t.items&&t.items.forEach(function(t){r.wieldItem(t)}),t.tattoos&&t.tattoos.forEach(function(t){r.addTattoo(t)})):(this.basedim=defaultBaseDimensions(this.skeleton),this.Mods=Player.defaultMods(),this.vitals=Player.defaultVitals()),this.calcDimensions()}return _createClass(Player,null,[{key:"defaultStats",value:function defaultStats(){return Object(a.d)(o.b,o.a)()}},{key:"defaultMods",value:function defaultMods(){return Object(a.d)(i.c,i.b)()}},{key:"defaultVitals",value:function defaultVitals(){return{}}},{key:"defaultClothes",value:function defaultClothes(){return[d.a.create(g.a),d.a.create(g.g)]}}]),_createClass(Player,[{key:"toString",value:function toString(){return this.name}},{key:"clampStats",value:function clampStats(){for(var t in o.b)!1!==o.b.hasOwnProperty(t)&&(this[t]=Object(p.clamp)(this[t],o.b[t].low,o.b[t].high))}},{key:"get",value:function get(t){return this[t]+this._clampedMods[t]}},{key:"getDim",value:function getDim(t){return this.basedim[t]+this._clampedMods[t]}},{key:"getMod",value:function getMod(t){return this._clampedMods[t]}},{key:"getDimDesc",value:function getDimDesc(t){return n.a[this.skeleton][t]}},{key:"calcDimensions",value:function calcDimensions(){for(var t in this._clampedMods={},this.Mods)i.c.hasOwnProperty(t)&&(this._clampedMods[t]=Object(p.clamp)(this.Mods[t],i.c[t].low,i.c[t].high));this.dim={};var e=n.a[this.skeleton];for(var r in e)!1!==e.hasOwnProperty(r)&&(e[r].hasOwnProperty("calc")?this.dim[r]=e[r].calc.call(this):this.dim[r]=this.getDim(r),this.dim[r]=Object(p.clamp)(this.dim[r],e[r].low,e[r].high));this.dim.torsoLength=.85*this.dim.height-this.dim.legLength,this.replaceHair(P.a[Math.round(this.dim.hairStyle)])}},{key:"attachPart",value:function attachPart(t){var r=this,e=1<arguments.length&&void 0!==arguments[1]?arguments[1]:this.parts;t instanceof f.a&&(e=this.shadingParts);for(var n=null,o=0;o<e.length;++o)if(Object(l.g)(t,e[o])){var i=e[o];e[o]=t,n=i;break}return null===n&&e.push(t),t.shadingParts&&t.shadingParts.forEach(function(t){var e=Object(l.c)(t);(r.getPartInLocation(e)||r.getPartInLocation(e,r.faceParts)||r.getPartInLocation(e,r.hairParts))&&r.attachPart(l.b.create(t),r.shadingParts)}),n}},{key:"getPartInLocation",value:function getPartInLocation(t){for(var e=1<arguments.length&&void 0!==arguments[1]?arguments[1]:this.parts,r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:0,n=Object(h.e)(t),o=0;o<e.length;++o)if(Object(h.e)(e[o].loc)===n){if(0<r){--r;continue}return e[o]}return null}},{key:"removeSpecificPart",value:function removeSpecificPart(t){for(var e=1<arguments.length&&void 0!==arguments[1]?arguments[1]:this.parts,r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:0,n=0;n<e.length;++n)if(e[n]instanceof t){if(0<r){--r;continue}var o=e[n];return e.splice(n,1),this.doRemovePart(o,e),o}return null}},{key:"checkPartCoveredByClothing",value:function checkPartCoveredByClothing(e){var r=this,n=!1;return e.coverConceal.forEach(function(t){"this"===t&&(t=e.loc),r.getClothingInLocation(t).forEach(function(t){t.noCover||(n=!0)})}),n}},{key:"removePart",value:function removePart(t){for(var e=1<arguments.length&&void 0!==arguments[1]?arguments[1]:this.parts,r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:0,n=0;n<e.length;++n)if(Object(h.e)(e[n].loc)===t){if(0<r){--r;continue}var o=e[n];return e.splice(n,1),this.doRemovePart(o,e),o}return null}},{key:"doRemovePart",value:function doRemovePart(t,e){var r=this;if(t.shadingParts&&t.shadingParts.forEach(function(t){r.removeSpecificPart(t,r.shadingParts)}),t.hasOwnProperty("childParts"))for(var n=t.childParts,o=0;o<n.length;++o){var i=Object(l.d)(t.loc,n[o]).childLoc;this.removePart(i,e)}}},{key:"replaceHair",value:function replaceHair(t){var e=this;this.hairParts.forEach(function(t){t.shadingParts&&t.shadingParts.forEach(function(t){e.removeSpecificPart(t,e.shadingParts)})}),this.hairParts=[],t.forEach(function(t){e.attachPart(u.a.create(t),e.hairParts)})}},{key:"applyExpression",value:function applyExpression(t){if(!1===t.hasOwnProperty("Mods"))throw new Error("Invalid expression object since it has no Mods");for(var e in this.removeExpression(),t.Mods)t.Mods.hasOwnProperty(e)&&(this.Mods[e]+=t.Mods[e]);if(t.hasOwnProperty("specificModification")){if(t.hasOwnProperty("removeSpecificModification"))throw new Error("Expression has specific modifications but no way of removing them");t.specificModification(this)}this._expression=t}},{key:"removeExpression",value:function removeExpression(){for(var t in this._expression.Mods)this._expression.Mods.hasOwnProperty(t)&&(this.Mods[t]-=this._expression.Mods[t]);this._expression.hasOwnProperty("removeSpecificModification")&&this._expression.removeSpecificModification(this)}},{key:"getClothingInLocation",value:function getClothingInLocation(e){var r=[];return this.clothingParts.forEach(function(t){Object(h.e)(t.loc)===e&&r.indexOf(t._owner)<0&&r.push(t._owner)}),r}},{key:"getConflictingClothing",value:function getConflictingClothing(i){var e=this,a=[];return i.parts.forEach(function(t){var n=Object(h.e)(t.loc),o=Object(h.c)(t.loc);e.clothingParts.forEach(function(t){if(Object(h.e)(t.loc)===n){var e=!1;if(t._owner.clothingLayer!==i.clothingLayer)return;if(Object.getPrototypeOf(t._owner)===Object.getPrototypeOf(i))e=!0;else{var r=Object(h.c)(t.loc);"-"===o||"-"===r?e=!0:"+"!==o&&"+"!==r&&(e=!0)}e&&a.indexOf(t._owner)<0&&a.push(t._owner)}})}),a}},{key:"wearClothing",value:function wearClothing(e){for(var r=this,t=this.getConflictingClothing(e),n=0;n<t.length;++n)if(!1===this.removeClothing(t[n]))return null;var o=this[e.requiredParts]||this.parts,i=!1;return e.parts.forEach(function(t){r.getPartInLocation(Object(h.e)(t.loc),o)&&(r.clothingParts.push(t),i=!0,t.shadingParts&&t.shadingParts.forEach(function(t){r.attachPart(l.b.create(t,{_owner:e}),r.shadingParts)}))}),i?(Object(a.a)(this.Mods,e.Mods),this.clothes.push(e),t):(t.forEach(function(t){r.wearClothing(t)}),null)}},{key:"removeClothing",value:function removeClothing(e){var r=this,t=this.clothes.indexOf(e);if(-1===t)return!1;if(e.cursed)return!1;var n=[];return this.clothingParts.forEach(function(t){t._owner!==e?n.push(t):t.shadingParts&&t.shadingParts.forEach(function(t){r.removeSpecificPart(t,r.shadingParts)})}),this.clothingParts=n,Object(a.e)(this.Mods,e.Mods),-1!==t&&this.clothes.splice(t,1),!0}},{key:"removeAllClothing",value:function removeAllClothing(){for(var t=[],e=this.clothes.length-1;0<=e;--e){var r=this.clothes[e];this.removeClothing(r)&&t.push(r)}return t}},{key:"wieldItem",value:function wieldItem(t){y.b.loadItem(t),t.modifyPose.call(this),this.items.push(t)}},{key:"removeItem",value:function removeItem(t){t.restorePose.call(this),this.items.splice(this.items.indexOf(t),1)}},{key:"addTattoo",value:function addTattoo(t){v.b.loadTattoo(t),this.tattoos.push(t)}},{key:"removeTattoo",value:function removeTattoo(t){this.tattoos.splice(this.tattoos.indexOf(t),1)}},{key:"heightAdjust",value:function heightAdjust(){var e=0;return this.getClothingInLocation("left feet").forEach(getMaxHeight),this.getClothingInLocation("right feet").forEach(getMaxHeight),e;function getMaxHeight(t){t.shoeHeight&&t.shoeHeight>e&&(e=t.shoeHeight)}}},{key:"isFemale",value:function isFemale(){return 5<this.fem}},{key:"isMale",value:function isMale(){return!this.isFemale()}},{key:"fillMissingDrawpoints",value:function fillMissingDrawpoints(t){t.deltoids=t.deltoids||Object(p.extractPoint)(t.collarbone),t.shoulder=t.shoulder||Object(p.extractPoint)(t.collarbone),t.elbow=t.elbow||{out:Object(p.extractPoint)(t.shoulder),in:Object(p.extractPoint)(t.armpit)},t.wrist=t.wrist||{out:Object(p.extractPoint)(t.elbow.out),in:Object(p.extractPoint)(t.elbow.in)}}}]),Player}()},function(t,e,r){"use strict";r.d(e,"a",function(){return p}),r.d(e,"b",function(){return h});var n=r(5),o=r(1),i=r(2),l=r(0),u=r(11);function _slicedToArray(t,e){return function _arrayWithHoles(t){if(Array.isArray(t))return t}(t)||function _iterableToArrayLimit(t,e){var r=[],n=!0,o=!1,i=void 0;try{for(var a,s=t[Symbol.iterator]();!(n=(a=s.next()).done)&&(r.push(a.value),!e||r.length!==e);n=!0);}catch(t){o=!0,i=t}finally{try{n||null==s.return||s.return()}finally{if(o)throw i}}return r}(t,e)||function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var a=function(t){function LeftBreastShading(){var t;_classCallCheck(this,LeftBreastShading);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(LeftBreastShading)).call.apply(t,[this,{loc:"chest",layer:o.a.GENITALS,forcedSide:i.b.LEFT}].concat(r)))}return _inherits(LeftBreastShading,n["a"]),_createClass(LeftBreastShading,[{key:"fill",value:function fill(){return n.b}},{key:"calcDrawPoints",value:function calcDrawPoints(t){if(!1===t.hasOwnProperty("breast"))return[];var e={x:t.breast.cleavage.x+.5,y:t.breast.cleavage.y+.4*this.breastSize},r=Object(l.extractPoint)(t.breast.bot);return e.cp1=Object(l.continueCurve)(t.breast.in,t.breast.cleavage),r.cp1={x:e.x,y:.3*e.y+.7*r.y},r.cp2={x:r.x-6+.32*this.breastSize,y:r.y+7},[r,t.breast.in,t.breast.cleavage,e,r]}}]),LeftBreastShading}(),s=function(t){function LeftBreastUnderShading(){var t;_classCallCheck(this,LeftBreastUnderShading);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(LeftBreastUnderShading)).call.apply(t,[this,{loc:"+chest",layer:o.a.FRONT,forcedSide:i.b.LEFT}].concat(r)))}return _inherits(LeftBreastUnderShading,n["a"]),_createClass(LeftBreastUnderShading,[{key:"calcDrawPoints",value:function calcDrawPoints(t){if(!1===t.hasOwnProperty("breast"))return[];var e={x:t.breast.cleavage.x+.5,y:t.breast.cleavage.y+.4*this.breastSize},r=Object(l.extractPoint)(t.breast.bot);e.cp1=Object(l.continueCurve)(t.breast.in,t.breast.cleavage);var n=Object(l.extractPoint)(t.breast.cleavage);return n.x-=.05*this.breastSize,n.y-=.02*this.breastSize,n.cp1={x:1*e.x+0*n.x,y:e.y-.02*this.breastSize},n.cp2={x:n.x,y:.5*n.y+.5*e.y},r.cp1={x:n.x-.02*this.breastSize,y:n.y-.3*this.breastSize-5},r.cp2={x:r.x-2-.05*this.breastSize,y:r.y-2-.03*this.breastSize},[r,t.breast.in,t.breast.cleavage,e,n,r]}}]),LeftBreastUnderShading}(),c=function(t){function RightBreastShading(){var t;_classCallCheck(this,RightBreastShading);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(RightBreastShading)).call.apply(t,[this,{loc:"chest",layer:o.a.GENITALS,forcedSide:i.b.RIGHT}].concat(r)))}return _inherits(RightBreastShading,n["a"]),_createClass(RightBreastShading,[{key:"fill",value:function fill(){return n.b}},{key:"calcDrawPoints",value:function calcDrawPoints(t){if(!1===t.hasOwnProperty("breast"))return[];var e=Object(l.extractPoint)(t.breast.bot),r=_slicedToArray(Object(l.adjustPoints)(.25*-this.breastSize,0,t.breast.tip,t.breast.bot.cp1,t.breast.bot.cp2),3),n=r[0],o=r[1],i=r[2];e.cp1=o,e.cp2=i;var a=_slicedToArray(Object(l.adjustPoints)(.1*this.breastSize,.12*-this.breastSize,Object(l.reverseDrawPoint)(t.breast.tip,t.breast.bot),Object(l.reverseDrawPoint)(t.breast.top,t.breast.tip)),2),s=a[0],c=a[1];return c.x=t.breast.top.x,c.y=t.breast.top.y,[t.breast.top,n,e,s,c]}}]),RightBreastShading}(),f=function(t){function Chest(){var t;_classCallCheck(this,Chest);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Chest)).call.apply(t,[this,{loc:"chest",reflect:!0,layer:o.a.GENITALS,aboveParts:["parts torso","decorativeParts torso","arm"]}].concat(r)))}return _inherits(Chest,i["a"]),Chest}(),p=function(t){function BimboChest(){var t;_classCallCheck(this,BimboChest);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(BimboChest)).call.apply(t,[this,{shadingParts:[a,s,c]}].concat(r)))}return _inherits(BimboChest,f),_createClass(BimboChest,[{key:"calcDrawPoints",value:function calcDrawPoints(t,e,r){if(this.breastSize<0)return[];if(r){var n=t.breast={},o=this.breastSize-2;n.top={x:t.armpit.x-2.2+.03*this.breastSize,y:t.armpit.y+.5+.023*this.height+.05*this.breastSize},this.breastSize<2&&(n.top.x+=.1*o);var i=.006*Math.pow(Object(l.clamp)(o-e.breastPerkiness,0,100),2);n.center={x:t.armpit.x-3+.06*o+.02*i,y:n.top.y-6-.09*o-i+.02*e.breastPerkiness},o=Math.max(0,o),n.tip={x:n.center.x+3.3+.28*o+.04*e.breastPerkiness,y:n.center.y+.07*e.breastPerkiness,cp1:{x:n.top.x+2+.21*o-.5*i,y:n.top.y-3+Object(l.clamp)(.15*e.breastPerkiness,-4,4)-.7*i}},n.tip.cp2={x:n.tip.x-.1*i,y:n.tip.y+2+.21*o},n.bot={x:n.center.x-1.5+.03*o,y:n.center.y-3.8-.24*o-.05*i+.08*e.breastPerkiness},n.bot.cp1=Object(l.continueCurve)(n.top,n.tip,Object(l.clamp)(.6+.05*i,0,1)),n.bot.cp2={x:n.bot.x+3.5+.15*o,y:n.bot.y},n.cleavage={x:.5,y:n.tip.y},n.cleavage.cp1=Object(l.continueCurve)(n.tip,n.bot),n.cleavage.cp2={x:n.cleavage.x,y:n.cleavage.y-2.5-.15*o};var a=Object(l.splitCurve)(Object(l.clamp)((o+5)/30,0,1),n.bot,n.cleavage);n.in=a.left.p2,n.cleavage=a.right.p2}var s=Object(l.splitCurve)(Object(l.clamp)(1-3*this.breastSize/2,0,1),t.breast.top,t.breast.tip),c=s.right.p1;return t.breast.tip=s.right.p2,t.breast.top=Object(u.connectEndPoints)(t.breast.cleavage,c),[l.breakPoint,c,t.breast.tip,t.breast.bot,t.breast.in,t.breast.cleavage,t.breast.top]}}]),BimboChest}(),h=function(t){function BimboNipples(){var t;_classCallCheck(this,BimboNipples);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(BimboNipples)).call.apply(t,[this,{fill:l.none,loc:"+chest",aboveParts:["parts chest","decorativeParts chest"]}].concat(r)))}return _inherits(BimboNipples,f),_createClass(BimboNipples,[{key:"strokeClip",value:function strokeClip(){}},{key:"stroke",value:function stroke(t,e){return e.baseLipColor}},{key:"getLineWidth",value:function getLineWidth(t){return.05*t.dim.breastSize+.1*t.dim.areolaSize}},{key:"calcDrawPoints",value:function calcDrawPoints(t,e,r){return t.chest=t.chest||{},r&&(t.breast?t.chest.nipples={x:t.breast.center.x-1.5+.14*this.breastSize,y:t.breast.tip.y-.12*this.breastSize+.1*e.breastPerkiness}:t.chest.nipples={x:t.armpit.x-5-.08*this.upperMuscle,y:t.armpit.y-3}),[l.breakPoint,t.chest.nipples]}}]),BimboNipples}()},function(t,e,r){"use strict";r.d(e,"i",function(){return calcDressShirt}),r.d(e,"b",function(){return i}),r.d(e,"e",function(){return a}),r.d(e,"d",function(){return s}),r.d(e,"c",function(){return c}),r.d(e,"f",function(){return l}),r.d(e,"a",function(){return u}),r.d(e,"h",function(){return f}),r.d(e,"g",function(){return y});var b=r(3),n=r(2),d=r(12),o=r(1),g=r(6),p=r(22),h=r(61),P=r(0);function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _toConsumableArray(t){return function _arrayWithoutHoles(t){if(Array.isArray(t)){for(var e=0,r=new Array(t.length);e<t.length;e++)r[e]=t[e];return r}}(t)||function _iterableToArray(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}function calcDressShirt(t){var e=h.f.call(this,t),r=e.outBot,n=e.outMid,o=e.breastBot,i=e.breastTip,a=e.outTop,s=p.i.call(this,t),c=s.top,l=s.cusp,u=s.collarbone,f=s.bot;return c.x+=this.topParted,c.y-=.4*this.topParted,f.bot.x+=this.botParted,f.bot=Object(d.a)(c,f.bot,-.01*(this.topParted+this.botParted)),r.cp1=Object(P.simpleQuadratic)(f.bot,r,.5,-1),{collarbone:u,cusp:l=Object(P.reverseDrawPoint)(l,u),top:c,bot:f,outBot:r,outMid:n,breastBot:o,breastTip:i,outTop:a}}var i=function(t){function DressShirtBasePart(){var t;_classCallCheck(this,DressShirtBasePart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(DressShirtBasePart)).call.apply(t,[this,{layer:o.a.FRONT,loc:"+torso",reflect:!0,aboveParts:["parts neck","parts torso","decorativeParts torso"],aboveSameLayerParts:["groin"]}].concat(r)))}return _inherits(DressShirtBasePart,b["c"]),_createClass(DressShirtBasePart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){var r=calcDressShirt.call(this,t),n=r.collarbone,o=r.cusp,i=r.top,a=r.bot,s=r.outBot,c=r.outMid,l=r.breastBot,u=r.breastTip;b.a.simpleStrokeFill(e,t,this),e.beginPath(),Object(P.drawPoints)(e,n,o,i,a.bot,s,c,l,u,Object(P.extractPoint)(t.armpit)),e.fill(),e.clip(),Object(g.i)(e,{stroke:this.liningPattern,fill:P.none},t),e.lineWidth=this.liningWidth,e.beginPath(),Object(P.drawPoints)(e,i,a.bot),e.stroke()}}]),DressShirtBasePart}(),a=function(t){function DressShirtCollarPart(){var t;_classCallCheck(this,DressShirtCollarPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(DressShirtCollarPart)).call.apply(t,[this,{layer:o.a.GENITALS,loc:"+neck",reflect:!0,aboveParts:["parts neck","parts torso","decorativeParts torso"]}].concat(r)))}return _inherits(DressShirtCollarPart,b["c"]),_createClass(DressShirtCollarPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){var r=calcDressShirt.call(this,t),n=r.collarbone,o=r.cusp,i=r.top,a=Object(P.splitCurve)(1-this.collarCoverage,n,o).left.p2,s=Object(P.adjust)(Object(P.extractPoint)(i),this.collarWidth+.25*this.topParted,-this.collarHeight+.3*this.topParted);Object(g.i)(e,{stroke:P.none,fill:this.collarPattern},t),e.beginPath(),Object(P.drawPoints)(e,a,o,i,s,a),e.fill()}}]),DressShirtCollarPart}(),s=function(t){function DressShirtButtonPart(){var t;_classCallCheck(this,DressShirtButtonPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(DressShirtButtonPart)).call.apply(t,[this,{layer:o.a.FRONT,loc:"+torso",reflect:!1,forcedNoSideString:!0,aboveParts:["parts torso","decorativeParts torso"],aboveSameLayerParts:["torso"]},{buttonStroke:"#fff",buttonFill:"#ccc",buttonRadius:1,buttonThickness:1,buttonCoverage:.77}].concat(r)))}return _inherits(DressShirtButtonPart,b["c"]),_createClass(DressShirtButtonPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){for(var r=calcDressShirt.call(this,t),n=r.top,o=r.bot,i=[],a=.1;a<1;a+=1.001-this.buttonCoverage){var s=Object(P.splitCurve)(a,n,o.bot),c=0;(.2<s.left.p2.x||s.left.p2.x<-.2)&&(c=Object(P.clamp)(Math.abs(s.left.p2.x),0,1.5*this.buttonRadius));var l=Object(P.adjust)(s.left.p2,c,0);i.push.apply(i,_toConsumableArray(Object(P.drawCircle)(l,this.buttonRadius)).concat([P.breakPoint]))}Object(g.i)(e,{stroke:this.buttonStroke,fill:this.buttonFill},t),e.lineWidth=this.buttonThickness,e.beginPath(),P.drawPoints.apply(void 0,[e].concat(i)),e.fill(),e.stroke()}}]),DressShirtButtonPart}(),c=function(t){function DressShirtBreastPart(){var t;_classCallCheck(this,DressShirtBreastPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(DressShirtBreastPart)).call.apply(t,[this,{layer:o.a.GENITALS,loc:"+chest",reflect:!0,aboveParts:["parts chest","decorativeParts chest"]}].concat(r)))}return _inherits(DressShirtBreastPart,b["c"]),_createClass(DressShirtBreastPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){if(!Object(d.b)(t,e,this)){var r,n,o=calcDressShirt.call(this,t),i=o.collarbone,a=o.cusp,s=o.top,c=o.bot,l=o.outBot;n=c.bot,r=s,e.beginPath(),Object(P.drawPoints)(e,i,a,s,c.bot,l,{x:l.x+50,y:l.y},{x:i.x+50,y:i.y}),e.clip();var u=Object(P.adjust)(t.breast.top,0,0),f=Object(P.adjust)(t.breast.tip,.1,0),p=Object(P.adjust)(t.breast.bot,0,-.1),h=Object(P.adjust)(t.breast.cleavage,0,-.1),y=Object(P.adjust)(t.breast.in,0,-.1);b.a.simpleStrokeFill(e,t,this),e.beginPath(),Object(P.drawPoints)(e,u,f,p,y,h,Object(d.a)(h,u)),e.fill(),e.clip(),Object(g.i)(e,{stroke:this.liningPattern,fill:P.none},t),e.lineWidth=this.liningWidth,e.beginPath(),Object(P.drawPoints)(e,r,n),e.stroke()}}}]),DressShirtBreastPart}(),l=function(t){function LongSleeveCuffPart(){var t;_classCallCheck(this,LongSleeveCuffPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(LongSleeveCuffPart)).call.apply(t,[this,{layer:o.a.ARMS,loc:"+arm",reflect:!1,aboveParts:["parts arm","decorativeParts arm"],aboveSameLayerParts:["arm"]},{cuffPattern:"#a4c3ca"}].concat(r)))}return _inherits(LongSleeveCuffPart,b["c"]),_createClass(LongSleeveCuffPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){var r=p.h.call(this,t),n=r.elbowOut,o=r.out,i=r.bot,a=r.elbow,s=Object(P.splitCurve)(.7,n,o),c=Object(P.adjust)(s.right.p1,1.5,0);o.cp1=s.right.p2.cp1,o.cp2=s.right.p2.cp2;var l=(s=Object(P.splitCurve)(.3,i,a)).left.p2;Object(g.i)(e,{stroke:P.none,fill:this.cuffPattern},t),e.beginPath(),Object(P.drawPoints)(e,c,o,i,l,c),e.fill();var u=Object(P.drawCircle)(Object(P.adjust)(c,-2,-2),.5*this.buttonRadius);Object(g.i)(e,{stroke:this.buttonStroke,fill:this.buttonFill},t),e.lineWidth=.5*this.buttonThickness,e.beginPath(),P.drawPoints.apply(void 0,[e].concat(_toConsumableArray(u))),e.fill(),e.stroke()}}]),LongSleeveCuffPart}(),u=function(t){function DressShirt(){var t;_classCallCheck(this,DressShirt);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(DressShirt)).call.apply(t,[this,{clothingLayer:b.a.Layer.MID,stomachCoverage:.9,neckCoverage:0,liningWidth:3.5,liningPattern:"#98aaaf",collarCoverage:.25,collarHeight:7,collarWidth:3,collarPattern:"#a4c3ca",topParted:4,botParted:0,cling:.6}].concat(r)))}return _inherits(DressShirt,b["b"]),DressShirt}(),f=function(t){function WomenDressShirt(){var t;_classCallCheck(this,WomenDressShirt);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(WomenDressShirt)).call.apply(t,[this].concat(r)))}return _inherits(WomenDressShirt,u),_createClass(WomenDressShirt,[{key:"stroke",value:function stroke(){return P.none}},{key:"fill",value:function fill(){return"hsl(198.9,42.2%,82.4%)"}},{key:"partPrototypes",get:function get(){return[{side:null,Part:i},{side:null,Part:a},{side:null,Part:c},{side:n.b.LEFT,Part:p.c},{side:n.b.RIGHT,Part:p.c},{side:n.b.RIGHT,Part:l},{side:n.b.LEFT,Part:l},{side:n.b.RIGHT,Part:s}]}}]),WomenDressShirt}(),y=function(t){function MenDressShirt(){var t;_classCallCheck(this,MenDressShirt);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(MenDressShirt)).call.apply(t,[this].concat(r)))}return _inherits(MenDressShirt,u),_createClass(MenDressShirt,[{key:"stroke",value:function stroke(){return P.none}},{key:"fill",value:function fill(){return"hsl(198.9,42.2%,82.4%)"}},{key:"partPrototypes",get:function get(){return[{side:null,Part:i},{side:null,Part:a},{side:null,Part:c},{side:n.b.LEFT,Part:p.c},{side:n.b.RIGHT,Part:p.c},{side:n.b.RIGHT,Part:l},{side:n.b.LEFT,Part:l},{side:n.b.LEFT,Part:s}]}}]),MenDressShirt}()},function(t,e,r){"use strict";r.d(e,"e",function(){return a}),r.d(e,"d",function(){return s}),r.d(e,"c",function(){return l}),r.d(e,"h",function(){return u}),r.d(e,"k",function(){return calcHeels}),r.d(e,"f",function(){return y}),r.d(e,"g",function(){return b}),r.d(e,"j",function(){return calcHeelBaseClosed}),r.d(e,"i",function(){return d}),r.d(e,"a",function(){return g}),r.d(e,"b",function(){return P});var p=r(3),c=r(5),n=r(2),o=r(1),f=r(6),i=r(26),h=r(0);function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var a=function(t){function HeelPart(){var t;_classCallCheck(this,HeelPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(HeelPart)).call.apply(t,[this,{layer:o.a.FRONT,loc:"feet",aboveParts:["parts feet","parts leg"],belowParts:["shadingParts feet"]}].concat(r)))}return _inherits(HeelPart,p["c"]),HeelPart}(),s=function(t){function HeelBaseShine(){var t;_classCallCheck(this,HeelBaseShine);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(HeelBaseShine)).call.apply(t,[this,{layer:o.a.ARMS}].concat(r)))}return _inherits(HeelBaseShine,a),_createClass(HeelBaseShine,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){var r=calcHeels.call(this,t),n=r.bot,o=r.outBot,i=r.out;n.y+=3,n.x+=1;var a=Object(h.adjust)(o,-1,.5),s=Object(h.adjust)(i,-.5,-4.8);a.cp1=Object(h.simpleQuadratic)(n,a,.7,-1),s.cp1=Object(h.simpleQuadratic)(a,s,.5,-.5),n.cp1=Object(h.simpleQuadratic)(s,n,.3,1),e.fillStyle=c.c,e.beginPath(),Object(h.drawPoints)(e,n,a,s,n),e.fill()}}]),HeelBaseShine}(),l=function(t){function HeelBasePart(){var t;_classCallCheck(this,HeelBasePart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(HeelBasePart)).call.apply(t,[this].concat(r)))}return _inherits(HeelBasePart,a),_createClass(HeelBasePart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){var r=t.toe;r.toebox={x:r.center.x,y:r.center.y};var n=calcHeels.call(this,t),o=n.out,i=n.outBot,a=n.bot,s=n.inBot,c=n.inTop,l=n.tongue;a.cp1=Object(h.simpleQuadratic)(i,a,.6,2),s.cp1=Object(h.simpleQuadratic)(a,s,.6,2),l.cp1=Object(h.scale)(c,.5,s),l.cp2={x:l.x-4,y:l.y},o.cp1=Object(h.continueCurve)(c,l,1),o.cp2=Object(h.scale)(o,.5,i),i.cp1=Object(h.simpleQuadratic)(o,i,.8,.6),c.cp1=Object(h.simpleQuadratic)(s,c,.1,1),p.a.simpleStrokeFill(e,t,this),e.beginPath(),Object(h.drawPoints)(e,o,i,a,s,c,l,o),e.fill();var u=Object(h.extractPoint)(t.ankle.in),f=Object(h.splitCurve)(.6,t.toe.in,t.ankle.inbot).left.p2;f.cp1=Object(h.simpleQuadratic)(u,f,.2,-3.3),u.cp1=Object(h.simpleQuadratic)(f,u,.7,1.4),e.beginPath(),Object(h.drawPoints)(e,u,f,u),e.fill()}}]),HeelBasePart}(),u=function(t){function HeelStrapPart(){var t;_classCallCheck(this,HeelStrapPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(HeelStrapPart)).call.apply(t,[this].concat(r)))}return _inherits(HeelStrapPart,a),_createClass(HeelStrapPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){var r=Object(h.extractPoint)(t.ankle.out),n=Object(h.extractPoint)(t.ankle.in);n.cp1=Object(h.simpleQuadratic)(r,n,.5,2),Object(f.i)(e,{fill:this.fill,stroke:this.fill},t),e.lineWidth=this.strapWidth,e.beginPath(),Object(h.drawPoints)(e,r,n),e.stroke()}}]),HeelStrapPart}();function calcHeels(t){var e=t.toe,r=Object(h.splitCurve)(.7,t.ankle.outbot,e.out),n=r.left.p2,o={x:e.out.x+2,y:e.in.y+2},i={x:.45*e.out.x+.55*e.in.x,y:e.in.y-this.heelPointiness};return{out:n,outBot:o,bot:i,inBot:{x:e.in.x-2.5,y:e.in.y+2},inTop:(r=Object(h.splitCurve)(.6,e.in,t.ankle.inbot)).left.p2,tongue:{x:i.x,y:e.center.y-2+1.8*this.toeCoverage}}}var y=function(t){function HeelSideBaseClosedPart(){var t;_classCallCheck(this,HeelSideBaseClosedPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(HeelSideBaseClosedPart)).call.apply(t,[this].concat(r)))}return _inherits(HeelSideBaseClosedPart,i["g"]),_createClass(HeelSideBaseClosedPart,[{key:"renderShoeSidePart",value:function renderShoeSidePart(t,e){var r=calcHeelBaseClosed.call(this,t),n=r.toeTip,o=r.soleBot,i=r.archTip,a=r.heelTip,s=r.heelTipIn,c=r.heelBack,l=r.counterTip,u=r.vamp;o.cp1={x:n.x-3,y:n.y-3},o.cp2={x:o.x-8,y:o.y},i.cp1={x:o.x+28,y:o.y},i.cp2={x:i.x-20,y:i.y-10},a.cp1={x:a.x,y:i.y},c.cp1={x:a.x+2,y:a.y+10},c.cp2={x:c.x-1,y:c.y},l.cp1={x:c.x+3,y:c.y+10},l.cp2={x:l.x+3,y:l.y-5},u.cp1={x:l.x-19,y:l.y-5},u.cp2={x:u.x+18,y:u.y-10},e.beginPath(),Object(f.i)(e,{stroke:this.fill,fill:this.fill},t),Object(h.drawPoints)(e,n,o,i,a,s,c,l,u,n),e.fill()}}]),HeelSideBaseClosedPart}(),b=function(t){function HeelSideSimpleStrapPart(){var t;_classCallCheck(this,HeelSideSimpleStrapPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(HeelSideSimpleStrapPart)).call.apply(t,[this].concat(r)))}return _inherits(HeelSideSimpleStrapPart,i["g"]),_createClass(HeelSideSimpleStrapPart,[{key:"renderShoeSidePart",value:function renderShoeSidePart(t,e){var r=calcHeelBaseClosed.call(this,t).counterTip,n=Object(h.adjust)(r,-10,0);e.beginPath(),Object(f.i)(e,{stroke:this.fill,fill:this.fill},t),e.lineWidth=2,e.ellipse(n.x-1,n.y-2,10,3.5,-.95*Math.PI,0,2*Math.PI),e.stroke()}}]),HeelSideSimpleStrapPart}();function calcHeelBaseClosed(){var t={x:5,y:12},e={x:t.x+13,y:t.y-9},r={x:t.x+65-4*this.shoeHeight,y:t.y+5*this.shoeHeight},n={x:r.x+6-.5*this.heelTipWidth,y:e.y},o={x:n.x+.5*this.heelTipWidth,y:n.y},i={x:r.x+10,y:r.y};return{toeTip:t,soleBot:e,archTip:r,heelTip:n,heelTipIn:o,heelBack:i,counterTip:{x:r.x+4,y:i.y+19},vamp:{x:t.x+10+1.7*this.toeCoverage,y:t.y+4+1.3*this.toeCoverage}}}var d=function(t){function Heels(){var t,e;_classCallCheck(this,Heels);for(var r=arguments.length,n=new Array(r),o=0;o<r;o++)n[o]=arguments[o];return(e=_possibleConstructorReturn(this,(t=_getPrototypeOf(Heels)).call.apply(t,[this,{clothingLayer:p.a.Layer.MID,thickness:1,shoeHeight:3,platformHeight:0,heelTipWidth:5,basePointiness:5,toeCoverage:.5,shoeTightness:10}].concat(n)))).Mods=Object.assign({feetWidth:-e.shoeTightness,feetLength:0},e.Mods),e.Mods.feetLength+=4*(e.shoeHeight-e.platformHeight),e.Mods.feetWidth-=e.shoeHeight-e.platformHeight,e.heelPointiness=e.basePointiness-.5*(e.shoeHeight-e.platformHeight),e}return _inherits(Heels,p["b"]),_createClass(Heels,[{key:"fill",value:function fill(){return"#000"}}]),Heels}(),g=function(t){function ClosedToePumps(){var t;_classCallCheck(this,ClosedToePumps);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(ClosedToePumps)).call.apply(t,[this].concat(r)))}return _inherits(ClosedToePumps,d),_createClass(ClosedToePumps,[{key:"partPrototypes",get:function get(){return[{side:n.b.LEFT,Part:l},{side:n.b.RIGHT,Part:l},{side:n.b.LEFT,Part:s},{side:n.b.RIGHT,Part:y}]}}]),ClosedToePumps}(),P=function(t){function ClosedToeStrappedPumps(){var t;_classCallCheck(this,ClosedToeStrappedPumps);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(ClosedToeStrappedPumps)).call.apply(t,[this,{strapWidth:1.5}].concat(r)))}return _inherits(ClosedToeStrappedPumps,d),_createClass(ClosedToeStrappedPumps,[{key:"partPrototypes",get:function get(){return[{side:n.b.LEFT,Part:l},{side:n.b.RIGHT,Part:l},{side:n.b.LEFT,Part:u},{side:n.b.RIGHT,Part:u},{side:n.b.LEFT,Part:s},{side:n.b.RIGHT,Part:y},{side:n.b.RIGHT,Part:b}]}}]),ClosedToeStrappedPumps}()},function(t,e,r){"use strict";r.d(e,"c",function(){return n}),r.d(e,"b",function(){return s}),r.d(e,"f",function(){return calcCap}),r.d(e,"d",function(){return c}),r.d(e,"e",function(){return f}),r.d(e,"a",function(){return p});var a=r(3),o=r(1),l=r(6),u=r(0),i=r(11);function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var n=function(t){function CapBasePart(){var t;_classCallCheck(this,CapBasePart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(CapBasePart)).call.apply(t,[this,{layer:o.a.ABOVE_HAIR,loc:"head"},{height:4.5,sideBias:-.15,curvature:7,headCoverage:.2,sideOffset:2.3}].concat(r)))}return _inherits(CapBasePart,a["c"]),_createClass(CapBasePart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){var r=calcCap.call(this,t),n=r.rightBot,o=r.leftBot,i=r.top;a.a.simpleStrokeFill(e,t,this),e.beginPath(),Object(u.drawPoints)(e,n,o,i,n),e.fill(),e.stroke()}}]),CapBasePart}(),s=function(t){function CapBandPart(){var t;_classCallCheck(this,CapBandPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(CapBandPart)).call.apply(t,[this,{layer:o.a.ABOVE_HAIR,loc:"+head",aboveParts:["clothingParts head"]},{bandWidth:1.6,bandPattern:"black"}].concat(r)))}return _inherits(CapBandPart,a["c"]),_createClass(CapBandPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){var r=calcCap.call(this,t),n=r.rightBot,o=r.leftBot,i=r.top,a=Object(u.adjust)(Object(u.getPointOnCurve)(.1*this.bandWidth,o,i),-.5,0),s=Object(u.adjust)(Object(u.getPointOnCurve)(1-.1*this.bandWidth,i,n),.5,0);s.cp1=Object(u.adjust)(o.cp1,0,s.y-n.y),a.cp1=Object(u.simpleQuadratic)(o,a,.5,1);var c=Object(u.extractPoint)(n);c.cp1=Object(u.simpleQuadratic)(s,c,.5,1),Object(l.i)(e,{fill:this.bandPattern,stroke:this.stroke},t),e.beginPath(),Object(u.drawPoints)(e,n,o,a,s,c),e.fill(),e.stroke()}}]),CapBandPart}();function calcCap(t){var e=Object(u.adjust)(Object(u.getPointOnCurve)(this.headCoverage,t.skull.side,t.skull.bot),this.sideOffset,0),r={x:-e.x,y:e.y};r.cp1=Object(u.simpleQuadratic)(e,r,this.sideBias+.5,-this.curvature);var n={x:.5*this.sideBias*e.x,y:t.skull.y+this.height},o=Object(i.averagePoint)(r,n,.65).y;return n.cp1={x:r.x-2,y:o},n.cp2={x:Object(i.averagePoint)(r,n,.5).x,y:n.y},e.cp1={x:Object(i.averagePoint)(e,n,.5).x,y:n.y},e.cp2={x:e.x+2,y:o},{rightBot:e,leftBot:r,top:n}}var c=function(t){function Hat(){var t;_classCallCheck(this,Hat);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Hat)).call.apply(t,[this,{clothingLayer:a.a.Layer.OUTER}].concat(r)))}return _inherits(Hat,a["b"]),Hat}(),f=function(t){function SimpleCap(){var t;_classCallCheck(this,SimpleCap);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(SimpleCap)).call.apply(t,[this].concat(r)))}return _inherits(SimpleCap,c),_createClass(SimpleCap,[{key:"partPrototypes",get:function get(){return[{side:null,Part:n}]}}]),SimpleCap}(),p=function(t){function BandedCap(){var t;_classCallCheck(this,BandedCap);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(BandedCap)).call.apply(t,[this].concat(r)))}return _inherits(BandedCap,c),_createClass(BandedCap,[{key:"partPrototypes",get:function get(){return[{side:null,Part:n},{side:null,Part:s}]}}]),BandedCap}()},function(t,e,r){"use strict";r.d(e,"e",function(){return n}),r.d(e,"g",function(){return c}),r.d(e,"h",function(){return l}),r.d(e,"b",function(){return u}),r.d(e,"c",function(){return f}),r.d(e,"d",function(){return p}),r.d(e,"f",function(){return h}),r.d(e,"i",function(){return y}),r.d(e,"a",function(){return b});var i=r(3),o=r(1),a=r(11),s=r(0);function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _toConsumableArray(t){return function _arrayWithoutHoles(t){if(Array.isArray(t)){for(var e=0,r=new Array(t.length);e<t.length;e++)r[e]=t[e];return r}}(t)||function _iterableToArray(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var n=function(t){function RingBotPart(){var t;_classCallCheck(this,RingBotPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(RingBotPart)).call.apply(t,[this,{layer:o.a.BELOW_HAIR,loc:"".concat(a.Location.EAR),reflect:!1,belowParts:["faceParts ".concat(a.Location.EAR)]},{radius:2}].concat(r)))}return _inherits(RingBotPart,i["c"]),_createClass(RingBotPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){var r=Object(a.locateRelativeToDrawpoint)(t,this.relativeLocation);i.a.simpleStrokeFill(e,t,this),e.beginPath(),e.arc(r.x,r.y,this.radius,0,2*Math.PI),e.stroke()}}]),RingBotPart}(),c=function(t){function RingTopPart(){var t;_classCallCheck(this,RingTopPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(RingTopPart)).call.apply(t,[this,{layer:o.a.BELOW_HAIR,loc:"".concat(a.Location.EAR),reflect:!1,aboveParts:["faceParts ".concat(a.Location.EAR)]}].concat(r)))}return _inherits(RingTopPart,i["c"]),_createClass(RingTopPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){var r=Object(a.locateRelativeToDrawpoint)(t,this.relativeLocation);i.a.simpleStrokeFill(e,t,this),e.beginPath();var n=Object(s.rad)(this.rotation);e.arc(r.x,r.y,this.radius,n,Math.PI+n),e.stroke()}}]),RingTopPart}(),l=function(t){function StudPart(){var t;_classCallCheck(this,StudPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(StudPart)).call.apply(t,[this,{layer:o.a.BELOW_HAIR,loc:"".concat(a.Location.NOSE),reflect:!1,aboveParts:["faceParts ".concat(a.Location.NOSE)]},{radius:.3}].concat(r)))}return _inherits(StudPart,i["c"]),_createClass(StudPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){var r=Object(a.locateRelativeToDrawpoint)(t,this.relativeLocation);i.a.simpleStrokeFill(e,t,this),e.beginPath();var n=da.drawCircle(r,this.radius);s.drawPoints.apply(void 0,[e].concat(_toConsumableArray(n))),e.fill()}}]),StudPart}(),u=function(t){function ChainPart(){var t;_classCallCheck(this,ChainPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(ChainPart)).call.apply(t,[this,{layer:o.a.HAIR,loc:"+".concat(a.Location.NOSE),reflect:!1},{thickness:.7,slack:1}].concat(r)))}return _inherits(ChainPart,i["c"]),_createClass(ChainPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){var r=Object(a.locateRelativeToDrawpoint)(t,this.relativeLocation),n=Object(a.locateRelativeToDrawpoint)(t,this.endRelativeLocation);i.a.simpleStrokeFill(e,t,this),n.cp1=Object(s.point)((r.x+n.x)/2,(r.y+n.y)/2-this.slack*Object(s.norm)(Object(s.diff)(r,n))),e.beginPath(),e.setLineDash([1,1]),Object(s.drawPoints)(e,r,n),e.stroke(),e.setLineDash([])}}]),ChainPart}(),f=function(t){function Jewelry(){var t,e;_classCallCheck(this,Jewelry);for(var r=arguments.length,n=new Array(r),o=0;o<r;o++)n[o]=arguments[o];return(e=_possibleConstructorReturn(this,(t=_getPrototypeOf(Jewelry)).call.apply(t,[this,{clothingLayer:i.a.Layer.INNER,rotation:0,stroke:"rgb(255,223,0)",fill:"rgb(255,223,0)"}].concat(n)))).parts.forEach(function(t){t.loc=e.loc,Object(i.d)(e.side,t)}),e}return _inherits(Jewelry,i["b"]),Jewelry}(),p=function(t){function Piercing(){var t;_classCallCheck(this,Piercing);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Piercing)).call.apply(t,[this].concat(r)))}return _inherits(Piercing,f),Piercing}(),h=function(t){function RingPiercing(){var t;_classCallCheck(this,RingPiercing);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(RingPiercing)).call.apply(t,[this,{relativeLocation:{drawpoint:"ear.mid",dx:0,dy:0},loc:"".concat(a.Location.EAR),requiredParts:"faceParts"}].concat(r)))}return _inherits(RingPiercing,p),_createClass(RingPiercing,[{key:"partPrototypes",get:function get(){return[{side:null,Part:n},{side:null,Part:c}]}}]),RingPiercing}(),y=function(t){function StudPiercing(){var t;_classCallCheck(this,StudPiercing);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(StudPiercing)).call.apply(t,[this,{relativeLocation:{drawpoint:"nose.out",dx:0,dy:0},loc:"".concat(a.Location.NOSE),requiredParts:"faceParts"}].concat(r)))}return _inherits(StudPiercing,p),_createClass(StudPiercing,[{key:"partPrototypes",get:function get(){return[{side:null,Part:l}]}}]),StudPiercing}(),b=function(t){function ChainJewelry(){var t;_classCallCheck(this,ChainJewelry);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(ChainJewelry)).call.apply(t,[this,{relativeLocation:{drawpoint:"nose.out",dx:0,dy:0},endRelativeLocation:{drawpoint:"ear.mid",dx:0,dy:0},loc:"".concat(a.Location.NOSE),requiredParts:"faceParts"}].concat(r)))}return _inherits(ChainJewelry,f),_createClass(ChainJewelry,[{key:"partPrototypes",get:function get(){return[{side:null,Part:u}]}}]),ChainJewelry}()},function(t,e,r){"use strict";r.d(e,"f",function(){return calcSuperBra}),r.d(e,"g",function(){return calcSuperBraStrap}),r.d(e,"c",function(){return n}),r.d(e,"b",function(){return i}),r.d(e,"e",function(){return c}),r.d(e,"a",function(){return f}),r.d(e,"d",function(){return p});var o=r(3),a=r(18),s=r(1),l=r(6),u=r(0);r(4);function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}function calcSuperBra(t){if(!1===t.hasOwnProperty("breast"))return null;var e=Object(u.splitCurve)(.7,t.breast.top,t.breast.tip),r={out:Object(u.clone)(Object(u.extractPoint)(e.right.p1)),tip:Object(u.clone)(Object(u.extractPoint)(e.right.p2))};return r.top={x:t.breast.bot.x,y:r.out.y+2},r.out.cp1=Object(u.simpleQuadratic)(r.top,r.out,.4,1),r.top.cp1=Object(u.simpleQuadratic)(t.breast.cleavage,r.top,.6,2),r.bot=Object(u.adjust)(t.breast.bot,0,0),r.cleavage=Object(u.adjust)(t.breast.cleavage,0,0),r.inner=Object(u.adjust)(t.breast.in,0,0),r}function calcSuperBraStrap(t,e,r){var n=Object(a.j)(t),o={};o.out={x:t.breast.bot.x,y:t.breast.cleavage.y},o.outbot={x:t.breast.bot.x,y:t.breast.bot.y+3},o.bot={x:-s.g,y:t.breast.bot.y+5},o.mid={x:-s.g,y:t.breast.cleavage.y};var i=Object(u.splitCurve)(1-e,t.neck.cusp,t.collarbone);return o.strapTop=i.left.p2,o.strapTop.y-=r/2,o.breastTop=Object(u.clone)(t.breast.top),o.breastTop.cp1={x:o.breastTop.x-5,y:o.breastTop.y+10},o.breastOut=Object(u.extractPoint)(n.out),o.breastOut.x-=2,o.breastOut.y+=1,o}var n=function(t){function SuperBraGenitalPart(){var t;_classCallCheck(this,SuperBraGenitalPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(SuperBraGenitalPart)).call.apply(t,[this,{layer:s.a.GENITALS,loc:"chest",reflect:!0,aboveParts:["parts chest","decorativeParts chest"]}].concat(r)))}return _inherits(SuperBraGenitalPart,o["c"]),_createClass(SuperBraGenitalPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){var r=calcSuperBra(t);if(null!==r){var n=calcSuperBraStrap(t,this.neckCoverage,this.strapWidth);Object(l.i)(e,{fill:this.fill,stroke:this.stroke},t),e.lineWidth=this.thickness;var o=Object(u.adjust)(t.breast.top,.1,.2),i=Object(u.adjust)(t.breast.tip,.1,0),a=Object(u.adjust)(t.breast.bot,0,-.1),s=Object(u.adjust)(t.breast.in,-.4,0);e.save(),e.beginPath(),Object(u.drawPoints)(e,o,i,a,s),e.clip(),e.beginPath(),Object(u.drawPoints)(e,r.top,r.out,r.tip,r.bot,r.inner,r.cleavage,r.top),e.fill(),e.stroke(),e.restore();var c=Object(u.interpolateCurve)(s,o,{x:null,y:t.chest.nipples.y});(!c||!c[0]||c[0].x>t.chest.nipples.x)&&(e.lineWidth=3,e.strokeStyle=e.fillStyle,e.beginPath(),Object(u.drawPoints)(e,u.breakPoint,t.chest.nipples),e.stroke()),this.showStrap&&(e.save(),e.lineWidth=this.strapWidth,e.strokeStyle=this.highlight,e.beginPath(),Object(u.drawPoints)(e,n.breastTop,n.breastOut),e.stroke(),e.restore())}}}]),SuperBraGenitalPart}(),i=function(t){function SuperBraChestPart(){var t;_classCallCheck(this,SuperBraChestPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(SuperBraChestPart)).call.apply(t,[this,{layer:s.a.FRONT,loc:"+torso",reflect:!0,aboveParts:["parts torso"],belowParts:["parts chest"]}].concat(r)))}return _inherits(SuperBraChestPart,o["c"]),_createClass(SuperBraChestPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){var r=calcSuperBra(t);if(null!==r){var n=calcSuperBraStrap(t,this.neckCoverage,this.strapWidth);Object(l.i)(e,{fill:this.fill,stroke:this.stroke},t),e.lineWidth=this.thickness,e.beginPath(),Object(u.drawPoints)(e,n.out,n.outbot,n.bot,n.mid,n.out),e.fill(),this.showStrap&&(e.save(),e.lineWidth=this.strapWidth,e.strokeStyle=this.highlight,e.beginPath(),Object(u.drawPoints)(e,n.strapTop,n.breastTop),e.stroke(),e.restore());var o=Object(u.adjust)(t.breast.top,.1,.2),i=Object(u.adjust)(t.breast.tip,.1,0);Object(u.adjust)(t.breast.bot,0,-.1),Object(u.adjust)(t.breast.in,-.4,0);e.save(),e.beginPath(),Object(u.drawPoints)(e,o,i,{x:0,y:i.y-50},{x:0,y:o.y+50},{x:o.x,y:o.y+50}),e.clip(),e.beginPath(),Object(u.drawPoints)(e,r.top,r.out,r.tip,r.bot,r.inner,r.cleavage,r.top),e.fill(),e.stroke(),e.restore()}}}]),SuperBraChestPart}(),c=function(t){function SuperPantiesPart(){var t;_classCallCheck(this,SuperPantiesPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(SuperPantiesPart)).call.apply(t,[this,{layer:s.a.FRONT,loc:"groin",reflect:!0,aboveParts:["parts groin","parts torso","parts leg"],belowSameLayerParts:["clothingParts leg"]}].concat(r)))}return _inherits(SuperPantiesPart,o["c"]),_createClass(SuperPantiesPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){if(!1!==t.hasOwnProperty("groin")){var r,n={};r=0<this.waistCoverage?Object(u.splitCurve)(1-this.waistCoverage,t.waist,t.hip):Object(u.splitCurve)(Math.abs(this.waistCoverage),t.hip,t.thigh.out),n.sideTop=Object(u.extractPoint)(r.left.p2),n.sideTop=Object(u.adjust)(n.sideTop,-.5*this.thickness,0),this.waistCoverageLower>this.waistCoverage&&(this.waistCoverageLower=this.waistCoverage),r=0<this.waistCoverageLower?Object(u.splitCurve)(1-this.waistCoverageLower,t.waist,t.hip):Object(u.splitCurve)(Math.abs(this.waistCoverageLower),t.hip,t.thigh.out),n.sideBot=r.left.p2,n.sideBot=Object(u.adjust)(n.sideBot,-.5*this.thickness,0),n.top={x:-.1,y:n.sideTop.y+this.topY-8},n.sideTop.cp1={x:.5*n.sideTop.x+.5*n.top.x,y:n.sideTop.y},n.sideTop.cp1.x+=this.curveTopX,n.sideTop.cp1.y+=this.curveTopY-9,n.bot=Object(u.adjust)(Object(u.clone)(t.groin),-.1,0),r=Object(u.splitCurve)(this.genCoverage,t.groin,Object(u.extractPoint)(t.thigh.top)),n.botOut=Object(u.extractPoint)(r.left.p2),r=Object(u.splitCurve)(.5,n.sideBot,n.botOut),n.botOut.cp1=Object(u.extractPoint)(r.left.p2),n.botOut.cp1.x+=this.curveBotX-9,n.botOut.cp1.y+=this.curveBotY+5,o.a.simpleStrokeFill(e,t,this),e.beginPath(),Object(u.drawPoints)(e,n.top,n.sideTop,n.sideBot,n.botOut,n.bot),e.fill(),e.stroke()}}}]),SuperPantiesPart}(),f=function(t){function SuperBra(){var t;_classCallCheck(this,SuperBra);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(SuperBra)).call.apply(t,[this,{showStrap:!1,strapWidth:2,neckCoverage:.7,thickness:.5,highlight:"hsl(346, 50%, 70%)"}].concat(r)))}return _inherits(SuperBra,a["i"]),_createClass(SuperBra,[{key:"fill",value:function fill(){return"hsl(346, 57%, 82%)"}},{key:"partPrototypes",get:function get(){return[{side:null,Part:i},{side:null,Part:n}]}}]),SuperBra}(),p=function(t){function SuperPanties(){var t;_classCallCheck(this,SuperPanties);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(SuperPanties)).call.apply(t,[this,{waistCoverage:.11,waistCoverageLower:-.05,genCoverage:1,topY:0,curveTopX:0,curveTopY:0,curveBotX:0,curveBotY:0}].concat(r)))}return _inherits(SuperPanties,a["i"]),_createClass(SuperPanties,[{key:"fill",value:function fill(){return"hsl(346, 57%, 82%)"}},{key:"partPrototypes",get:function get(){return[{side:null,Part:c}]}}]),SuperPanties}()},function(t,e,r){"use strict";r.d(e,"d",function(){return a}),r.d(e,"b",function(){return s}),r.d(e,"c",function(){return l}),r.d(e,"a",function(){return u});var c=r(3),n=r(2),o=r(1),w=r(0),i=r(27),k=r(4);function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _toConsumableArray(t){return function _arrayWithoutHoles(t){if(Array.isArray(t)){for(var e=0,r=new Array(t.length);e<t.length;e++)r[e]=t[e];return r}}(t)||function _iterableToArray(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}function calcSuperPants(t,e,r,n,o,i){var a,s,c;if(0<e){var l=Object(w.splitCurve)(1-e,t.waist,t.hip);a=Object(w.extractPoint)(l.left.p2),s=l.right.p2,c=t.thigh.out}else{var u=Object(w.splitCurve)(Math.abs(e),t.hip,t.thigh.out);a=Object(w.extractPoint)(u.left.p2),c=u.right.p2}var f=a.y-t.hip.y,p={x:-.1,y:t.pelvis.y+1.2*f};a.cp1={x:.5*a.x+.5*p.x,y:p.y};var h=Object(w.adjust)(t.groin,-.1,0);o<1&&(h.cp1={x:.5*h.x+.5*t.thigh.top.x,y:h.y});var y=[],b=[];(b[0]=a).y>t.hip.y&&(b[1]=s);var d=[];if(void 0!==t.quads&&(d[0]=Object(w.clone)(t.quads.top),d[0].x=t.thigh.out.x,d[1]=Object(w.clone)(t.quads.out)),1<=n){var g,P=t.hip.y-(t.hip.y-t.ankle.out.y)*r;if(P<t.thigh.out.y)y=k.c.apply(void 0,[t.hip,t.ankle.out,r].concat(b,[c])),i?y[g=y.length]=Object(w.extractPoint)(t.thigh.out):y[g=y.length-1]=Object(w.clone)(t.thigh.out),y[g].y=P,y[g].x+=50*r*(n-1);else(y=Object(k.c)(t.hip,t.ankle.out,r,a,c))[y.length-1].y=P,y[y.length-1].x+=50*r*(n-1)}else if(0<n){var v;v=void 0!==t.quads?Object(k.a)(t.quads.out.x,t.quads.out.cp1.x,.5):t.thigh.out.x,y=k.c.apply(void 0,[t.hip,t.ankle.out,r].concat(b,[c],d,[t.knee.out,t.calf.out,t.ankle.out]));var _=b.length+1;0<d.length&&_++;for(var O=_;O<y.length;O++)y[O].x=Object(k.a)(y[O].x,v,n),y[O].cp1&&(y[O].cp1.x=Object(k.a)(y[O].cp1.x,v,n)),y[O].cp2&&(y[O].cp2.x=Object(k.a)(y[O].cp2.x,v,n))}else y=k.c.apply(void 0,[t.hip,t.ankle.out,r,a,s,c].concat(d,[t.knee.out,t.calf.out,t.ankle.out]));var m=[];if((m=1<=o?Object(k.d)(y[y.length-1],!0,p,t.thigh.in,t.knee.intop,t.knee.in,t.calf.in,t.ankle.in):Object(k.d)(y[y.length-1],!0,h,t.thigh.in,t.knee.intop,t.knee.in,t.calf.in,t.ankle.in))[0]=Object(w.extractPoint)(m[0]),0<o)for(var C=0;C<m.length;C++)m[C].x-=t.ankle.in.x*o,m[C].x<0&&(m[C].x=-.1),void 0!==m[C].cp1&&(m[C].cp1.x=m[C].cp1.x-m[C].cp1.x*o,m[C].cp1.x<1&&(m[C].cp1.x=-.1)),void 0!==m[C].cp2&&(m[C].cp2.x=m[C].cp2.x-m[C].cp2.x*o,m[C].cp2.x<1&&(m[C].cp2.x=-.1));return o<1&&m[0].y<t.groin.y?m[0].cp1={x:Object(k.a)(y[y.length-1].x,m[0].x,.5),y:m[0].y+3}:1<=o&&(y[y.length-1].y+=2,m[0].y+=-2,m[0].cp1={x:.5*m[0].x+.5*y[y.length-1].x,y:m[0].y}),a.y>t.hip.y&&a.y<t.hip.y+10&&void 0!==y[1]&&(y[1]=Object(w.extractPoint)(y[1])),{out:a,hip:s,top:p,thighOut:c,groin:h,outerPoints:y,innerPoints:m}}var a=function(t){function SuperPantsPart(){var t;_classCallCheck(this,SuperPantsPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(SuperPantsPart)).call.apply(t,[this,{layer:o.a.FRONT,loc:"leg",aboveParts:["parts leg"]}].concat(r)))}return _inherits(SuperPantsPart,c["c"]),_createClass(SuperPantsPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){var r=calcSuperPants(t,this.waistCoverage,this.legCoverage,this.outerLoose,this.innerLoose,this.bustle),n=r.out,o=(r.hip,r.top),i=(r.thighOut,r.groin),a=r.outerPoints,s=r.innerPoints;c.a.simpleStrokeFill(e,t,this),1<=this.innerLoose?(e.beginPath(),w.drawPoints.apply(void 0,[e,o].concat(_toConsumableArray(a),[s[0],o])),e.fill(),e.beginPath(),w.drawPoints.apply(void 0,[e].concat(_toConsumableArray(a),[s[0]]))):(e.beginPath(),w.drawPoints.apply(void 0,[e,o].concat(_toConsumableArray(a),_toConsumableArray(s),[i,o])),e.fill(),e.beginPath(),w.drawPoints.apply(void 0,[e].concat(_toConsumableArray(a),_toConsumableArray(s),[i]))),e.stroke(),e.beginPath(),e.lineWidth=2,Object(w.drawPoints)(e,o,Object(w.adjust)(n,-.5,0)),e.stroke()}}]),SuperPantsPart}(),s=function(t){function SuperLegginsPart(){var t;_classCallCheck(this,SuperLegginsPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(SuperLegginsPart)).call.apply(t,[this,{layer:o.a.FRONT,loc:"leg",aboveParts:["parts leg"],belowSameLayerParts:["torso"]}].concat(r)))}return _inherits(SuperLegginsPart,c["c"]),_createClass(SuperLegginsPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){var r=calcSuperPants(t,this.waistCoverage,this.legCoverage,this.outerLoose,this.innerLoose,this.bustle),n=r.out,o=(r.hip,r.top),i=(r.thighOut,r.groin),a=r.outerPoints,s=r.innerPoints;c.a.simpleStrokeFill(e,t,this),1<=this.innerLoose?(e.beginPath(),w.drawPoints.apply(void 0,[e,o].concat(_toConsumableArray(a),[s[0],o])),e.fill(),e.beginPath(),w.drawPoints.apply(void 0,[e].concat(_toConsumableArray(a),[s[0]]))):(e.beginPath(),w.drawPoints.apply(void 0,[e,o].concat(_toConsumableArray(a),_toConsumableArray(s),[i,o])),e.fill(),e.beginPath(),w.drawPoints.apply(void 0,[e].concat(_toConsumableArray(a),_toConsumableArray(s),[i]))),e.stroke(),e.beginPath(),e.lineWidth=2,Object(w.drawPoints)(e,o,Object(w.adjust)(n,-.5,0)),e.stroke()}}]),SuperLegginsPart}(),l=function(t){function SuperPants(){var t;_classCallCheck(this,SuperPants);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(SuperPants)).call.apply(t,[this,{clothingLayer:c.a.Layer.MID,innerLoose:0,outerLoose:0,legCoverage:.9,waistCoverage:.5,opacity:1,thickness:1,bustle:!1}].concat(r)))}return _inherits(SuperPants,i["f"]),_createClass(SuperPants,[{key:"fill",value:function fill(){return"hsl(200, 65%, 20%)"}},{key:"stroke",value:function stroke(){return"hsl(200, 50%, 10%)"}},{key:"partPrototypes",get:function get(){return[{side:null,Part:i.a},{side:n.b.LEFT,Part:a},{side:n.b.RIGHT,Part:a}]}}]),SuperPants}(),u=function(t){function SuperLeggins(){var t;_classCallCheck(this,SuperLeggins);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(SuperLeggins)).call.apply(t,[this,{clothingLayer:c.a.Layer.MID,innerLoose:0,outerLoose:0,legCoverage:.9,waistCoverage:.5,opacity:1,thickness:1,bustle:!1}].concat(r)))}return _inherits(SuperLeggins,i["f"]),_createClass(SuperLeggins,[{key:"fill",value:function fill(){return"hsla(200, 0%, 20%, 1)"}},{key:"stroke",value:function stroke(){return"hsla(200, 0%, 10%, 1)"}},{key:"partPrototypes",get:function get(){return[{side:null,Part:i.a},{side:n.b.LEFT,Part:s},{side:n.b.RIGHT,Part:s}]}}]),SuperLeggins}()},function(t,e,r){"use strict";r.d(e,"a",function(){return a}),r.d(e,"d",function(){return s}),r.d(e,"e",function(){return c}),r.d(e,"f",function(){return l}),r.d(e,"b",function(){return u}),r.d(e,"c",function(){return f});var i=r(3),n=r(2),g=(r(1),r(0)),P=r(4),o=r(23);function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _toConsumableArray(t){return function _arrayWithoutHoles(t){if(Array.isArray(t)){for(var e=0,r=new Array(t.length);e<t.length;e++)r[e]=t[e];return r}}(t)||function _iterableToArray(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}function calcSuperSocks(t,e,r){var n=[];void 0!==t.quads&&(n[0]=Object(g.clone)(t.quads.top),n[0].x=t.thigh.out.x,n[1]=Object(g.clone)(t.quads.out)),1<=e&&(e=.99);var o=P.f.apply(void 0,[t.hip,t.ankle.out,e,t.hip,t.thigh.out].concat(n,[t.knee.out,t.calf.out,t.ankle.out]));if(!r&&e<0){var i=Object(P.f)(t.armpit,t.hip,1+e,t.armpit,t.waist,t.hip);i.pop(),o=i.concat(o)}var a=Object(P.e)(o[0],!0,t.groin,t.thigh.top,t.thigh.in,t.knee.intop,t.knee.in,t.calf.in,t.ankle.in);if(o[0]=Object(g.extractPoint)(o[0]),o[0].y-6<=t.thigh.top.y)o[0].cp1={x:Object(P.a)(a[a.length-1].x,o[0].x,.5),y:o[0].y-6};else if(r){a.splice(a.length-1,1);var s=Object(g.interpolateCurve)(t.hip,t.thigh.out,{x:null,y:t.thigh.top.y});o[0]=Object(g.extractPoint)(s[0]),o[1]=Object(g.extractPoint)(o[1]),o[0].cp1={x:Object(P.a)(a[a.length-1].x,o[0].x,.5),y:o[0].y-6}}else{var c=o[0].y-t.hip.y,l={x:-.1,y:t.pelvis.y+1.2*c};o[0].cp2=void 0,o[0].cp1={x:Object(P.a)(o[0].x,l.x,.5),y:l.y},o.unshift(l),a[a.length-1].cp1={x:.5*a[a.length-1].x+.5*t.thigh.top.x,y:a[a.length-1].y},a[a.length]=l}return{outerPoints:o,innerPoints:a}}var a=function(t){function Garter(){var t;_classCallCheck(this,Garter);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Garter)).call.apply(t,[this,{aboveSameLayerParts:["feet"],aboveParts:["parts feet","parts leg","clothingParts groin"],reflect:!0}].concat(r)))}return _inherits(Garter,o["h"]),_createClass(Garter,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){var r,n,o=calcSuperSocks(t,this.legCoverage,this.lockGroin),i=o.outerPoints,a=o.innerPoints;if(e.fillStyle=this.highlight,0<this.waistCoverage){var s=Object(g.splitCurve)(1-this.waistCoverage,t.waist,t.hip),c={x:0,y:(r=Object(g.extractPoint)(s.left.p2)).y-this.beltWidth};n=Object(P.d)(c,!1,r,t.hip,t.thigh.out)}else{var l=Object(g.splitCurve)(Math.abs(this.waistCoverage),t.hip,t.thigh.out),u={x:0,y:(r=Object(g.extractPoint)(l.left.p2)).y-this.beltWidth};n=Object(P.d)(u,!1,r,t.thigh.out)}var f={x:-.1,y:r.y-6};r.cp1={x:.5*r.x+.5*f.x,y:f.y};var p=a[a.length-1],h=Object(g.extractPoint)(i[0]);p.y-=6,h.y-=6;var y={y:h.y,x:.4*(p.x-h.x)+h.x+3};y.cp1={y:.9*(n[n.length-1].y-y.y)+y.y,x:-.1*(n[n.length-1].x-y.x)+y.x};var b={y:p.y,x:y.x-3},d={x:t.pelvis.x-.1,y:f.y-(r.y-n[n.length-1].y)};d.cp1={y:.2*(b.y-f.y)+f.y,x:.9*(b.x-f.x)+f.x},e.beginPath(),g.drawPoints.apply(void 0,[e,f,r].concat(_toConsumableArray(n),[y,b,d])),e.fill()}}]),Garter}(),s=function(t){function SuperSockBandPart(){var t;_classCallCheck(this,SuperSockBandPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(SuperSockBandPart)).call.apply(t,[this,{aboveSameLayerParts:["feet"],aboveParts:["parts feet","parts leg","clothingParts groin"]}].concat(r)))}return _inherits(SuperSockBandPart,o["h"]),_createClass(SuperSockBandPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){var r=calcSuperSocks(t,this.legCoverage,this.lockGroin),n=r.outerPoints,o=r.innerPoints;e.fillStyle=this.highlight;var i=o[o.length-1],a=Object(g.extractPoint)(n[0]),s=Object(g.clone)(i);s.y=s.y-this.bandWidth,o.reverse();var c=P.d.apply(void 0,[s,!0].concat(_toConsumableArray(o))),l=P.d.apply(void 0,[s,!1].concat(_toConsumableArray(n)));a.cp1={x:Object(P.a)(i.x,a.x,.5),y:a.y-6},c[0]=Object(g.extractPoint)(c[0]),c[0].cp1={x:Object(P.a)(l[l.length-1].x,c[0].x,.5),y:c[0].y-6},e.beginPath(),g.drawPoints.apply(void 0,[e,a].concat(_toConsumableArray(l),_toConsumableArray(c),[i,a])),e.fill()}}]),SuperSockBandPart}(),c=function(t){function SuperSockPart(){var t;_classCallCheck(this,SuperSockPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(SuperSockPart)).call.apply(t,[this,{aboveSameLayerParts:["feet"],aboveParts:["parts feet","parts leg","clothingParts groin"]}].concat(r)))}return _inherits(SuperSockPart,o["h"]),_createClass(SuperSockPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){var r=calcSuperSocks(t,this.legCoverage,this.lockGroin),n=r.outerPoints,o=r.innerPoints;i.a.simpleStrokeFill(e,t,this),e.beginPath(),g.drawPoints.apply(void 0,[e].concat(_toConsumableArray(n),[t.ankle.outbot,t.toe.out,t.toe.in,t.ankle.inbot],_toConsumableArray(o),[n[0]])),e.fill(),e.stroke()}}]),SuperSockPart}(),l=function(t){function SuperSocks(){var t;_classCallCheck(this,SuperSocks);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(SuperSocks)).call.apply(t,[this,{legCoverage:.5,thickness:.5,lockGroin:!1}].concat(r)))}return _inherits(SuperSocks,o["g"]),_createClass(SuperSocks,[{key:"partPrototypes",get:function get(){return[{side:n.b.LEFT,Part:c},{side:n.b.RIGHT,Part:c}]}}]),SuperSocks}(),u=function(t){function Stockings(){var t;_classCallCheck(this,Stockings);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Stockings)).call.apply(t,[this,{legCoverage:.2,thickness:.3,bandWidth:7,highlight:"hsla(0, 0%, 11%, 1)",lockGroin:!0}].concat(r)))}return _inherits(Stockings,o["g"]),_createClass(Stockings,[{key:"fill",value:function fill(){return"hsla(0, 0%, 28%, 1)"}},{key:"partPrototypes",get:function get(){return[{side:n.b.LEFT,Part:s},{side:n.b.RIGHT,Part:s},{side:n.b.LEFT,Part:c},{side:n.b.RIGHT,Part:c}]}}]),Stockings}(),f=function(t){function StockingsGarter(){var t;_classCallCheck(this,StockingsGarter);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(StockingsGarter)).call.apply(t,[this,{legCoverage:.2,thickness:.3,bandWidth:9,beltWidth:10,highlight:"hsla(0, 0%, 11%, 1)",waistCoverage:.5,lockGroin:!0}].concat(r)))}return _inherits(StockingsGarter,o["g"]),_createClass(StockingsGarter,[{key:"fill",value:function fill(){return"hsla(0, 0%, 28%, 1)"}},{key:"partPrototypes",get:function get(){return[{side:n.b.RIGHT,Part:a},{side:n.b.LEFT,Part:s},{side:n.b.RIGHT,Part:s},{side:n.b.LEFT,Part:c},{side:n.b.RIGHT,Part:c}]}}]),StockingsGarter}()},function(t,e,r){"use strict";r.d(e,"b",function(){return a}),r.d(e,"c",function(){return s}),r.d(e,"e",function(){return c}),r.d(e,"a",function(){return l}),r.d(e,"d",function(){return u});var p=r(3),o=(r(2),r(1)),h=r(0),y=r(4),n=r(47),i=r(18);function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _toConsumableArray(t){return function _arrayWithoutHoles(t){if(Array.isArray(t)){for(var e=0,r=new Array(t.length);e<t.length;e++)r[e]=t[e];return r}}(t)||function _iterableToArray(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var a=function(t){function CorsetBreastPart(){var t;_classCallCheck(this,CorsetBreastPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(CorsetBreastPart)).call.apply(t,[this,{layer:o.a.GENITALS,loc:"chest",reflect:!0,aboveParts:["parts chest","decorativeParts chest"]}].concat(r)))}return _inherits(CorsetBreastPart,p["c"]),_createClass(CorsetBreastPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){if(p.a.simpleStrokeFill(e,t,this),!1===t.hasOwnProperty("breast"))return e.save(),e.lineWidth=4,e.strokeStyle=e.fillStyle,e.beginPath(),Object(h.drawPoints)(e,h.breakPoint,t.chest.nipples),e.stroke(),void e.restore();var r=Object(i.j)(t);r.out.cp1=Object(h.simpleQuadratic)(r.top,r.out,.4,1),r.top.cp1=Object(h.simpleQuadratic)(t.breast.cleavage,r.top,.6,2),e.beginPath(),Object(h.drawPoints)(e,r.top,r.out,r.tip,t.breast.bot,t.breast.in,t.breast.cleavage,r.top),e.fill(),Object(h.drawPoints)(e,t.breast.cleavage,r.top,r.out,r.tip,t.breast.bot),e.stroke()}}]),CorsetBreastPart}();var s=function(t){function CorsetPart(){var t;_classCallCheck(this,CorsetPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(CorsetPart)).call.apply(t,[this,{layer:o.a.FRONT,loc:"torso",reflect:!0,aboveParts:["parts neck","parts torso","decorativeParts torso","parts leg"]},{}].concat(r)))}return _inherits(CorsetPart,p["c"]),_createClass(CorsetPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){p.a.simpleStrokeFill(e,t,this);var r=function calcCorset(t){var e,r;t.breast?(e=Object(y.e)(t.breast.cleavage,!1,t.armpit,t.waist)[0],r={x:-.1,y:t.breast.cleavage.y}):(r={x:-.1,y:(e=Object(h.clone)(t.armpit)).y-4},e.cp1={x:.5*e.x+.5*r.x,y:r.y});var n=Object(h.splitCurve)(this.botCoverage,t.waist,t.hip).left.p2,o={x:0,y:n.y-7};return o.cp2={x:.5*o.x+.5*n.x,y:o.y},o.cp1={x:o.cp2.x+12,y:o.cp2.y+9},{topMid:r,top:e,bot:n,botMid:o}}.call(this,t),n=r.topMid,o=r.top,i=r.bot,a=r.botMid;if(e.beginPath(),Object(h.drawPoints)(e,n,o,t.waist,i,Object(h.extractPoint)(i),a),e.fill(),e.stroke(),this.lacing){var s=Object(h.adjust)(n,-3,-1),c=Object(h.adjust)(a,-3,1),l=Object(h.adjust)(n,3,-1),u=Object(h.adjust)(a,3,1),f=Object(y.b)(c,s,u,l,this.knots);e.strokeStyle=this.highlight,e.beginPath(),h.drawPoints.apply(void 0,[e].concat(_toConsumableArray(f.inner),[h.breakPoint],_toConsumableArray(f.outer))),e.stroke()}}}]),CorsetPart}(),c=function(t){function HalfCorsetPart(){var t;_classCallCheck(this,HalfCorsetPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(HalfCorsetPart)).call.apply(t,[this,{layer:o.a.FRONT,loc:"torso",reflect:!0,aboveParts:["parts neck","parts torso","decorativeParts torso","parts leg"]},{}].concat(r)))}return _inherits(HalfCorsetPart,p["c"]),_createClass(HalfCorsetPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){p.a.simpleStrokeFill(e,t,this);var r=Object(h.splitCurve)(1-this.topCoverage,t.armpit,t.waist),n=Object(h.extractPoint)(r.left.p2),o=(r=Object(h.splitCurve)(this.botCoverage,t.waist,t.hip)).left.p2,i={x:0,y:o.y-7};i.cp2={x:.5*i.x+.5*o.x,y:i.y},i.cp1={x:i.cp2.x+12,y:i.cp2.y+9};var a={x:0,y:n.y-5};if(n.cp1={x:.5*n.x+.5*a.x,y:a.y},e.beginPath(),Object(h.drawPoints)(e,a,n,t.waist,o,i,a),e.fill(),e.beginPath(),Object(h.drawPoints)(e,a,n,t.waist,o,i),e.stroke(),this.lacing){var s=Object(h.adjust)(a,-3,-1),c=Object(h.adjust)(i,-3,1),l=Object(h.adjust)(a,3,-1),u=Object(h.adjust)(i,3,1),f=Object(y.b)(c,s,u,l,this.knots);e.strokeStyle=this.highlight,e.beginPath(),h.drawPoints.apply(void 0,[e].concat(_toConsumableArray(f.inner),[h.breakPoint],_toConsumableArray(f.outer))),e.stroke()}}}]),HalfCorsetPart}(),l=function(t){function Corset(){var t;_classCallCheck(this,Corset);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Corset)).call.apply(t,[this,{clothingLayer:p.a.Layer.OUTER,botCoverage:1,thickness:1,lacing:!0,knots:6,highlight:"hsla(0, 0%, 52%, 1)"}].concat(r)))}return _inherits(Corset,n["e"]),_createClass(Corset,[{key:"stroke",value:function stroke(){return"#000"}},{key:"fill",value:function fill(){return"hsl(0,10%,20%)"}},{key:"partPrototypes",get:function get(){return[{side:null,Part:a},{side:null,Part:s}]}}]),Corset}(),u=function(t){function HalfCorset(){var t;_classCallCheck(this,HalfCorset);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(HalfCorset)).call.apply(t,[this,{clothingLayer:p.a.Layer.OUTER,topCoverage:.6,botCoverage:1,thickness:1,knots:6,lacing:!0,highlight:"hsla(0, 0%, 52%, 1)"}].concat(r)))}return _inherits(HalfCorset,n["e"]),_createClass(HalfCorset,[{key:"stroke",value:function stroke(){return"#000"}},{key:"fill",value:function fill(){return"hsl(0,10%,20%)"}},{key:"partPrototypes",get:function get(){return[{side:null,Part:c}]}}]),HalfCorset}()},function(t,e,r){"use strict";r.d(e,"f",function(){return i}),r.d(e,"c",function(){return a}),r.d(e,"b",function(){return s}),r.d(e,"e",function(){return p}),r.d(e,"g",function(){return h}),r.d(e,"d",function(){return y}),r.d(e,"a",function(){return b});var c=r(3),n=r(2),l=r(12),o=r(1),u=r(0),f=r(4);function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _toConsumableArray(t){return function _arrayWithoutHoles(t){if(Array.isArray(t)){for(var e=0,r=new Array(t.length);e<t.length;e++)r[e]=t[e];return r}}(t)||function _iterableToArray(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var i=function(t){function GlovePart(){var t;_classCallCheck(this,GlovePart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(GlovePart)).call.apply(t,[this,{layer:o.a.ARMS,loc:"arm",aboveParts:["parts arm","decorativeParts arm","parts hand"]},{armCoverage:.5}].concat(r)))}return _inherits(GlovePart,c["c"]),_createClass(GlovePart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){c.a.simpleStrokeFill(e,t,this);var r=Object(f.f)(t.collarbone,t.hand.palm,this.armCoverage,t.collarbone,t.deltoids,t.shoulder,t.elbow.out,t.wrist.out,t.hand.knuckle,t.hand.tip),n=Object(f.e)({y:r[0].y-3,x:r[0].x},!0,t.armpit,t.elbow.in,t.wrist.in,t.thumb.out,t.thumb.tip);0<this.armCoverage?(e.beginPath(),u.drawPoints.apply(void 0,[e].concat(_toConsumableArray(r),[t.hand.palm],_toConsumableArray(n),[Object(u.extractPoint)(r[0])]))):(e.beginPath(),u.drawPoints.apply(void 0,[e].concat(_toConsumableArray(r),[t.hand.palm],_toConsumableArray(n),[Object(l.a)(n[n.length-1],r[0])]))),e.fill(),e.stroke()}}]),GlovePart}(),a=function(t){function FingerlessGlovePart(){var t;_classCallCheck(this,FingerlessGlovePart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(FingerlessGlovePart)).call.apply(t,[this,{layer:o.a.ARMS,loc:"arm",aboveParts:["parts arm","decorativeParts arm","parts hand"]},{armCoverage:.5}].concat(r)))}return _inherits(FingerlessGlovePart,c["c"]),_createClass(FingerlessGlovePart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){var r;c.a.simpleStrokeFill(e,t,this);var n=Object(f.f)(t.collarbone,t.hand.palm,this.armCoverage,t.collarbone,t.deltoids,t.shoulder,t.elbow.out,t.wrist.out,t.hand.knuckle),o=Object(f.e)({y:n[0].y-3,x:n[0].x},!0,t.armpit,t.elbow.in,t.wrist.in,t.thumb.out);r=Object(u.splitCurve)(.3,t.hand.knuckle,t.hand.tip);var i=Object(u.extractPoint)(r.left.p2);r=Object(u.splitCurve)(.8,t.hand.tip,t.hand.palm);var a=Object(u.extractPoint)(r.left.p2);r=Object(u.splitCurve)(.3,t.thumb.tip,t.thumb.out);var s=Object(u.extractPoint)(r.left.p2);0<this.armCoverage?(e.beginPath(),u.drawPoints.apply(void 0,[e].concat(_toConsumableArray(n),[i,a,Object(u.extractPoint)(t.hand.palm),s],_toConsumableArray(o),[Object(u.extractPoint)(n[0])]))):(e.beginPath(),u.drawPoints.apply(void 0,[e].concat(_toConsumableArray(n),[i,a,Object(u.extractPoint)(t.hand.palm),s],_toConsumableArray(o),[Object(l.a)(o[o.length-1],n[0])]))),e.fill(),e.stroke()}}]),FingerlessGlovePart}(),s=function(t){function BraceletPart(){var t;_classCallCheck(this,BraceletPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(BraceletPart)).call.apply(t,[this,{layer:o.a.ARMS,loc:"arm",aboveParts:["parts arm","decorativeParts arm","parts hand"]},{armCoverage:.5}].concat(r)))}return _inherits(BraceletPart,c["c"]),_createClass(BraceletPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){c.a.simpleStrokeFill(e,t,this);var r=Object(f.f)(t.collarbone,t.hand.palm,this.armCoverage,t.collarbone,t.deltoids,t.shoulder,t.elbow.out,t.wrist.out),n=Object(f.e)({y:r[0].y-3,x:r[0].x},!0,t.armpit,t.elbow.in,t.wrist.in);0<this.armCoverage?(e.beginPath(),u.drawPoints.apply(void 0,[e].concat(_toConsumableArray(r),[Object(u.extractPoint)(t.wrist.out),t.wrist.in],_toConsumableArray(n),[Object(u.extractPoint)(r[0])]))):(e.beginPath(),u.drawPoints.apply(void 0,[e].concat(_toConsumableArray(r),[t.wrist.out,t.wrist.in],_toConsumableArray(n),[Object(l.a)(n[n.length-1],r[0])]))),e.fill(),e.stroke()}}]),BraceletPart}(),p=function(t){function Glove(){var t;_classCallCheck(this,Glove);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Glove)).call.apply(t,[this,{clothingLayer:c.a.Layer.BASE,thickness:.8}].concat(r)))}return _inherits(Glove,c["b"]),_createClass(Glove,[{key:"fill",value:function fill(){return"hsla(0, 0%, 28%, 1)"}}]),Glove}(),h=function(t){function LongGloves(){var t;_classCallCheck(this,LongGloves);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(LongGloves)).call.apply(t,[this,{armCoverage:.5}].concat(r)))}return _inherits(LongGloves,p),_createClass(LongGloves,[{key:"fill",value:function fill(){return"hsla(0, 0%, 28%, 1)"}},{key:"partPrototypes",get:function get(){return[{side:n.b.LEFT,Part:i},{side:n.b.RIGHT,Part:i}]}}]),LongGloves}(),y=function(t){function FingerlessGloves(){var t;_classCallCheck(this,FingerlessGloves);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(FingerlessGloves)).call.apply(t,[this,{armCoverage:.9}].concat(r)))}return _inherits(FingerlessGloves,p),_createClass(FingerlessGloves,[{key:"fill",value:function fill(){return"hsla(0, 0%, 28%, 1)"}},{key:"partPrototypes",get:function get(){return[{side:n.b.LEFT,Part:a},{side:n.b.RIGHT,Part:a}]}}]),FingerlessGloves}(),b=function(t){function Bracelet(){var t;_classCallCheck(this,Bracelet);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Bracelet)).call.apply(t,[this,{armCoverage:.75}].concat(r)))}return _inherits(Bracelet,p),_createClass(Bracelet,[{key:"fill",value:function fill(){return"hsla(0, 0%, 28%, 1)"}},{key:"partPrototypes",get:function get(){return[{side:n.b.LEFT,Part:s},{side:n.b.RIGHT,Part:s}]}}]),Bracelet}()},function(t,e,r){"use strict";r.d(e,"b",function(){return i}),r.d(e,"f",function(){return a}),r.d(e,"d",function(){return s}),r.d(e,"a",function(){return f}),r.d(e,"e",function(){return p}),r.d(e,"c",function(){return h});var c=r(3),o=r(1),l=r(0),n=r(33),u=r(4);function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _toConsumableArray(t){return function _arrayWithoutHoles(t){if(Array.isArray(t)){for(var e=0,r=new Array(t.length);e<t.length;e++)r[e]=t[e];return r}}(t)||function _iterableToArray(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var i=function(t){function ChokerPart(){var t;_classCallCheck(this,ChokerPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(ChokerPart)).call.apply(t,[this,{layer:o.a.GENITALS,loc:"+neck",reflect:!0,aboveParts:["parts neck","parts torso","decorativeParts torso"],belowSameLayerParts:["torso"]},{}].concat(r)))}return _inherits(ChokerPart,c["c"]),_createClass(ChokerPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){c.a.simpleStrokeFill(e,t,this);var r=Object(l.splitCurve)(this.neckCoverage,t.neck.cusp,t.neck.top),n=Object(l.adjust)(r.left.p2,.5*-this.thickness,0);r=Object(l.splitCurve)(this.neckBotCoverage,t.neck.cusp,t.neck.top);var o=Object(l.adjust)(r.left.p2,.5*-this.thickness,0);o=Object(l.extractPoint)(o);var i={x:-.1,y:n.y},a={x:-.1,y:o.y};if(a.y-=2,a.cp1={x:.5*(a.x+o.x),y:a.y},i.y-=2,n.cp1={x:.5*(n.x+i.x),y:i.y},this.center)return i.cp1={y:(i.y-a.y)/2+a.y,x:4},e.beginPath(),Object(l.drawPoints)(e,i,n,o,a,i),e.fill(),void e.stroke();e.beginPath(),Object(l.drawPoints)(e,i,n,o,a),e.fill(),e.stroke()}}]),ChokerPart}(),a=function(t){function NeckCorsetPart(){var t;_classCallCheck(this,NeckCorsetPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(NeckCorsetPart)).call.apply(t,[this,{layer:o.a.GENITALS,loc:"+neck",reflect:!0,aboveParts:["parts neck","parts torso","decorativeParts torso"],belowSameLayerParts:["torso"]},{}].concat(r)))}return _inherits(NeckCorsetPart,c["c"]),_createClass(NeckCorsetPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){c.a.simpleStrokeFill(e,t,this);var r=Object(l.splitCurve)(this.neckCoverage,t.neck.cusp,t.neck.top),n=Object(l.adjust)(r.left.p2,.5*-this.thickness,0);r=Object(l.splitCurve)(this.neckBotCoverage,t.neck.cusp,t.neck.top);var o=Object(l.adjust)(r.left.p2,.5*-this.thickness,0);o=Object(l.extractPoint)(o);var i={x:-.1,y:n.y},a={x:-.1,y:o.y};a.y-=2,a.cp1={x:.5*(a.x+o.x),y:a.y},i.y-=2,n.cp1={x:.5*(n.x+i.x),y:i.y};i={x:3,y:n.y},a={x:3,y:o.y},e.beginPath(),Object(l.drawPoints)(e,i,n,o,a),e.fill(),e.stroke();var s=Object(u.b)(a,i,Object(l.reflect)(a),Object(l.reflect)(i),this.crossings);e.beginPath(),e.strokeStyle=this.highlight,e.lineWidth=.4,l.drawPoints.apply(void 0,[e].concat(_toConsumableArray(s.outer))),e.stroke()}}]),NeckCorsetPart}(),s=function(t){function CollarPart(){var t;_classCallCheck(this,CollarPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(CollarPart)).call.apply(t,[this,{layer:o.a.GENITALS,loc:"+neck",reflect:!0,aboveParts:["parts neck","parts torso","decorativeParts torso"],belowSameLayerParts:["torso"]},{}].concat(r)))}return _inherits(CollarPart,c["c"]),_createClass(CollarPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){c.a.simpleStrokeFill(e,t,this);var r=Object(l.splitCurve)(this.neckCoverage,t.neck.cusp,t.neck.top),n=0,o=Object(u.a)(r.left.p2.y,t.neck.cusp.y,.5)-2,i=Object(l.drawCircle)({x:0,y:o-4},4);e.beginPath(),e.lineWidth=.9,e.strokeStyle=this.ring,l.drawPoints.apply(void 0,[e].concat(_toConsumableArray(i))),e.stroke();e.beginPath(),e.lineWidth=.5,e.fillStyle=this.highlight,Object(l.drawPoints)(e,{x:n+2,y:o+2},{x:n+2,y:o-2},{x:n-2,y:o-2},{x:n-2,y:o+2}),e.fill()}}]),CollarPart}(),f=function(t){function Choker(){var t;_classCallCheck(this,Choker);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Choker)).call.apply(t,[this,{neckCoverage:.2,neckBotCoverage:0,center:!1,thickness:.5}].concat(r)))}return _inherits(Choker,n["a"]),_createClass(Choker,[{key:"stroke",value:function stroke(){return"#5c5c5c"}},{key:"fill",value:function fill(){return"#5c5c5c"}},{key:"partPrototypes",get:function get(){return[{side:null,Part:i}]}}]),Choker}(),p=function(t){function NeckCorset(){var t;_classCallCheck(this,NeckCorset);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(NeckCorset)).call.apply(t,[this,{neckCoverage:.6,neckBotCoverage:0,crossings:3,highlight:"black"}].concat(r)))}return _inherits(NeckCorset,n["a"]),_createClass(NeckCorset,[{key:"stroke",value:function stroke(){return"#5c5c5c"}},{key:"fill",value:function fill(){return"#5c5c5c"}},{key:"partPrototypes",get:function get(){return[{side:null,Part:a}]}}]),NeckCorset}(),h=function(t){function Collar(){var t;_classCallCheck(this,Collar);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Collar)).call.apply(t,[this,{neckCoverage:.3,neckBotCoverage:0,ring:"hsla(209, 33%, 70%, 1)",highlight:"hsla(209, 8%, 16%, 1)",thickness:.5}].concat(r)))}return _inherits(Collar,n["a"]),_createClass(Collar,[{key:"stroke",value:function stroke(){return"#5c5c5c"}},{key:"fill",value:function fill(){return"#5c5c5c"}},{key:"partPrototypes",get:function get(){return[{side:null,Part:s},{side:null,Part:i}]}}]),Collar}()},function(t,e,r){"use strict";r.d(e,"c",function(){return n}),r.d(e,"a",function(){return i}),r.d(e,"b",function(){return a});var f=r(3),o=(r(2),r(1)),p=r(0),h=r(4);function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var n=function(t){function GlassesPart(){var t;_classCallCheck(this,GlassesPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(GlassesPart)).call.apply(t,[this,{layer:o.a.BELOW_HAIR,loc:"head",reflect:!0,aboveParts:["eyelid","brow","eyelash"]},{eccentricity:5,height:3,thickness:.5}].concat(r)))}return _inherits(GlassesPart,f["c"]),_createClass(GlassesPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){f.a.simpleStrokeFill(e,t,this);var r=Object(p.extractPoint)(t.ear.mid);r.y+=1,r.x-=1;var n=Object(p.extractPoint)(t.eyes.out);n.x+=1;var o=Object(p.extractPoint)(t.ear.mid);o.x-=2,o.y+=2;var i=Object(p.extractPoint)(t.eyes.in);i.x-=1.8;var a=this.eccentricity,s=this.height,c={x:i.x,y:i.y};c.cp1=Object(h.h)(i,n,.5,s),c.cp1.x+=a,c.cp2=Object(h.h)(i,n,.5,s),c.cp2.x+=-a;var l={x:i.x,y:i.y};l.cp1=Object(h.h)(i,n,.5,-s),l.cp1.x+=a,l.cp2=Object(h.h)(i,n,.5,-s),l.cp2.x+=-a;var u=Object(p.reflect)(i);u.cp1={y:i.y+2,x:0},e.beginPath(),Object(p.drawPoints)(e,n,c,p.breakPoint,n,l),e.fill(),e.beginPath(),Object(p.drawPoints)(e,o,n,c,p.breakPoint,n,l,u),e.stroke()}}]),GlassesPart}(),i=function(t){function Accessory(){var t;_classCallCheck(this,Accessory);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Accessory)).call.apply(t,[this,{clothingLayer:f.a.Layer.MID}].concat(r)))}return _inherits(Accessory,f["b"]),Accessory}(),a=function(t){function Glasses(){var t;_classCallCheck(this,Glasses);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Glasses)).call.apply(t,[this].concat(r)))}return _inherits(Glasses,i),_createClass(Glasses,[{key:"fill",value:function fill(){return"#a2a2a2"}},{key:"stroke",value:function stroke(){return"#1e1e1e"}},{key:"partPrototypes",get:function get(){return[{side:null,Part:n}]}}]),Glasses}()},function(t,e,r){var n=r(80);t.exports=function(t,e){if("string"!=typeof e)throw new TypeError("path must be a string");if("object"!=typeof t)throw new TypeError("object must be passed");var r=n.get(e);if(!r.valid)throw new Error("path is not a valid object path");return r.getValueFrom(t)}},function(t,e){function noop(){}var n=function detectEval(){if("undefined"!=typeof chrome&&chrome.app&&chrome.app.runtime)return!1;if("undefined"!=typeof navigator&&navigator.getDeviceStorage)return!1;try{return new Function("","return true;")()}catch(t){return!1}}();function isIndex(t){return+t==t>>>0&&""!==t}function isObject(t){return t===Object(t)}var r="__proto__"in{}?function(t){return t}:function(e){var t=e.__proto__;if(!t)return e;var r=Object.create(t);return Object.getOwnPropertyNames(e).forEach(function(t){Object.defineProperty(r,t,Object.getOwnPropertyDescriptor(e,t))}),r};var o=new RegExp("^[$_a-zA-Z]+[$_a-zA-Z0-9]*$");function isIdent(t){return o.test(t)}var i={};function Path(t,e){if(e!==i)throw Error("Use Path.get to retrieve path objects");for(var r=0;r<t.length;r++)this.push(String(t[r]));n&&this.length&&(this.getValueFrom=this.compiledGetValueFromFn())}var a={};function formatAccessor(t){return isIndex(t)?"["+t+"]":'["'+t.replace(/"/g,'\\"')+'"]'}function getPathCharType(t){if(void 0===t)return"eof";var e=t.charCodeAt(0);switch(e){case 91:case 93:case 46:case 34:case 39:case 48:return t;case 95:case 36:return"ident";case 32:case 9:case 10:case 13:case 160:case 65279:case 8232:case 8233:return"ws"}return 97<=e&&e<=122||65<=e&&e<=90?"ident":49<=e&&e<=57?"number":"else"}Path.get=function getPath(t){if(t instanceof Path)return t;if(null!=t&&0!=t.length||(t=""),"string"!=typeof t){if(isIndex(t.length))return new Path(t,i);t=String(t)}if(r=a[t])return r;var e=function parsePath(e){var t,r,n,o,i,a,s,c=[],l=-1,u="beforePath",f={push:function(){void 0!==n&&(c.push(n),n=void 0)},append:function(){void 0===n?n=r:n+=r}};function maybeUnescapeQuote(){if(!(l>=e.length)){var t=e[l+1];return"inSingleQuote"==u&&"'"==t||"inDoubleQuote"==u&&'"'==t?(l++,r=t,f.append(),!0):void 0}}for(;u;)if("\\"!=(t=e[++l])||!maybeUnescapeQuote()){if(o=getPathCharType(t),"error"==(i=(s=p[u])[o]||s.else||"error"))return;if(u=i[0],a=f[i[1]]||noop,r=void 0===i[2]?t:i[2],a(),"afterPath"===u)return c}}(t);if(!e)return s;var r=new Path(e,i);return a[t]=r},Path.prototype=r({__proto__:[],valid:!0,toString:function(){for(var t="",e=0;e<this.length;e++){var r=this[e];isIdent(r)?t+=e?"."+r:r:t+=formatAccessor(r)}return t},getValueFrom:function(t,e){for(var r=0;r<this.length;r++){if(null==t)return;t=t[this[r]]}return t},iterateObjects:function(t,e){for(var r=0;r<this.length;r++){if(r&&(t=t[this[r-1]]),!isObject(t))return;e(t,this[r])}},compiledGetValueFromFn:function(){var t="",e="obj";t+="if (obj != null";for(var r,n=0;n<this.length-1;n++)t+=" &&\n     "+(e+=isIdent(r=this[n])?"."+r:formatAccessor(r))+" != null";return t+=")\n",t+="  return "+(e+=isIdent(r=this[n])?"."+r:formatAccessor(r))+";\nelse\n  return undefined;",new Function("obj",t)},setValueFrom:function(t,e){if(!this.length)return!1;for(var r=0;r<this.length-1;r++){if(!isObject(t))return!1;t=t[this[r]]}return!!isObject(t)&&(t[this[r]]=e,!0)}});var p={beforePath:{ws:["beforePath"],ident:["inIdent","append"],"[":["beforeElement"],eof:["afterPath"]},inPath:{ws:["inPath"],".":["beforeIdent"],"[":["beforeElement"],eof:["afterPath"]},beforeIdent:{ws:["beforeIdent"],ident:["inIdent","append"]},inIdent:{ident:["inIdent","append"],0:["inIdent","append"],number:["inIdent","append"],ws:["inPath","push"],".":["beforeIdent","push"],"[":["beforeElement","push"],eof:["afterPath","push"]},beforeElement:{ws:["beforeElement"],0:["afterZero","append"],number:["inIndex","append"],"'":["inSingleQuote","append",""],'"':["inDoubleQuote","append",""]},afterZero:{ws:["afterElement","push"],"]":["inPath","push"]},inIndex:{0:["inIndex","append"],number:["inIndex","append"],ws:["afterElement"],"]":["inPath","push"]},inSingleQuote:{"'":["afterElement"],eof:["error"],else:["inSingleQuote","append"]},inDoubleQuote:{'"':["afterElement"],eof:["error"],else:["inDoubleQuote","append"]},afterElement:{ws:["afterElement"],"]":["inPath","push"]}},s=new Path("",i);s.valid=!1,s.getValueFrom=s.setValueFrom=function(){},t.exports=Path},function(t,e,r){function _toConsumableArray(t){return function _arrayWithoutHoles(t){if(Array.isArray(t)){for(var e=0,r=new Array(t.length);e<t.length;e++)r[e]=t[e];return r}}(t)||function _iterableToArray(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var i=r(82).Matrix;function lastElement(t){return t[t.length-1]}t.exports=function(){function Context2DTracked(r){!function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,Context2DTracked),this.context=r,this.tf=[new i],this.penx=0,this.peny=0,this.justBegun=!1,this.bpenx=0,this.bpeny=0,this.ox=0,this.oy=0,this.showcontrol=!1;for(var t=["webkitImageSmoothingEnabled"],e=Object.getOwnPropertyNames(r.__proto__),n=0;n<e.length;n++){var o=e[n];0<=t.indexOf(o)||("function"==typeof r[o]?void 0===this[o]&&(this[o]=r[o].bind(r)):Object.defineProperty(this,o,{get:function(t){return r[t]}.bind(null,o),set:function(t,e){return r[t]=e}.bind(null,o)}))}}return function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}(Context2DTracked,[{key:"cf",value:function cf(){return lastElement(this.tf)}},{key:"usingScaledLineWidth",value:function usingScaledLineWidth(t){var e=this,r=this.context.lineWidth;return function using(t,e,r){try{return t.call(this),r.call(this)}finally{e.call(this)}}.call(this,function start(){e.context.lineWidth*=Math.abs(e.cf().a)},function close(){e.context.lineWidth=r},t)}},{key:"trace",value:function trace(){var t=this.penx,e=this.peny;return console.log(Math.round(10*t)/10+this.ox,Math.round(10*e)/10+this.oy),this.context.moveTo(t-5,e),this.context.lineTo(t+5,e),this.context.moveTo(t,e+5),this.context.lineTo(t,e-5),this.context.moveTo(t,e),{x:t,y:e}}},{key:"transformPoint",value:function transformPoint(t,e){return lastElement(this.tf).inverse().applyToPoint(t,e)}},{key:"transformCoordinate",value:function transformCoordinate(t,e){return lastElement(this.tf).applyToPoint(t,e)}},{key:"save",value:function save(){this.tf.push(lastElement(this.tf).clone()),this.context.save()}},{key:"restore",value:function restore(){this.tf.pop(),this.context.restore()}},{key:"scale",value:function scale(t,e){lastElement(this.tf).scale(t,e)}},{key:"translate",value:function translate(t,e){lastElement(this.tf).translate(t,e)}},{key:"setTransform",value:function setTransform(t,e,r,n,o,i){lastElement(this.tf).setTransform(t,e,r,n,o,i)}},{key:"rotate",value:function rotate(t){lastElement(this.tf).rotate(t)}},{key:"movePen",value:function movePen(t,e){var r=this.cf().applyToPoint(t,e);this.justBegun&&(this.justBegun=!1,this.bpenx=r.x,this.bpeny=r.y),this.penx=r.x,this.peny=r.y}},{key:"_rect",value:function _rect(t,e,r,n,o){var i=this.cf().applyToPoint(t,e),a=this.cf().applyToPoint(r,n);o.call(this.context,i.x,i.y,a.x,a.y)}},{key:"clearRect",value:function clearRect(t,e,r,n){this._rect.apply(this,Array.prototype.slice.call(arguments).concat([this.context.clearRect]))}},{key:"fillRect",value:function fillRect(t,e,r,n){this._rect.apply(this,Array.prototype.slice.call(arguments).concat([this.context.fillRect]))}},{key:"strokeRect",value:function strokeRect(t,e,r,n){var o=this,i=arguments;this.usingScaledLineWidth(function(){o._rect.apply(o,_toConsumableArray(i).concat([o.context.strokeRect]))})}},{key:"rect",value:function rect(t,e,r,n){this._rect.apply(this,Array.prototype.slice.call(arguments).concat([this.context.rect]))}},{key:"fillText",value:function fillText(t,e,r,n){var o=this.cf().applyToPoint(e,r);this.context.fillText(t,o.x,o.y,n)}},{key:"strokeText",value:function strokeText(t,e,r,n){var o=this,i=this.cf().applyToPoint(e,r);this.usingScaledLineWidth(function(){o.context.strokeText(t,i.x,i.y,n)})}},{key:"createLinearGradient",value:function createLinearGradient(t,e,r,n){var o=this.cf().applyToPoint(t,e),i=this.cf().applyToPoint(r,n);return this.context.createLinearGradient(o.x,o.y,i.x,i.y)}},{key:"createRadialGradient",value:function createRadialGradient(t,e,r,n,o,i){var a=this.cf().applyToPoint(t,e),s=this.cf().applyToPoint(n,o),c=this.cf().a*r,l=this.cf().a*i;return this.context.createRadialGradient(a.x,a.y,c,s.x,s.y,l)}},{key:"beginPath",value:function beginPath(){this.justBegun=!0,this.context.beginPath()}},{key:"moveTo",value:function moveTo(t,e){this.movePen(t,e);var r=this.cf().applyToPoint(t,e);this.context.moveTo(r.x,r.y)}},{key:"lineTo",value:function lineTo(t,e,r){var n=this.cf().applyToPoint(t,e);if(r||this.showcontrol){var o=Object.assign(this._getDefaultDebugOptions(),r);this._drawCurveControl(this._getDebugPoint(n.x,n.y),o)}this.context.lineTo(n.x,n.y),this.movePen(t,e)}},{key:"bezierCurveTo",value:function bezierCurveTo(t,e,r,n,o,i,a){var s=this.cf().applyToPoint(o,i),c=this.cf().applyToPoint(t,e),l=this.cf().applyToPoint(r,n);if(a||this.showcontrol){var u=Object.assign(this._getDefaultDebugOptions(),a);this._drawCurveControl(this._getDebugPoint(s.x,s.y,c.x,c.y,l.x,l.y),u)}this.context.bezierCurveTo(c.x,c.y,l.x,l.y,s.x,s.y),this.movePen(o,i)}},{key:"quadraticCurveTo",value:function quadraticCurveTo(t,e,r,n,o){var i=this.cf().applyToPoint(r,n),a=this.cf().applyToPoint(t,e);if(o||this.showcontrol){var s=Object.assign(this._getDefaultDebugOptions(),o);this._drawCurveControl(this._getDebugPoint(i.x,i.y,a.x,a.y),s)}this.context.quadraticCurveTo(a.x,a.y,i.x,i.y),this.movePen(r,n)}},{key:"arc",value:function arc(t,e,r,n,o,i){var a=this.cf().applyToPoint(t,e),s=this.cf().a*r,c=a.x+Math.cos(n)*s,l=a.y+Math.sin(n)*s;this.movePen(c,l),this.context.arc(a.x,a.y,s,n,o,i);var u=a.x+Math.cos(o)*s,f=a.y+Math.sin(o)*s;this.movePen(u,f),this.bpenx=u,this.bpeny=f}},{key:"stroke",value:function stroke(){var t=this;"rgba(0, 0, 0, 0)"!==this.context.strokeStyle&&this.usingScaledLineWidth(function(){t.context.stroke()})}},{key:"fill",value:function fill(){this.movePen(this.bpenx,this.bpeny),this.context.fill.apply(this.context,arguments)}},{key:"clip",value:function clip(){this.movePen(this.bpenx,this.bpeny),this.context.clip.apply(this.context,arguments)}},{key:"_drawCurveControl",value:function _drawCurveControl(t,e){this.context.save();var r=[t.p1];this.context.strokeStyle=e.controlLine.color,this.context.lineWidth=e.controlLine.width,t.cp1&&(this.context.moveTo(t.p1.x,t.p1.y),this.context.lineTo(t.cp1.x,t.cp1.y),r.push(t.cp1),t.cp2?(this.context.lineTo(t.cp2.x,t.cp2.y),this.context.lineTo(t.p2.x,t.p2.y),r.push(t.cp2)):this.context.lineTo(t.p2.x,t.p2.y)),this.context.stroke(),r.push(t.p2);for(var n=0;n<r.length;++n){var o=r[n];r[n]="("+Math.round(10*r[n].x)/10+", "+Math.round(10*r[n].y)/10+")",this.context.lineWidth=e.point.width,o===t.p2?this.context.strokeStyle=e.point.destinationColor:this.context.strokeStyle=e.point.color,this.context.fillStyle=e.point.fill,this.context.beginPath(),this.context.arc(o.x,o.y,e.point.radius,0,2*Math.PI,!0),this.context.fill(),this.context.stroke()}console.log("from points",r.join(" to ")),this.context.restore(),this.context.beginPath(),this.context.moveTo(t.p1.x,t.p1.y)}},{key:"_getDebugPoint",value:function _getDebugPoint(t,e,r,n,o,i){var a={p1:{x:this.penx,y:this.peny},p2:{x:t,y:e}};return"number"==typeof r&&"number"==typeof n&&(a.cp1={x:r,y:n},"number"==typeof o&&"number"==typeof i&&(a.cp2={x:o,y:i})),a}},{key:"_getDefaultDebugOptions",value:function _getDefaultDebugOptions(){return{controlLine:{color:"rgb(200,100,100)",width:.5},point:{color:"rgb(200,50,50)",destinationColor:"#000",fill:"white",width:1,radius:1}}}}]),Context2DTracked}()},function(t,e,r){
/*!
  2D Transformation Matrix v2.7.5
  (c) Epistemex.com 2014-2018
  License: MIT
*/
/**
 * 2D transformation matrix object initialized with identity matrix.
 *
 * The matrix can synchronize a canvas 2D context by supplying the context
 * as an argument, or later apply current absolute transform to an
 * existing context.
 *
 * To synchronize a DOM element you can use [`toCSS()`]{@link Matrix#toCSS} or [`toCSS3D()`]{@link Matrix#toCSS3D}.
 * together with for example the `style.transform` property.
 *
 * @param {CanvasRenderingContext2D} [context] - Optional context to sync with Matrix
 * @param {HTMLElement} [element=null] - DOM Element to synchronize
 * @prop {number} a - scale x
 * @prop {number} b - shear y
 * @prop {number} c - shear x
 * @prop {number} d - scale y
 * @prop {number} e - translate x
 * @prop {number} f - translate y
 * @prop {CanvasRenderingContext2D} [context] - set or get current synchronized 2D context
 * @prop {HTMLElement} [element] - get current synchronized DOM element
 * @prop {boolean} [useCSS3D=false] - is a DOM element is defined for sync., choose whether to use 2D (false) or 3D (true) matrix to sync it.
 * @constructor
 * @license MIT license
 * @copyright Epistemex.com 2014-2018
 */
function Matrix(t,e){var r,n=this;n._t=n.transform,n.a=n.d=1,n.b=n.c=n.e=n.f=0,t&&(n.context=t).setTransform(1,0,0,1,0,0),Object.defineProperty(n,"element",{get:function(){return r},set:function(t){r||(n._px=n._getPX(),n.useCSS3D=!1),r=t,(n._st=r.style)[n._px]=n.toCSS()}}),e&&(n.element=e)}Matrix.fromTriangles=function(t,e,r){var n,o,i,a,s,c,l=new Matrix,u=new Matrix(r);return o=Array.isArray(t)?"number"==typeof t[0]?(i=t[4],a=t[5],s=e[4],c=e[5],n=[t[0]-i,t[1]-a,t[2]-i,t[3]-a,i,a],[e[0]-s,e[1]-c,e[2]-s,e[3]-c,s,c]):(i=t[2].x,a=t[2].y,s=e[2].x,c=e[2].y,n=[t[0].x-i,t[0].y-a,t[1].x-i,t[1].y-a,i,a],[e[0].x-s,e[0].y-c,e[1].x-s,e[1].y-c,s,c]):(n=[t.px-t.rx,t.py-t.ry,t.qx-t.rx,t.qy-t.ry,t.rx,t.ry],[e.px-e.rx,e.py-e.ry,e.qx-e.rx,e.qy-e.ry,e.rx,e.ry]),l.setTransform.apply(l,n),u.setTransform.apply(u,o),u.multiply(l.inverse())},Matrix.fromSVGTransformList=function(t,e,r){for(var n=new Matrix(e,r),o=0;o<t.length;)n.multiply(t[o++].matrix);return n},Matrix.from=function(t,e,r,n,o,i,a,s){var c,l,u,f=new Matrix(a,s);if("number"==typeof t)f.setTransform(t,e,r,n,o,i);else if("number"==typeof t.x)u=Math.sqrt(t.x*t.x+t.y*t.y),c=l=1,n?c=u:l=u,f.translate(e||0,r||0).rotateFromVector(t).scaleU(c).translate(l,0);else{if("boolean"==typeof t.is2D&&!t.is2D)throw"Cannot use 3D DOMMatrix.";e&&(f.context=e),r&&(f.element=r),f.multiply(t)}return f},Matrix.prototype={_getPX:function(){for(var t,e=["t","oT","msT","mozT","webkitT","khtmlT"],r=0,n=document.createElement("div").style;t=e[r++];)if(void 0!==n[t+"ransform"])return t+"ransform"},concat:function(t){return this.clone().multiply(t)},flipX:function(){return this._t(-1,0,0,1,0,0)},flipY:function(){return this._t(1,0,0,-1,0,0)},reflectVector:function(t,e){var r=this.applyToPoint(0,1),n=2*(r.x*t+r.y*e);return{x:t-=n*r.x,y:e-=n*r.y}},reset:function(){return this.setTransform(1,0,0,1,0,0)},rotate:function(t){var e=Math.cos(t),r=Math.sin(t);return this._t(e,r,-r,e,0,0)},rotateFromVector:function(t,e){return this.rotate("number"==typeof t?Math.atan2(e,t):Math.atan2(t.y,t.x))},rotateDeg:function(t){return this.rotate(t*Math.PI/180)},scaleU:function(t){return this._t(t,0,0,t,0,0)},scale:function(t,e){return this._t(t,0,0,e,0,0)},scaleX:function(t){return this._t(t,0,0,1,0,0)},scaleY:function(t){return this._t(1,0,0,t,0,0)},scaleFromVector:function(t,e){return this.scaleU(Math.sqrt(t*t+e*e))},shear:function(t,e){return this._t(1,e,t,1,0,0)},shearX:function(t){return this._t(1,0,t,1,0,0)},shearY:function(t){return this._t(1,t,0,1,0,0)},skew:function(t,e){return this.shear(Math.tan(t),Math.tan(e))},skewDeg:function(t,e){return this.shear(Math.tan(t/180*Math.PI),Math.tan(e/180*Math.PI))},skewX:function(t){return this.shearX(Math.tan(t))},skewY:function(t){return this.shearY(Math.tan(t))},setTransform:function(t,e,r,n,o,i){return this.a=t,this.b=e,this.c=r,this.d=n,this.e=o,this.f=i,this._x()},translate:function(t,e){return this._t(1,0,0,1,t,e)},translateX:function(t){return this._t(1,0,0,1,t,0)},translateY:function(t){return this._t(1,0,0,1,0,t)},transform:function(t,e,r,n,o,i){var a=this,s=a.a,c=a.b,l=a.c,u=a.d,f=a.e,p=a.f;return a.a=s*t+l*e,a.b=c*t+u*e,a.c=s*r+l*n,a.d=c*r+u*n,a.e=s*o+l*i+f,a.f=c*o+u*i+p,a._x()},multiply:function(t){return this._t(t.a,t.b,t.c,t.d,t.e,t.f)},divide:function(t){return this.multiply(t.inverse())},divideScalar:function(t){if(!t)throw"Division on zero";return this.a/=t,this.b/=t,this.c/=t,this.d/=t,this.e/=t,this.f/=t,this._x()},inverse:function(t,e){var r=this,n=new Matrix(t?r.context:null,e?r.element:null),o=r.determinant();if(!o)throw"Matrix not invertible.";return n.a=r.d/o,n.b=-r.b/o,n.c=-r.c/o,n.d=r.a/o,n.e=(r.c*r.f-r.d*r.e)/o,n.f=-(r.a*r.f-r.b*r.e)/o,n},interpolate:function(t,e,r,n){var o=this,i=new Matrix(r,n);return i.a=o.a+(t.a-o.a)*e,i.b=o.b+(t.b-o.b)*e,i.c=o.c+(t.c-o.c)*e,i.d=o.d+(t.d-o.d)*e,i.e=o.e+(t.e-o.e)*e,i.f=o.f+(t.f-o.f)*e,i._x()},interpolateAnim:function(t,e,r,n){var o=new Matrix(r,n),i=this.decompose(),a=t.decompose(),s=i.translate,c=a.translate,l=i.scale;return o.translate(s.x+(c.x-s.x)*e,s.y+(c.y-s.y)*e),o.rotate(i.rotation+(a.rotation-i.rotation)*e),o.scale(l.x+(a.scale.x-l.x)*e,l.y+(a.scale.y-l.y)*e),o._x()},decompose:function(t){var e,r,n=this.a,o=this.b,i=this.c,a=this.d,s=Math.acos,c=Math.atan,l=Math.sqrt,u=Math.PI,f={x:this.e,y:this.f},p=0,h={x:1,y:1},y={x:0,y:0},b=n*a-o*i;return t?n?(y={x:c(i/n),y:c(o/n)},h={x:n,y:b/n}):y.x=o?(p=.5*u,h={x:o,y:b/o},c(a/o)):(h={x:i,y:a},.25*u):n||o?(e=l(n*n+o*o),p=0<o?s(n/e):-s(n/e),h={x:e,y:b/e},y.x=c((n*i+o*a)/(e*e))):i||a?(r=l(i*i+a*a),p=.5*u-(0<a?s(-i/r):-s(i/r)),h={x:b/r,y:r},y.y=c((n*i+o*a)/(r*r))):h={x:0,y:0},{translate:f,rotation:p,scale:h,skew:y}},determinant:function(){return this.a*this.d-this.b*this.c},applyToPoint:function(t,e){return{x:t*this.a+e*this.c+this.e,y:t*this.b+e*this.d+this.f}},applyToArray:function(t){var e,r,n=0,o=[];if("number"==typeof t[0])for(r=t.length;n<r;)e=this.applyToPoint(t[n++],t[n++]),o.push(e.x,e.y);else for(;e=t[n++];)o.push(this.applyToPoint(e.x,e.y));return o},applyToTypedArray:function(t,e){for(var r,n=0,o=t.length,i=e?new Float64Array(o):new Float32Array(o);n<o;)r=this.applyToPoint(t[n],t[n+1]),i[n++]=r.x,i[n++]=r.y;return i},applyToContext:function(t){return t.setTransform(this.a,this.b,this.c,this.d,this.e,this.f),this},applyToElement:function(t,e){return this._px||(this._px=this._getPX()),t.style[this._px]=e?this.toCSS3D():this.toCSS(),this},applyToObject:function(t){return t.a=this.a,t.b=this.b,t.c=this.c,t.d=this.d,t.e=this.e,t.f=this.f,this},isIdentity:function(){return!(1!==this.a||this.b||this.c||1!==this.d||this.e||this.f)},isInvertible:function(){return!this._q(this.determinant(),0)},isValid:function(){return!(this.a*this.d)},isEqual:function(t){var e=this._q;return e(this.a,t.a)&&e(this.b,t.b)&&e(this.c,t.c)&&e(this.d,t.d)&&e(this.e,t.e)&&e(this.f,t.f)},clone:function(t){return new Matrix(t?null:this.context).multiply(this)},toArray:function(){return[this.a,this.b,this.c,this.d,this.e,this.f]},toTypedArray:function(){return new Float32Array([this.a,this.b,this.c,this.d,this.e,this.f])},toCSS:function(){return"matrix("+this.toArray()+")"},toCSS3D:function(){return"matrix3d("+this.a+","+this.b+",0,0,"+this.c+","+this.d+",0,0,,0,0,,1,0,"+this.e+","+this.f+",0,1)"},toJSON:function(){return'{"a":'+this.a+',"b":'+this.b+',"c":'+this.c+',"d":'+this.d+',"e":'+this.e+',"f":'+this.f+"}"},toString:function(t){return t=t||4,"a="+this.a.toFixed(t)+" b="+this.b.toFixed(t)+" c="+this.c.toFixed(t)+" d="+this.d.toFixed(t)+" e="+this.e.toFixed(t)+" f="+this.f.toFixed(t)},toCSV:function(){return this.toArray().join()+"\r\n"},toDOMMatrix:function(){var t=null;return"DOMMatrix"in window&&((t=new DOMMatrix).a=this.a,t.b=this.b,t.c=this.c,t.d=this.d,t.e=this.e,t.f=this.f),t},toSVGMatrix:function(){var t=document.createElementNS("http://www.w3.org/2000/svg","svg"),e=null;return t&&((e=t.createSVGMatrix()).a=this.a,e.b=this.b,e.c=this.c,e.d=this.d,e.e=this.e,e.f=this.f),e},_q:function(t,e){return Math.abs(t-e)<1e-14},_x:function(){var t=this;return t.context&&t.context.setTransform(t.a,t.b,t.c,t.d,t.e,t.f),t._st&&(t._st[t._px]=t.useCSS3D?t.toCSS3D():t.toCSS()),t}},e.Matrix=Matrix}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,